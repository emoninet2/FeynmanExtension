
Feynman_Extension.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001b8c  00001c20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f0  0080016e  0080016e  00001c8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d0  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000baea  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002714  00000000  00000000  0000dcba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b2c  00000000  00000000  000103ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e4c  00000000  00000000  00012efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ae0  00000000  00000000  00013d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004953  00000000  00000000  00016828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  0001b17b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
       4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__vector_11>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__vector_16>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__vector_18>
      4c:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_19>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__vector_24>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	93 03       	fmuls	r17, r19
      ba:	53 08       	sbc	r5, r3
      bc:	e4 09       	sbc	r30, r4

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	ec e8       	ldi	r30, 0x8C	; 140
      d2:	fb e1       	ldi	r31, 0x1B	; 27
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	ae 36       	cpi	r26, 0x6E	; 110
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	23 e0       	ldi	r18, 0x03	; 3
      e2:	ae e6       	ldi	r26, 0x6E	; 110
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	ae 35       	cpi	r26, 0x5E	; 94
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	cf e5       	ldi	r28, 0x5F	; 95
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	21 97       	sbiw	r28, 0x01	; 1
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__tablejump2__>
     100:	cc 35       	cpi	r28, 0x5C	; 92
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	0e 94 12 0a 	call	0x1424	; 0x1424 <main>
     10a:	0c 94 c4 0d 	jmp	0x1b88	; 0x1b88 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <_Z15command_handlerPPci>:
volatile bool led1state = 0;
volatile bool led2state = 0;
volatile bool led3state = 0;
volatile bool ledstateupdate_flag = 0;

void *command_handler(char **args,int arg_count){
     112:	0f 93       	push	r16
     114:	1f 93       	push	r17
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	ec 01       	movw	r28, r24

	if(!strcmp(args[0], "cctv") ) {
     11c:	08 81       	ld	r16, Y
     11e:	19 81       	ldd	r17, Y+1	; 0x01
     120:	6a e0       	ldi	r22, 0x0A	; 10
     122:	71 e0       	ldi	r23, 0x01	; 1
     124:	c8 01       	movw	r24, r16
     126:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcmp>
     12a:	89 2b       	or	r24, r25
     12c:	b1 f5       	brne	.+108    	; 0x19a <_Z15command_handlerPPci+0x88>
		if(!strcmp(args[1], "pitch")) {
     12e:	0a 81       	ldd	r16, Y+2	; 0x02
     130:	1b 81       	ldd	r17, Y+3	; 0x03
     132:	6f e0       	ldi	r22, 0x0F	; 15
     134:	71 e0       	ldi	r23, 0x01	; 1
     136:	c8 01       	movw	r24, r16
     138:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcmp>
     13c:	89 2b       	or	r24, r25
     13e:	49 f4       	brne	.+18     	; 0x152 <_Z15command_handlerPPci+0x40>
			servo_pitch_pos = atoi(args[2]);
     140:	8c 81       	ldd	r24, Y+4	; 0x04
     142:	9d 81       	ldd	r25, Y+5	; 0x05
     144:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <atoi>
     148:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <servo_pitch_pos+0x1>
     14c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <servo_pitch_pos>
     150:	0f c0       	rjmp	.+30     	; 0x170 <_Z15command_handlerPPci+0x5e>
			servo_pos_update_flag = 1;
			//cctvPitchServo.write(servo_pitch_pos);
			//cctvPitchServo.write(atoi(args[2]));
		}
		else if(!strcmp(args[1], "yaw")) {
     152:	65 e1       	ldi	r22, 0x15	; 21
     154:	71 e0       	ldi	r23, 0x01	; 1
     156:	c8 01       	movw	r24, r16
     158:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcmp>
     15c:	89 2b       	or	r24, r25
     15e:	61 f4       	brne	.+24     	; 0x178 <_Z15command_handlerPPci+0x66>
			servo_yaw_pos = atoi(args[2]);
     160:	8c 81       	ldd	r24, Y+4	; 0x04
     162:	9d 81       	ldd	r25, Y+5	; 0x05
     164:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <atoi>
     168:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <servo_yaw_pos+0x1>
     16c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servo_yaw_pos>
			servo_pos_update_flag = 1;
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <servo_pos_update_flag>
     176:	87 c0       	rjmp	.+270    	; 0x286 <_Z15command_handlerPPci+0x174>
			//cctvYawServo.write(servo_yaw_pos);
			//cctvYawServo.write(atoi(args[2]));
		}
		else if(!strcmp(args[1], "speed")) {
     178:	69 e1       	ldi	r22, 0x19	; 25
     17a:	71 e0       	ldi	r23, 0x01	; 1
     17c:	c8 01       	movw	r24, r16
     17e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcmp>
     182:	89 2b       	or	r24, r25
     184:	09 f0       	breq	.+2      	; 0x188 <_Z15command_handlerPPci+0x76>
     186:	7f c0       	rjmp	.+254    	; 0x286 <_Z15command_handlerPPci+0x174>
			servo_speed = (atoi(args[2]));
     188:	8c 81       	ldd	r24, Y+4	; 0x04
     18a:	9d 81       	ldd	r25, Y+5	; 0x05
     18c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <atoi>
     190:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <servo_speed+0x1>
     194:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <servo_speed>
     198:	76 c0       	rjmp	.+236    	; 0x286 <_Z15command_handlerPPci+0x174>
		}
	}
	else if(!strcmp(args[0], "beep")) {
     19a:	6f e1       	ldi	r22, 0x1F	; 31
     19c:	71 e0       	ldi	r23, 0x01	; 1
     19e:	c8 01       	movw	r24, r16
     1a0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcmp>
     1a4:	89 2b       	or	r24, r25
     1a6:	71 f5       	brne	.+92     	; 0x204 <_Z15command_handlerPPci+0xf2>
		if(!strcmp(args[1], "set_rate")) {
     1a8:	0a 81       	ldd	r16, Y+2	; 0x02
     1aa:	1b 81       	ldd	r17, Y+3	; 0x03
     1ac:	64 e2       	ldi	r22, 0x24	; 36
     1ae:	71 e0       	ldi	r23, 0x01	; 1
     1b0:	c8 01       	movw	r24, r16
     1b2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcmp>
     1b6:	89 2b       	or	r24, r25
     1b8:	49 f4       	brne	.+18     	; 0x1cc <_Z15command_handlerPPci+0xba>
			beep_rate_ms = (atoi(args[2]));
     1ba:	8c 81       	ldd	r24, Y+4	; 0x04
     1bc:	9d 81       	ldd	r25, Y+5	; 0x05
     1be:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <atoi>
     1c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     1ca:	5d c0       	rjmp	.+186    	; 0x286 <_Z15command_handlerPPci+0x174>
		}
		else if(!strcmp(args[1], "now")) {
     1cc:	6d e2       	ldi	r22, 0x2D	; 45
     1ce:	71 e0       	ldi	r23, 0x01	; 1
     1d0:	c8 01       	movw	r24, r16
     1d2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcmp>
     1d6:	89 2b       	or	r24, r25
     1d8:	09 f0       	breq	.+2      	; 0x1dc <_Z15command_handlerPPci+0xca>
     1da:	55 c0       	rjmp	.+170    	; 0x286 <_Z15command_handlerPPci+0x174>
			beep_times = (atoi(args[2]));
     1dc:	8c 81       	ldd	r24, Y+4	; 0x04
     1de:	9d 81       	ldd	r25, Y+5	; 0x05
     1e0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <atoi>
     1e4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <beep_times+0x1>
     1e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <beep_times>
			if(beep_times >0){
     1ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <beep_times>
     1f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <beep_times+0x1>
     1f4:	18 16       	cp	r1, r24
     1f6:	19 06       	cpc	r1, r25
     1f8:	0c f0       	brlt	.+2      	; 0x1fc <_Z15command_handlerPPci+0xea>
     1fa:	45 c0       	rjmp	.+138    	; 0x286 <_Z15command_handlerPPci+0x174>
				beep_request = 1;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <beep_request>
     202:	41 c0       	rjmp	.+130    	; 0x286 <_Z15command_handlerPPci+0x174>
			}
			//beep_rate_ms = (atoi(args[2]));
		}
	}
	else if(!strcmp(args[0], "led")) {
     204:	61 e3       	ldi	r22, 0x31	; 49
     206:	71 e0       	ldi	r23, 0x01	; 1
     208:	c8 01       	movw	r24, r16
     20a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcmp>
     20e:	89 2b       	or	r24, r25
     210:	d1 f5       	brne	.+116    	; 0x286 <_Z15command_handlerPPci+0x174>
		if(!strcmp(args[1], "1")) {
     212:	0a 81       	ldd	r16, Y+2	; 0x02
     214:	1b 81       	ldd	r17, Y+3	; 0x03
     216:	65 e3       	ldi	r22, 0x35	; 53
     218:	71 e0       	ldi	r23, 0x01	; 1
     21a:	c8 01       	movw	r24, r16
     21c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcmp>
     220:	89 2b       	or	r24, r25
     222:	59 f4       	brne	.+22     	; 0x23a <_Z15command_handlerPPci+0x128>
			led1state = atoi(args[2]);
     224:	8c 81       	ldd	r24, Y+4	; 0x04
     226:	9d 81       	ldd	r25, Y+5	; 0x05
     228:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <atoi>
     22c:	21 e0       	ldi	r18, 0x01	; 1
     22e:	89 2b       	or	r24, r25
     230:	09 f4       	brne	.+2      	; 0x234 <_Z15command_handlerPPci+0x122>
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	20 93 73 01 	sts	0x0173, r18	; 0x800173 <led1state>
     238:	23 c0       	rjmp	.+70     	; 0x280 <_Z15command_handlerPPci+0x16e>
			ledstateupdate_flag = 1;
		}
		else if(!strcmp(args[1], "2")) {
     23a:	67 e3       	ldi	r22, 0x37	; 55
     23c:	71 e0       	ldi	r23, 0x01	; 1
     23e:	c8 01       	movw	r24, r16
     240:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcmp>
     244:	89 2b       	or	r24, r25
     246:	59 f4       	brne	.+22     	; 0x25e <_Z15command_handlerPPci+0x14c>
			led2state = atoi(args[2]);
     248:	8c 81       	ldd	r24, Y+4	; 0x04
     24a:	9d 81       	ldd	r25, Y+5	; 0x05
     24c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <atoi>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	89 2b       	or	r24, r25
     254:	09 f4       	brne	.+2      	; 0x258 <_Z15command_handlerPPci+0x146>
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <led2state>
     25c:	11 c0       	rjmp	.+34     	; 0x280 <_Z15command_handlerPPci+0x16e>
			ledstateupdate_flag = 1;
		}
		else if(!strcmp(args[1], "3")) {
     25e:	69 e3       	ldi	r22, 0x39	; 57
     260:	71 e0       	ldi	r23, 0x01	; 1
     262:	c8 01       	movw	r24, r16
     264:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strcmp>
     268:	89 2b       	or	r24, r25
     26a:	69 f4       	brne	.+26     	; 0x286 <_Z15command_handlerPPci+0x174>
			led3state = atoi(args[2]);
     26c:	8c 81       	ldd	r24, Y+4	; 0x04
     26e:	9d 81       	ldd	r25, Y+5	; 0x05
     270:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <atoi>
     274:	21 e0       	ldi	r18, 0x01	; 1
     276:	89 2b       	or	r24, r25
     278:	09 f4       	brne	.+2      	; 0x27c <_Z15command_handlerPPci+0x16a>
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <led3state>
			ledstateupdate_flag = 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <ledstateupdate_flag>
		}
		
	}
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	08 95       	ret

00000290 <_Z21command_parse_executePc>:

void command_parse_execute(char *command){
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	64 97       	sbiw	r28, 0x14	; 20
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61

	asm("nop");
     2b0:	00 00       	nop
	int arg_index = 0;
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
     2b2:	6b e3       	ldi	r22, 0x3B	; 59
     2b4:	71 e0       	ldi	r23, 0x01	; 1
     2b6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <strtok>
     2ba:	9e 01       	movw	r18, r28
     2bc:	2f 5f       	subi	r18, 0xFF	; 255
     2be:	3f 4f       	sbci	r19, 0xFF	; 255
     2c0:	79 01       	movw	r14, r18
}

void command_parse_execute(char *command){

	asm("nop");
	int arg_index = 0;
     2c2:	00 e0       	ldi	r16, 0x00	; 0
     2c4:	10 e0       	ldi	r17, 0x00	; 0
     2c6:	69 01       	movw	r12, r18
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
	while(pch != NULL) {
     2c8:	00 97       	sbiw	r24, 0x00	; 0
     2ca:	81 f0       	breq	.+32     	; 0x2ec <_Z21command_parse_executePc+0x5c>
		remotch_args[arg_index] = pch;
     2cc:	f7 01       	movw	r30, r14
     2ce:	81 93       	st	Z+, r24
     2d0:	91 93       	st	Z+, r25
     2d2:	7f 01       	movw	r14, r30
		arg_index++;
     2d4:	0f 5f       	subi	r16, 0xFF	; 255
     2d6:	1f 4f       	sbci	r17, 0xFF	; 255
		if(arg_index >=10) break;
     2d8:	0a 30       	cpi	r16, 0x0A	; 10
     2da:	11 05       	cpc	r17, r1
     2dc:	39 f0       	breq	.+14     	; 0x2ec <_Z21command_parse_executePc+0x5c>
		pch = strtok (NULL, " ,");
     2de:	6b e3       	ldi	r22, 0x3B	; 59
     2e0:	71 e0       	ldi	r23, 0x01	; 1
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <strtok>
	asm("nop");
	int arg_index = 0;
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
	while(pch != NULL) {
     2ea:	ee cf       	rjmp	.-36     	; 0x2c8 <_Z21command_parse_executePc+0x38>
		remotch_args[arg_index] = pch;
		arg_index++;
		if(arg_index >=10) break;
		pch = strtok (NULL, " ,");
	}
	command_handler(remotch_args,arg_index);
     2ec:	b8 01       	movw	r22, r16
     2ee:	c6 01       	movw	r24, r12
     2f0:	0e 94 89 00 	call	0x112	; 0x112 <_Z15command_handlerPPci>
}
     2f4:	64 96       	adiw	r28, 0x14	; 20
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	df 90       	pop	r13
     30e:	cf 90       	pop	r12
     310:	08 95       	ret

00000312 <setup>:
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio

void setup() {
	
	cctvPitchServo.attach(5);  // attaches the servo on pin 9 to the servo object
     312:	65 e0       	ldi	r22, 0x05	; 5
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	8c ec       	ldi	r24, 0xCC	; 204
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Servo6attachEi>
	cctvYawServo.attach(6);
     31e:	66 e0       	ldi	r22, 0x06	; 6
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	89 ec       	ldi	r24, 0xC9	; 201
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Servo6attachEi>

	cctvPitchServo.write(servo_pitch_pos);
     32a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <servo_pitch_pos>
     32e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <servo_pitch_pos+0x1>
     332:	8c ec       	ldi	r24, 0xCC	; 204
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN5Servo5writeEi>
	cctvYawServo.write(servo_yaw_pos);
     33a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <servo_yaw_pos>
     33e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <servo_yaw_pos+0x1>
     342:	89 ec       	ldi	r24, 0xC9	; 201
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN5Servo5writeEi>
	
	TCCR2B = /*_BV(CS22)| */_BV(CS21) | _BV(CS20);
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = 63;
     350:	8f e3       	ldi	r24, 0x3F	; 63
     352:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 0;
     356:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>

	pinMode(3, OUTPUT);
     35a:	61 e0       	ldi	r22, 0x01	; 1
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	0e 94 40 0c 	call	0x1880	; 0x1880 <pinMode>
		
	pinMode(7,OUTPUT);
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	87 e0       	ldi	r24, 0x07	; 7
     366:	0e 94 40 0c 	call	0x1880	; 0x1880 <pinMode>
	pinMode(8,OUTPUT);
     36a:	61 e0       	ldi	r22, 0x01	; 1
     36c:	88 e0       	ldi	r24, 0x08	; 8
     36e:	0e 94 40 0c 	call	0x1880	; 0x1880 <pinMode>
	pinMode(9,OUTPUT);
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	89 e0       	ldi	r24, 0x09	; 9
     376:	0e 94 40 0c 	call	0x1880	; 0x1880 <pinMode>
		
	digitalWrite(7,LOW);
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	87 e0       	ldi	r24, 0x07	; 7
     37e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <digitalWrite>
	digitalWrite(8,LOW);
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	88 e0       	ldi	r24, 0x08	; 8
     386:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <digitalWrite>
	digitalWrite(9,LOW);
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	89 e0       	ldi	r24, 0x09	; 9
     38e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <digitalWrite>
		
		
  Wire.begin(8);                // join i2c bus with address #8
     392:	68 e0       	ldi	r22, 0x08	; 8
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	83 e6       	ldi	r24, 0x63	; 99
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7TwoWire5beginEi>
  Wire.onReceive(receiveEvent); // register event
     39e:	6c ea       	ldi	r22, 0xAC	; 172
     3a0:	73 e0       	ldi	r23, 0x03	; 3
     3a2:	83 e6       	ldi	r24, 0x63	; 99
     3a4:	92 e0       	ldi	r25, 0x02	; 2
     3a6:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN7TwoWire9onReceiveEPFviE>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     3aa:	26 e0       	ldi	r18, 0x06	; 6
     3ac:	40 e8       	ldi	r20, 0x80	; 128
     3ae:	55 e2       	ldi	r21, 0x25	; 37
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	88 eb       	ldi	r24, 0xB8	; 184
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	0c 94 1d 09 	jmp	0x123a	; 0x123a <_ZN14HardwareSerial5beginEmh>

000003bc <loop>:
  Serial.begin(9600);           // start serial for output
}

void loop() {
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
	if(ledstateupdate_flag){
     3c4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <ledstateupdate_flag>
     3c8:	88 23       	and	r24, r24
     3ca:	01 f1       	breq	.+64     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		if(led1state) digitalWrite(7,HIGH);
     3cc:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <led1state>
     3d0:	88 23       	and	r24, r24
     3d2:	11 f0       	breq	.+4      	; 0x3d8 <loop+0x1c>
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <loop+0x1e>
		else digitalWrite(7,LOW);
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	87 e0       	ldi	r24, 0x07	; 7
     3dc:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <digitalWrite>
		
		if(led2state) digitalWrite(8,HIGH);
     3e0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <led2state>
     3e4:	88 23       	and	r24, r24
     3e6:	11 f0       	breq	.+4      	; 0x3ec <loop+0x30>
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <loop+0x32>
		else digitalWrite(8,LOW);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	88 e0       	ldi	r24, 0x08	; 8
     3f0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <digitalWrite>
		
		if(led3state) digitalWrite(9,HIGH);
     3f4:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <led3state>
     3f8:	88 23       	and	r24, r24
     3fa:	11 f0       	breq	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		else digitalWrite(9,LOW);
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	89 e0       	ldi	r24, 0x09	; 9
     404:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <digitalWrite>
		
		ledstateupdate_flag = 0;
     408:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <ledstateupdate_flag>
	}
	
	
	
	
	if( (beep_request==1) && ( millis() - beep_timer) > beep_rate_ms ){
     40c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <beep_request>
     410:	88 23       	and	r24, r24
     412:	09 f4       	brne	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	3f c0       	rjmp	.+126    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     416:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <millis>
     41a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     41e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     422:	c0 90 76 01 	lds	r12, 0x0176	; 0x800176 <beep_timer>
     426:	d0 90 77 01 	lds	r13, 0x0177	; 0x800177 <beep_timer+0x1>
     42a:	e0 90 78 01 	lds	r14, 0x0178	; 0x800178 <beep_timer+0x2>
     42e:	f0 90 79 01 	lds	r15, 0x0179	; 0x800179 <beep_timer+0x3>
     432:	ab 01       	movw	r20, r22
     434:	bc 01       	movw	r22, r24
     436:	4c 19       	sub	r20, r12
     438:	5d 09       	sbc	r21, r13
     43a:	6e 09       	sbc	r22, r14
     43c:	7f 09       	sbc	r23, r15
     43e:	c9 01       	movw	r24, r18
     440:	33 0f       	add	r19, r19
     442:	aa 0b       	sbc	r26, r26
     444:	bb 0b       	sbc	r27, r27
     446:	84 17       	cp	r24, r20
     448:	95 07       	cpc	r25, r21
     44a:	a6 07       	cpc	r26, r22
     44c:	b7 07       	cpc	r27, r23
     44e:	10 f5       	brcc	.+68     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		beep_state = !beep_state;
     450:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <beep_state>
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	89 27       	eor	r24, r25
     458:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <beep_state>
		
		if(beep_state) {
     45c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <beep_state>
     460:	88 23       	and	r24, r24
     462:	09 f4       	brne	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     464:	fc c0       	rjmp	.+504    	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
			analogWrite(3, 127);
     466:	6f e7       	ldi	r22, 0x7F	; 127
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <analogWrite>
		else {
			analogWrite(3, 0);
			beep_times--;
		}
		
		if(beep_times==0){
     470:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <beep_times>
     474:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <beep_times+0x1>
     478:	89 2b       	or	r24, r25
     47a:	11 f4       	brne	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			beep_request = 0;
     47c:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <beep_request>
		}
		
		beep_timer = millis();
     480:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <millis>
     484:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <beep_timer>
     488:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <beep_timer+0x1>
     48c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <beep_timer+0x2>
     490:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <beep_timer+0x3>
		//beep_request = 0;
	}
	
	
	if (process_it)
     494:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <process_it>
     498:	88 23       	and	r24, r24
     49a:	a1 f0       	breq	.+40     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	{
		buf [pos] = 0;
     49c:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <pos>
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	e7 57       	subi	r30, 0x77	; 119
     4a4:	fe 4f       	sbci	r31, 0xFE	; 254
     4a6:	10 82       	st	Z, r1
		pos = 0;
     4a8:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <pos>
		Serial.println (buf);
     4ac:	69 e8       	ldi	r22, 0x89	; 137
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	88 eb       	ldi	r24, 0xB8	; 184
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <_ZN5Print7printlnEPKc>
		command_parse_execute(buf);
     4b8:	89 e8       	ldi	r24, 0x89	; 137
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 48 01 	call	0x290	; 0x290 <_Z21command_parse_executePc>
		
		process_it = false;
     4c0:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <process_it>
	}  // end of flag set
	

	
	if((servo_pitch_pos_last > servo_pitch_pos) && (millis() - cctv_pitch_timer > (1000-servo_speed)) ){
     4c4:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <servo_pitch_pos_last>
     4c8:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <servo_pitch_pos_last+0x1>
     4cc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <servo_pitch_pos>
     4d0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <servo_pitch_pos+0x1>
     4d4:	82 17       	cp	r24, r18
     4d6:	93 07       	cpc	r25, r19
     4d8:	14 f5       	brge	.+68     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4da:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <millis>
     4de:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <servo_speed>
     4e2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <servo_speed+0x1>
     4e6:	c0 90 7e 01 	lds	r12, 0x017E	; 0x80017e <cctv_pitch_timer>
     4ea:	d0 90 7f 01 	lds	r13, 0x017F	; 0x80017f <cctv_pitch_timer+0x1>
     4ee:	e0 90 80 01 	lds	r14, 0x0180	; 0x800180 <cctv_pitch_timer+0x2>
     4f2:	f0 90 81 01 	lds	r15, 0x0181	; 0x800181 <cctv_pitch_timer+0x3>
     4f6:	ab 01       	movw	r20, r22
     4f8:	bc 01       	movw	r22, r24
     4fa:	4c 19       	sub	r20, r12
     4fc:	5d 09       	sbc	r21, r13
     4fe:	6e 09       	sbc	r22, r14
     500:	7f 09       	sbc	r23, r15
     502:	88 ee       	ldi	r24, 0xE8	; 232
     504:	93 e0       	ldi	r25, 0x03	; 3
     506:	82 1b       	sub	r24, r18
     508:	93 0b       	sbc	r25, r19
     50a:	09 2e       	mov	r0, r25
     50c:	00 0c       	add	r0, r0
     50e:	aa 0b       	sbc	r26, r26
     510:	bb 0b       	sbc	r27, r27
     512:	84 17       	cp	r24, r20
     514:	95 07       	cpc	r25, r21
     516:	a6 07       	cpc	r26, r22
     518:	b7 07       	cpc	r27, r23
     51a:	08 f4       	brcc	.+2      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     51c:	af c0       	rjmp	.+350    	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
		servo_pitch_pos_last--;
		cctv_pitch_timer = millis();
	}
	
	if((servo_pitch_pos_last < servo_pitch_pos) && (millis() - cctv_pitch_timer > (1000-servo_speed)) ){
     51e:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <servo_pitch_pos_last>
     522:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <servo_pitch_pos_last+0x1>
     526:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <servo_pitch_pos>
     52a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <servo_pitch_pos+0x1>
     52e:	28 17       	cp	r18, r24
     530:	39 07       	cpc	r19, r25
     532:	14 f5       	brge	.+68     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     534:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <millis>
     538:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <servo_speed>
     53c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <servo_speed+0x1>
     540:	c0 90 7e 01 	lds	r12, 0x017E	; 0x80017e <cctv_pitch_timer>
     544:	d0 90 7f 01 	lds	r13, 0x017F	; 0x80017f <cctv_pitch_timer+0x1>
     548:	e0 90 80 01 	lds	r14, 0x0180	; 0x800180 <cctv_pitch_timer+0x2>
     54c:	f0 90 81 01 	lds	r15, 0x0181	; 0x800181 <cctv_pitch_timer+0x3>
     550:	ab 01       	movw	r20, r22
     552:	bc 01       	movw	r22, r24
     554:	4c 19       	sub	r20, r12
     556:	5d 09       	sbc	r21, r13
     558:	6e 09       	sbc	r22, r14
     55a:	7f 09       	sbc	r23, r15
     55c:	88 ee       	ldi	r24, 0xE8	; 232
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	82 1b       	sub	r24, r18
     562:	93 0b       	sbc	r25, r19
     564:	09 2e       	mov	r0, r25
     566:	00 0c       	add	r0, r0
     568:	aa 0b       	sbc	r26, r26
     56a:	bb 0b       	sbc	r27, r27
     56c:	84 17       	cp	r24, r20
     56e:	95 07       	cpc	r25, r21
     570:	a6 07       	cpc	r26, r22
     572:	b7 07       	cpc	r27, r23
     574:	08 f4       	brcc	.+2      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     576:	96 c0       	rjmp	.+300    	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
		servo_pitch_pos_last++;
		cctv_pitch_timer = millis();
	}
	
	if((servo_yaw_pos_last > servo_yaw_pos) && (millis() - cctv_yaw_timer > (1000-servo_speed)) ){
     578:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <servo_yaw_pos_last>
     57c:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <servo_yaw_pos_last+0x1>
     580:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servo_yaw_pos>
     584:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <servo_yaw_pos+0x1>
     588:	82 17       	cp	r24, r18
     58a:	93 07       	cpc	r25, r19
     58c:	14 f5       	brge	.+68     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     58e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <millis>
     592:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <servo_speed>
     596:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <servo_speed+0x1>
     59a:	c0 90 7a 01 	lds	r12, 0x017A	; 0x80017a <cctv_yaw_timer>
     59e:	d0 90 7b 01 	lds	r13, 0x017B	; 0x80017b <cctv_yaw_timer+0x1>
     5a2:	e0 90 7c 01 	lds	r14, 0x017C	; 0x80017c <cctv_yaw_timer+0x2>
     5a6:	f0 90 7d 01 	lds	r15, 0x017D	; 0x80017d <cctv_yaw_timer+0x3>
     5aa:	ab 01       	movw	r20, r22
     5ac:	bc 01       	movw	r22, r24
     5ae:	4c 19       	sub	r20, r12
     5b0:	5d 09       	sbc	r21, r13
     5b2:	6e 09       	sbc	r22, r14
     5b4:	7f 09       	sbc	r23, r15
     5b6:	88 ee       	ldi	r24, 0xE8	; 232
     5b8:	93 e0       	ldi	r25, 0x03	; 3
     5ba:	82 1b       	sub	r24, r18
     5bc:	93 0b       	sbc	r25, r19
     5be:	09 2e       	mov	r0, r25
     5c0:	00 0c       	add	r0, r0
     5c2:	aa 0b       	sbc	r26, r26
     5c4:	bb 0b       	sbc	r27, r27
     5c6:	84 17       	cp	r24, r20
     5c8:	95 07       	cpc	r25, r21
     5ca:	a6 07       	cpc	r26, r22
     5cc:	b7 07       	cpc	r27, r23
     5ce:	08 f4       	brcc	.+2      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     5d0:	7d c0       	rjmp	.+250    	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
		servo_yaw_pos_last--;
		cctv_yaw_timer = millis();
	}
	
	if((servo_yaw_pos_last < servo_yaw_pos) && (millis() - cctv_yaw_timer > (1000-servo_speed)) ){
     5d2:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <servo_yaw_pos_last>
     5d6:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <servo_yaw_pos_last+0x1>
     5da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servo_yaw_pos>
     5de:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <servo_yaw_pos+0x1>
     5e2:	28 17       	cp	r18, r24
     5e4:	39 07       	cpc	r19, r25
     5e6:	14 f5       	brge	.+68     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     5e8:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <millis>
     5ec:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <servo_speed>
     5f0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <servo_speed+0x1>
     5f4:	c0 90 7a 01 	lds	r12, 0x017A	; 0x80017a <cctv_yaw_timer>
     5f8:	d0 90 7b 01 	lds	r13, 0x017B	; 0x80017b <cctv_yaw_timer+0x1>
     5fc:	e0 90 7c 01 	lds	r14, 0x017C	; 0x80017c <cctv_yaw_timer+0x2>
     600:	f0 90 7d 01 	lds	r15, 0x017D	; 0x80017d <cctv_yaw_timer+0x3>
     604:	ab 01       	movw	r20, r22
     606:	bc 01       	movw	r22, r24
     608:	4c 19       	sub	r20, r12
     60a:	5d 09       	sbc	r21, r13
     60c:	6e 09       	sbc	r22, r14
     60e:	7f 09       	sbc	r23, r15
     610:	88 ee       	ldi	r24, 0xE8	; 232
     612:	93 e0       	ldi	r25, 0x03	; 3
     614:	82 1b       	sub	r24, r18
     616:	93 0b       	sbc	r25, r19
     618:	09 2e       	mov	r0, r25
     61a:	00 0c       	add	r0, r0
     61c:	aa 0b       	sbc	r26, r26
     61e:	bb 0b       	sbc	r27, r27
     620:	84 17       	cp	r24, r20
     622:	95 07       	cpc	r25, r21
     624:	a6 07       	cpc	r26, r22
     626:	b7 07       	cpc	r27, r23
     628:	08 f4       	brcc	.+2      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     62a:	64 c0       	rjmp	.+200    	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
		servo_yaw_pos_last++;
		cctv_yaw_timer = millis();
	}

	if(servo_pos_update_flag){
     62c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <servo_pos_update_flag>
     630:	88 23       	and	r24, r24
     632:	09 f4       	brne	.+2      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     634:	73 c0       	rjmp	.+230    	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
		cctvPitchServo.write(servo_pitch_pos_last);
     636:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <servo_pitch_pos_last>
     63a:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <servo_pitch_pos_last+0x1>
     63e:	8c ec       	ldi	r24, 0xCC	; 204
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN5Servo5writeEi>
		cctvYawServo.write(servo_yaw_pos_last);
     646:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <servo_yaw_pos_last>
     64a:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <servo_yaw_pos_last+0x1>
     64e:	89 ec       	ldi	r24, 0xC9	; 201
     650:	91 e0       	ldi	r25, 0x01	; 1
		//servo_pos_update_flag = 0;
	}

}
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	cf 90       	pop	r12
		cctv_yaw_timer = millis();
	}

	if(servo_pos_update_flag){
		cctvPitchServo.write(servo_pitch_pos_last);
		cctvYawServo.write(servo_yaw_pos_last);
     65a:	0c 94 74 05 	jmp	0xae8	; 0xae8 <_ZN5Servo5writeEi>
		
		if(beep_state) {
			analogWrite(3, 127);
		}
		else {
			analogWrite(3, 0);
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	0e 94 b8 0b 	call	0x1770	; 0x1770 <analogWrite>
			beep_times--;
     668:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <beep_times>
     66c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <beep_times+0x1>
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <beep_times+0x1>
     676:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <beep_times>
     67a:	fa ce       	rjmp	.-524    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	}  // end of flag set
	

	
	if((servo_pitch_pos_last > servo_pitch_pos) && (millis() - cctv_pitch_timer > (1000-servo_speed)) ){
		servo_pitch_pos_last--;
     67c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <servo_pitch_pos_last>
     680:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <servo_pitch_pos_last+0x1>
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <servo_pitch_pos_last+0x1>
     68a:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <servo_pitch_pos_last>
		cctv_pitch_timer = millis();
     68e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <millis>
     692:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <cctv_pitch_timer>
     696:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <cctv_pitch_timer+0x1>
     69a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <cctv_pitch_timer+0x2>
     69e:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <cctv_pitch_timer+0x3>
     6a2:	3d cf       	rjmp	.-390    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
	}
	
	if((servo_pitch_pos_last < servo_pitch_pos) && (millis() - cctv_pitch_timer > (1000-servo_speed)) ){
		servo_pitch_pos_last++;
     6a4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <servo_pitch_pos_last>
     6a8:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <servo_pitch_pos_last+0x1>
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <servo_pitch_pos_last+0x1>
     6b2:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <servo_pitch_pos_last>
		cctv_pitch_timer = millis();
     6b6:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <millis>
     6ba:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <cctv_pitch_timer>
     6be:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <cctv_pitch_timer+0x1>
     6c2:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <cctv_pitch_timer+0x2>
     6c6:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <cctv_pitch_timer+0x3>
     6ca:	56 cf       	rjmp	.-340    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
	}
	
	if((servo_yaw_pos_last > servo_yaw_pos) && (millis() - cctv_yaw_timer > (1000-servo_speed)) ){
		servo_yaw_pos_last--;
     6cc:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <servo_yaw_pos_last>
     6d0:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <servo_yaw_pos_last+0x1>
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <servo_yaw_pos_last+0x1>
     6da:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <servo_yaw_pos_last>
		cctv_yaw_timer = millis();
     6de:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <millis>
     6e2:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <cctv_yaw_timer>
     6e6:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <cctv_yaw_timer+0x1>
     6ea:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <cctv_yaw_timer+0x2>
     6ee:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <cctv_yaw_timer+0x3>
     6f2:	6f cf       	rjmp	.-290    	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
	}
	
	if((servo_yaw_pos_last < servo_yaw_pos) && (millis() - cctv_yaw_timer > (1000-servo_speed)) ){
		servo_yaw_pos_last++;
     6f4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <servo_yaw_pos_last>
     6f8:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <servo_yaw_pos_last+0x1>
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <servo_yaw_pos_last+0x1>
     702:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <servo_yaw_pos_last>
		cctv_yaw_timer = millis();
     706:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <millis>
     70a:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <cctv_yaw_timer>
     70e:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <cctv_yaw_timer+0x1>
     712:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <cctv_yaw_timer+0x2>
     716:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <cctv_yaw_timer+0x3>
     71a:	88 cf       	rjmp	.-240    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
		cctvPitchServo.write(servo_pitch_pos_last);
		cctvYawServo.write(servo_yaw_pos_last);
		//servo_pos_update_flag = 0;
	}

}
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	df 90       	pop	r13
     722:	cf 90       	pop	r12
     724:	08 95       	ret

00000726 <_GLOBAL__sub_I_cctvPitchServo>:
#include <Servo.h>
/*End of auto generated code by Atmel studio */

void receiveEvent(int howMany) ;

Servo cctvPitchServo;  // create servo object to control a servo
     726:	8c ec       	ldi	r24, 0xCC	; 204
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN5ServoC1Ev>
Servo cctvYawServo;  // create servo object to control a servo
     72e:	89 ec       	ldi	r24, 0xC9	; 201
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN5ServoC1Ev>
volatile boolean process_it;

volatile int servo_speed = 1000;
volatile int servo_pitch_pos = 60;
volatile int servo_yaw_pos = 90;
volatile int servo_pitch_pos_last = servo_pitch_pos;
     736:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <servo_pitch_pos>
     73a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <servo_pitch_pos+0x1>
     73e:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <servo_pitch_pos_last+0x1>
     742:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <servo_pitch_pos_last>
volatile int servo_yaw_pos_last = servo_yaw_pos;
     746:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servo_yaw_pos>
     74a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <servo_yaw_pos+0x1>
     74e:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <servo_yaw_pos_last+0x1>
     752:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <servo_yaw_pos_last>
     756:	08 95       	ret

00000758 <_Z12receiveEventi>:
}

// function that executes whenever data is received from master
// this function is registered as an event, see setup()
void receiveEvent(int howMany) {
  while (1 < Wire.available()) { // loop through all but the last
     758:	83 e6       	ldi	r24, 0x63	; 99
     75a:	92 e0       	ldi	r25, 0x02	; 2
     75c:	0e 94 61 07 	call	0xec2	; 0xec2 <_ZN7TwoWire9availableEv>
     760:	02 97       	sbiw	r24, 0x02	; 2
     762:	54 f0       	brlt	.+20     	; 0x778 <_Z12receiveEventi+0x20>
    char c = Wire.read(); // receive byte as a character
     764:	83 e6       	ldi	r24, 0x63	; 99
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN7TwoWire4readEv>
    Serial.print(c);         // print the character
     76c:	68 2f       	mov	r22, r24
     76e:	88 eb       	ldi	r24, 0xB8	; 184
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <_ZN5Print5printEc>
}

// function that executes whenever data is received from master
// this function is registered as an event, see setup()
void receiveEvent(int howMany) {
  while (1 < Wire.available()) { // loop through all but the last
     776:	f0 cf       	rjmp	.-32     	; 0x758 <_Z12receiveEventi>
    char c = Wire.read(); // receive byte as a character
    Serial.print(c);         // print the character
  }
  int c = Wire.read();    // receive byte as an integer
     778:	83 e6       	ldi	r24, 0x63	; 99
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN7TwoWire4readEv>
   if (pos < sizeof(buf))
     780:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <pos>
     784:	20 34       	cpi	r18, 0x40	; 64
     786:	80 f4       	brcc	.+32     	; 0x7a8 <_Z12receiveEventi+0x50>
   {
	   buf [pos++] = c;
     788:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <pos>
     78c:	21 e0       	ldi	r18, 0x01	; 1
     78e:	2e 0f       	add	r18, r30
     790:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <pos>
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	e7 57       	subi	r30, 0x77	; 119
     798:	fe 4f       	sbci	r31, 0xFE	; 254
     79a:	80 83       	st	Z, r24
	   
	   // example: newline means time to process buffer
	   if (c == '\n')
     79c:	8a 30       	cpi	r24, 0x0A	; 10
     79e:	91 05       	cpc	r25, r1
     7a0:	19 f4       	brne	.+6      	; 0x7a8 <_Z12receiveEventi+0x50>
	   process_it = true;
     7a2:	21 e0       	ldi	r18, 0x01	; 1
     7a4:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <process_it>
	   
   }  // end of room available
  Serial.println(c);         // print the integer
     7a8:	4a e0       	ldi	r20, 0x0A	; 10
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	bc 01       	movw	r22, r24
     7ae:	88 eb       	ldi	r24, 0xB8	; 184
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	0c 94 15 0b 	jmp	0x162a	; 0x162a <_ZN5Print7printlnEii>

000007b6 <__vector_11>:
  return this->servoIndex ;
}

void Servo::detach()
{
  servos[this->servoIndex].Pin.isActive = false;
     7b6:	1f 92       	push	r1
     7b8:	0f 92       	push	r0
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
     7d8:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_ZL7Channel>
     7dc:	87 ff       	sbrs	r24, 7
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <__vector_11+0x34>
     7e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     7e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     7e8:	1b c0       	rjmp	.+54     	; 0x820 <__vector_11+0x6a>
     7ea:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <_ZL7Channel>
     7ee:	02 2e       	mov	r0, r18
     7f0:	00 0c       	add	r0, r0
     7f2:	33 0b       	sbc	r19, r19
     7f4:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <ServoCount>
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	28 17       	cp	r18, r24
     7fc:	39 07       	cpc	r19, r25
     7fe:	84 f4       	brge	.+32     	; 0x820 <__vector_11+0x6a>
     800:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_ZL7Channel>
     804:	08 2e       	mov	r0, r24
     806:	00 0c       	add	r0, r0
     808:	99 0b       	sbc	r25, r25
     80a:	fc 01       	movw	r30, r24
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	8e 0f       	add	r24, r30
     812:	9f 1f       	adc	r25, r31
     814:	fc 01       	movw	r30, r24
     816:	ef 52       	subi	r30, 0x2F	; 47
     818:	fe 4f       	sbci	r31, 0xFE	; 254
     81a:	80 81       	ld	r24, Z
     81c:	86 fd       	sbrc	r24, 6
     81e:	15 c0       	rjmp	.+42     	; 0x84a <__vector_11+0x94>
     820:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_ZL7Channel>
     824:	8f 5f       	subi	r24, 0xFF	; 255
     826:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <_ZL7Channel>
     82a:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <_ZL7Channel>
     82e:	02 2e       	mov	r0, r18
     830:	00 0c       	add	r0, r0
     832:	33 0b       	sbc	r19, r19
     834:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <ServoCount>
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	28 17       	cp	r18, r24
     83c:	39 07       	cpc	r19, r25
     83e:	c4 f4       	brge	.+48     	; 0x870 <__vector_11+0xba>
     840:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_ZL7Channel>
     844:	8c 30       	cpi	r24, 0x0C	; 12
     846:	64 f1       	brlt	.+88     	; 0x8a0 <__vector_11+0xea>
     848:	13 c0       	rjmp	.+38     	; 0x870 <__vector_11+0xba>
     84a:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_ZL7Channel>
     84e:	08 2e       	mov	r0, r24
     850:	00 0c       	add	r0, r0
     852:	99 0b       	sbc	r25, r25
     854:	fc 01       	movw	r30, r24
     856:	ee 0f       	add	r30, r30
     858:	ff 1f       	adc	r31, r31
     85a:	8e 0f       	add	r24, r30
     85c:	9f 1f       	adc	r25, r31
     85e:	fc 01       	movw	r30, r24
     860:	ef 52       	subi	r30, 0x2F	; 47
     862:	fe 4f       	sbci	r31, 0xFE	; 254
     864:	80 81       	ld	r24, Z
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	8f 73       	andi	r24, 0x3F	; 63
     86a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <digitalWrite>
     86e:	d8 cf       	rjmp	.-80     	; 0x820 <__vector_11+0x6a>
     870:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     874:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     878:	04 96       	adiw	r24, 0x04	; 4
     87a:	80 34       	cpi	r24, 0x40	; 64
     87c:	9c 49       	sbci	r25, 0x9C	; 156
     87e:	18 f4       	brcc	.+6      	; 0x886 <__vector_11+0xd0>
     880:	80 e4       	ldi	r24, 0x40	; 64
     882:	9c e9       	ldi	r25, 0x9C	; 156
     884:	05 c0       	rjmp	.+10     	; 0x890 <__vector_11+0xda>
     886:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     88a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     88e:	04 96       	adiw	r24, 0x04	; 4
     890:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     894:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <_ZL7Channel>
     89e:	3b c0       	rjmp	.+118    	; 0x916 <__stack+0x17>
     8a0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     8a4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     8a8:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_ZL7Channel>
     8ac:	08 2e       	mov	r0, r24
     8ae:	00 0c       	add	r0, r0
     8b0:	99 0b       	sbc	r25, r25
     8b2:	fc 01       	movw	r30, r24
     8b4:	ee 0f       	add	r30, r30
     8b6:	ff 1f       	adc	r31, r31
     8b8:	8e 0f       	add	r24, r30
     8ba:	9f 1f       	adc	r25, r31
     8bc:	fc 01       	movw	r30, r24
     8be:	ef 52       	subi	r30, 0x2F	; 47
     8c0:	fe 4f       	sbci	r31, 0xFE	; 254
     8c2:	81 81       	ldd	r24, Z+1	; 0x01
     8c4:	92 81       	ldd	r25, Z+2	; 0x02
     8c6:	82 0f       	add	r24, r18
     8c8:	93 1f       	adc	r25, r19
     8ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     8d2:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_ZL7Channel>
     8d6:	08 2e       	mov	r0, r24
     8d8:	00 0c       	add	r0, r0
     8da:	99 0b       	sbc	r25, r25
     8dc:	fc 01       	movw	r30, r24
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	8e 0f       	add	r24, r30
     8e4:	9f 1f       	adc	r25, r31
     8e6:	fc 01       	movw	r30, r24
     8e8:	ef 52       	subi	r30, 0x2F	; 47
     8ea:	fe 4f       	sbci	r31, 0xFE	; 254
     8ec:	80 81       	ld	r24, Z
     8ee:	86 ff       	sbrs	r24, 6
     8f0:	12 c0       	rjmp	.+36     	; 0x916 <__stack+0x17>
     8f2:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_ZL7Channel>
     8f6:	08 2e       	mov	r0, r24
     8f8:	00 0c       	add	r0, r0
     8fa:	99 0b       	sbc	r25, r25
     8fc:	fc 01       	movw	r30, r24
     8fe:	ee 0f       	add	r30, r30
     900:	ff 1f       	adc	r31, r31
     902:	8e 0f       	add	r24, r30
     904:	9f 1f       	adc	r25, r31
     906:	fc 01       	movw	r30, r24
     908:	ef 52       	subi	r30, 0x2F	; 47
     90a:	fe 4f       	sbci	r31, 0xFE	; 254
     90c:	80 81       	ld	r24, Z
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	8f 73       	andi	r24, 0x3F	; 63
     912:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <digitalWrite>
     916:	ff 91       	pop	r31
     918:	ef 91       	pop	r30
     91a:	bf 91       	pop	r27
     91c:	af 91       	pop	r26
     91e:	9f 91       	pop	r25
     920:	8f 91       	pop	r24
     922:	7f 91       	pop	r23
     924:	6f 91       	pop	r22
     926:	5f 91       	pop	r21
     928:	4f 91       	pop	r20
     92a:	3f 91       	pop	r19
     92c:	2f 91       	pop	r18
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	0f 90       	pop	r0
     934:	1f 90       	pop	r1
     936:	18 95       	reti

00000938 <_ZN5ServoC1Ev>:
     938:	fc 01       	movw	r30, r24
     93a:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <ServoCount>
     93e:	9c 30       	cpi	r25, 0x0C	; 12
     940:	a0 f4       	brcc	.+40     	; 0x96a <_ZN5ServoC1Ev+0x32>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	89 0f       	add	r24, r25
     946:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <ServoCount>
     94a:	90 83       	st	Z, r25
     94c:	89 2f       	mov	r24, r25
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	fc 01       	movw	r30, r24
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	8e 0f       	add	r24, r30
     958:	9f 1f       	adc	r25, r31
     95a:	fc 01       	movw	r30, r24
     95c:	ef 52       	subi	r30, 0x2F	; 47
     95e:	fe 4f       	sbci	r31, 0xFE	; 254
     960:	88 eb       	ldi	r24, 0xB8	; 184
     962:	9b e0       	ldi	r25, 0x0B	; 11
     964:	92 83       	std	Z+2, r25	; 0x02
     966:	81 83       	std	Z+1, r24	; 0x01
     968:	08 95       	ret
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	80 83       	st	Z, r24
     96e:	08 95       	ret

00000970 <_ZN5Servo6attachEiii>:
     970:	df 92       	push	r13
     972:	ef 92       	push	r14
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	ec 01       	movw	r28, r24
     980:	d6 2e       	mov	r13, r22
     982:	7a 01       	movw	r14, r20
     984:	89 01       	movw	r16, r18
     986:	88 81       	ld	r24, Y
     988:	8c 30       	cpi	r24, 0x0C	; 12
     98a:	08 f0       	brcs	.+2      	; 0x98e <_ZN5Servo6attachEiii+0x1e>
     98c:	68 c0       	rjmp	.+208    	; 0xa5e <_ZN5Servo6attachEiii+0xee>
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	8d 2d       	mov	r24, r13
     992:	0e 94 40 0c 	call	0x1880	; 0x1880 <pinMode>
     996:	88 81       	ld	r24, Y
     998:	e8 2f       	mov	r30, r24
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	9f 01       	movw	r18, r30
     99e:	22 0f       	add	r18, r18
     9a0:	33 1f       	adc	r19, r19
     9a2:	e2 0f       	add	r30, r18
     9a4:	f3 1f       	adc	r31, r19
     9a6:	ef 52       	subi	r30, 0x2F	; 47
     9a8:	fe 4f       	sbci	r31, 0xFE	; 254
     9aa:	9d 2d       	mov	r25, r13
     9ac:	9f 73       	andi	r25, 0x3F	; 63
     9ae:	20 81       	ld	r18, Z
     9b0:	20 7c       	andi	r18, 0xC0	; 192
     9b2:	d2 2e       	mov	r13, r18
     9b4:	d9 2a       	or	r13, r25
     9b6:	d0 82       	st	Z, r13
     9b8:	20 e2       	ldi	r18, 0x20	; 32
     9ba:	32 e0       	ldi	r19, 0x02	; 2
     9bc:	2e 19       	sub	r18, r14
     9be:	3f 09       	sbc	r19, r15
     9c0:	37 ff       	sbrs	r19, 7
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <_ZN5Servo6attachEiii+0x58>
     9c4:	2d 5f       	subi	r18, 0xFD	; 253
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	35 95       	asr	r19
     9ca:	27 95       	ror	r18
     9cc:	35 95       	asr	r19
     9ce:	27 95       	ror	r18
     9d0:	29 83       	std	Y+1, r18	; 0x01
     9d2:	20 e6       	ldi	r18, 0x60	; 96
     9d4:	39 e0       	ldi	r19, 0x09	; 9
     9d6:	20 1b       	sub	r18, r16
     9d8:	31 0b       	sbc	r19, r17
     9da:	37 ff       	sbrs	r19, 7
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <_ZN5Servo6attachEiii+0x72>
     9de:	2d 5f       	subi	r18, 0xFD	; 253
     9e0:	3f 4f       	sbci	r19, 0xFF	; 255
     9e2:	35 95       	asr	r19
     9e4:	27 95       	ror	r18
     9e6:	35 95       	asr	r19
     9e8:	27 95       	ror	r18
     9ea:	2a 83       	std	Y+2, r18	; 0x02
     9ec:	2c e0       	ldi	r18, 0x0C	; 12
     9ee:	62 2f       	mov	r22, r18
     9f0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__udivmodqi4>
     9f4:	28 9f       	mul	r18, r24
     9f6:	b0 01       	movw	r22, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	9b 01       	movw	r18, r22
     a00:	24 0f       	add	r18, r20
     a02:	35 1f       	adc	r19, r21
     a04:	f9 01       	movw	r30, r18
     a06:	ee 0f       	add	r30, r30
     a08:	ff 1f       	adc	r31, r31
     a0a:	2e 0f       	add	r18, r30
     a0c:	3f 1f       	adc	r19, r31
     a0e:	f9 01       	movw	r30, r18
     a10:	ef 52       	subi	r30, 0x2F	; 47
     a12:	fe 4f       	sbci	r31, 0xFE	; 254
     a14:	90 81       	ld	r25, Z
     a16:	96 fd       	sbrc	r25, 6
     a18:	16 c0       	rjmp	.+44     	; 0xa46 <_ZN5Servo6attachEiii+0xd6>
     a1a:	4f 5f       	subi	r20, 0xFF	; 255
     a1c:	5f 4f       	sbci	r21, 0xFF	; 255
     a1e:	4c 30       	cpi	r20, 0x0C	; 12
     a20:	51 05       	cpc	r21, r1
     a22:	69 f7       	brne	.-38     	; 0x9fe <_ZN5Servo6attachEiii+0x8e>
     a24:	81 11       	cpse	r24, r1
     a26:	0f c0       	rjmp	.+30     	; 0xa46 <_ZN5Servo6attachEiii+0xd6>
     a28:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     a32:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a36:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a3a:	b1 9a       	sbi	0x16, 1	; 22
     a3c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     a40:	82 60       	ori	r24, 0x02	; 2
     a42:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     a46:	e8 81       	ld	r30, Y
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	cf 01       	movw	r24, r30
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	e8 0f       	add	r30, r24
     a52:	f9 1f       	adc	r31, r25
     a54:	ef 52       	subi	r30, 0x2F	; 47
     a56:	fe 4f       	sbci	r31, 0xFE	; 254
     a58:	80 81       	ld	r24, Z
     a5a:	80 64       	ori	r24, 0x40	; 64
     a5c:	80 83       	st	Z, r24
     a5e:	88 81       	ld	r24, Y
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	08 95       	ret

00000a70 <_ZN5Servo6attachEi>:
     a70:	20 e6       	ldi	r18, 0x60	; 96
     a72:	39 e0       	ldi	r19, 0x09	; 9
     a74:	40 e2       	ldi	r20, 0x20	; 32
     a76:	52 e0       	ldi	r21, 0x02	; 2
     a78:	0c 94 b8 04 	jmp	0x970	; 0x970 <_ZN5Servo6attachEiii>

00000a7c <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
     a7c:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     a7e:	90 81       	ld	r25, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     a80:	9c 30       	cpi	r25, 0x0C	; 12
     a82:	88 f5       	brcc	.+98     	; 0xae6 <_ZN5Servo17writeMicrosecondsEi+0x6a>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     a84:	81 81       	ldd	r24, Z+1	; 0x01
     a86:	28 e8       	ldi	r18, 0x88	; 136
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	28 1b       	sub	r18, r24
     a8c:	31 09       	sbc	r19, r1
     a8e:	87 fd       	sbrc	r24, 7
     a90:	33 95       	inc	r19
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	22 0f       	add	r18, r18
     a98:	33 1f       	adc	r19, r19
     a9a:	62 17       	cp	r22, r18
     a9c:	73 07       	cpc	r23, r19
     a9e:	84 f0       	brlt	.+32     	; 0xac0 <_ZN5Servo17writeMicrosecondsEi+0x44>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
     aa0:	82 81       	ldd	r24, Z+2	; 0x02
     aa2:	48 e5       	ldi	r20, 0x58	; 88
     aa4:	52 e0       	ldi	r21, 0x02	; 2
     aa6:	48 1b       	sub	r20, r24
     aa8:	51 09       	sbc	r21, r1
     aaa:	87 fd       	sbrc	r24, 7
     aac:	53 95       	inc	r21
     aae:	44 0f       	add	r20, r20
     ab0:	55 1f       	adc	r21, r21
     ab2:	44 0f       	add	r20, r20
     ab4:	55 1f       	adc	r21, r21
     ab6:	9b 01       	movw	r18, r22
     ab8:	46 17       	cp	r20, r22
     aba:	57 07       	cpc	r21, r23
     abc:	0c f4       	brge	.+2      	; 0xac0 <_ZN5Servo17writeMicrosecondsEi+0x44>
     abe:	9a 01       	movw	r18, r20
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
     ac0:	22 50       	subi	r18, 0x02	; 2
     ac2:	31 09       	sbc	r19, r1
     ac4:	22 0f       	add	r18, r18
     ac6:	33 1f       	adc	r19, r19

    uint8_t oldSREG = SREG;
     ac8:	4f b7       	in	r20, 0x3f	; 63
    cli();
     aca:	f8 94       	cli
    servos[channel].ticks = value;
     acc:	89 2f       	mov	r24, r25
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	fc 01       	movw	r30, r24
     ad2:	ee 0f       	add	r30, r30
     ad4:	ff 1f       	adc	r31, r31
     ad6:	8e 0f       	add	r24, r30
     ad8:	9f 1f       	adc	r25, r31
     ada:	fc 01       	movw	r30, r24
     adc:	ef 52       	subi	r30, 0x2F	; 47
     ade:	fe 4f       	sbci	r31, 0xFE	; 254
     ae0:	32 83       	std	Z+2, r19	; 0x02
     ae2:	21 83       	std	Z+1, r18	; 0x01
    SREG = oldSREG;
     ae4:	4f bf       	out	0x3f, r20	; 63
     ae6:	08 95       	ret

00000ae8 <_ZN5Servo5writeEi>:
    finISR(timer);
  }
}

void Servo::write(int value)
{
     ae8:	af 92       	push	r10
     aea:	bf 92       	push	r11
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	ec 01       	movw	r28, r24
  if(value < MIN_PULSE_WIDTH)
     afe:	60 32       	cpi	r22, 0x20	; 32
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	78 07       	cpc	r23, r24
     b04:	0c f0       	brlt	.+2      	; 0xb08 <_ZN5Servo5writeEi+0x20>
     b06:	3f c0       	rjmp	.+126    	; 0xb86 <_ZN5Servo5writeEi+0x9e>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
     b08:	77 fd       	sbrc	r23, 7
     b0a:	06 c0       	rjmp	.+12     	; 0xb18 <_ZN5Servo5writeEi+0x30>
    if(value > 180) value = 180;
     b0c:	65 3b       	cpi	r22, 0xB5	; 181
     b0e:	71 05       	cpc	r23, r1
     b10:	2c f0       	brlt	.+10     	; 0xb1c <_ZN5Servo5writeEi+0x34>
     b12:	64 eb       	ldi	r22, 0xB4	; 180
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <_ZN5Servo5writeEi+0x34>

void Servo::write(int value)
{
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	70 e0       	ldi	r23, 0x00	; 0
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	28 e8       	ldi	r18, 0x88	; 136
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	59 01       	movw	r10, r18
     b24:	a8 1a       	sub	r10, r24
     b26:	b1 08       	sbc	r11, r1
     b28:	87 fd       	sbrc	r24, 7
     b2a:	b3 94       	inc	r11
     b2c:	aa 0c       	add	r10, r10
     b2e:	bb 1c       	adc	r11, r11
     b30:	aa 0c       	add	r10, r10
     b32:	bb 1c       	adc	r11, r11
     b34:	0b 2c       	mov	r0, r11
     b36:	00 0c       	add	r0, r0
     b38:	cc 08       	sbc	r12, r12
     b3a:	dd 08       	sbc	r13, r13
     b3c:	07 2e       	mov	r0, r23
     b3e:	00 0c       	add	r0, r0
     b40:	88 0b       	sbc	r24, r24
     b42:	99 0b       	sbc	r25, r25
     b44:	2a 81       	ldd	r18, Y+2	; 0x02
     b46:	08 e5       	ldi	r16, 0x58	; 88
     b48:	12 e0       	ldi	r17, 0x02	; 2
     b4a:	02 1b       	sub	r16, r18
     b4c:	11 09       	sbc	r17, r1
     b4e:	27 fd       	sbrc	r18, 7
     b50:	13 95       	inc	r17
     b52:	00 0f       	add	r16, r16
     b54:	11 1f       	adc	r17, r17
     b56:	00 0f       	add	r16, r16
     b58:	11 1f       	adc	r17, r17
     b5a:	01 2e       	mov	r0, r17
     b5c:	00 0c       	add	r0, r0
     b5e:	22 0b       	sbc	r18, r18
     b60:	33 0b       	sbc	r19, r19
     b62:	3f 93       	push	r19
     b64:	2f 93       	push	r18
     b66:	1f 93       	push	r17
     b68:	0f 93       	push	r16
     b6a:	14 eb       	ldi	r17, 0xB4	; 180
     b6c:	e1 2e       	mov	r14, r17
     b6e:	f1 2c       	mov	r15, r1
     b70:	00 e0       	ldi	r16, 0x00	; 0
     b72:	10 e0       	ldi	r17, 0x00	; 0
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	a9 01       	movw	r20, r18
     b7a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_Z3maplllll>
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
     b86:	ce 01       	movw	r24, r28
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	bf 90       	pop	r11
     b9a:	af 90       	pop	r10
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
     b9c:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <_ZN5Servo17writeMicrosecondsEi>

00000ba0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     ba0:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi_state>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <twi_sendStop>
     baa:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <twi_inRepStart>
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	82 e1       	ldi	r24, 0x12	; 18
     bb2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <digitalWrite>
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	83 e1       	ldi	r24, 0x13	; 19
     bba:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <digitalWrite>
     bbe:	e9 eb       	ldi	r30, 0xB9	; 185
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	8e 7f       	andi	r24, 0xFE	; 254
     bc6:	80 83       	st	Z, r24
     bc8:	80 81       	ld	r24, Z
     bca:	8d 7f       	andi	r24, 0xFD	; 253
     bcc:	80 83       	st	Z, r24
     bce:	88 e4       	ldi	r24, 0x48	; 72
     bd0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     bd4:	85 e4       	ldi	r24, 0x45	; 69
     bd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     bda:	08 95       	ret

00000bdc <twi_setAddress>:
     bdc:	88 0f       	add	r24, r24
     bde:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
     be2:	08 95       	ret

00000be4 <twi_transmit>:
     be4:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <twi_txBufferLength>
     be8:	26 2f       	mov	r18, r22
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	24 0f       	add	r18, r20
     bee:	31 1d       	adc	r19, r1
     bf0:	21 32       	cpi	r18, 0x21	; 33
     bf2:	31 05       	cpc	r19, r1
     bf4:	dc f4       	brge	.+54     	; 0xc2c <twi_transmit+0x48>
     bf6:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <twi_state>
     bfa:	24 30       	cpi	r18, 0x04	; 4
     bfc:	c9 f4       	brne	.+50     	; 0xc30 <twi_transmit+0x4c>
     bfe:	fc 01       	movw	r30, r24
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	86 17       	cp	r24, r22
     c06:	58 f4       	brcc	.+22     	; 0xc1e <twi_transmit+0x3a>
     c08:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <twi_txBufferLength>
     c0c:	21 91       	ld	r18, Z+
     c0e:	dc 01       	movw	r26, r24
     c10:	a7 5e       	subi	r26, 0xE7	; 231
     c12:	bd 4f       	sbci	r27, 0xFD	; 253
     c14:	a3 0f       	add	r26, r19
     c16:	b1 1d       	adc	r27, r1
     c18:	2c 93       	st	X, r18
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	f3 cf       	rjmp	.-26     	; 0xc04 <twi_transmit+0x20>
     c1e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <twi_txBufferLength>
     c22:	68 0f       	add	r22, r24
     c24:	60 93 17 02 	sts	0x0217, r22	; 0x800217 <twi_txBufferLength>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	08 95       	ret
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	08 95       	ret
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	08 95       	ret

00000c34 <twi_attachSlaveRxEvent>:
     c34:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <twi_onSlaveReceive+0x1>
     c38:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <twi_onSlaveReceive>
     c3c:	08 95       	ret

00000c3e <twi_attachSlaveTxEvent>:
     c3e:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <twi_onSlaveTransmit+0x1>
     c42:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <twi_onSlaveTransmit>
     c46:	08 95       	ret

00000c48 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     c48:	85 ed       	ldi	r24, 0xD5	; 213
     c4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     c4e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     c52:	84 fd       	sbrc	r24, 4
     c54:	fc cf       	rjmp	.-8      	; 0xc4e <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     c56:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi_state>
     c5a:	08 95       	ret

00000c5c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     c5c:	85 ec       	ldi	r24, 0xC5	; 197
     c5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     c62:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi_state>
     c66:	08 95       	ret

00000c68 <__vector_24>:
}

ISR(TWI_vect)
{
     c68:	1f 92       	push	r1
     c6a:	0f 92       	push	r0
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	0f 92       	push	r0
     c70:	11 24       	eor	r1, r1
     c72:	2f 93       	push	r18
     c74:	3f 93       	push	r19
     c76:	4f 93       	push	r20
     c78:	5f 93       	push	r21
     c7a:	6f 93       	push	r22
     c7c:	7f 93       	push	r23
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	af 93       	push	r26
     c84:	bf 93       	push	r27
     c86:	ef 93       	push	r30
     c88:	ff 93       	push	r31
  switch(TW_STATUS){
     c8a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     c8e:	88 7f       	andi	r24, 0xF8	; 248
     c90:	80 36       	cpi	r24, 0x60	; 96
     c92:	09 f4       	brne	.+2      	; 0xc96 <__vector_24+0x2e>
     c94:	9e c0       	rjmp	.+316    	; 0xdd2 <__vector_24+0x16a>
     c96:	78 f5       	brcc	.+94     	; 0xcf6 <__vector_24+0x8e>
     c98:	88 32       	cpi	r24, 0x28	; 40
     c9a:	09 f4       	brne	.+2      	; 0xc9e <__vector_24+0x36>
     c9c:	5d c0       	rjmp	.+186    	; 0xd58 <__vector_24+0xf0>
     c9e:	90 f4       	brcc	.+36     	; 0xcc4 <__vector_24+0x5c>
     ca0:	80 31       	cpi	r24, 0x10	; 16
     ca2:	09 f4       	brne	.+2      	; 0xca6 <__vector_24+0x3e>
     ca4:	56 c0       	rjmp	.+172    	; 0xd52 <__vector_24+0xea>
     ca6:	38 f4       	brcc	.+14     	; 0xcb6 <__vector_24+0x4e>
     ca8:	88 23       	and	r24, r24
     caa:	09 f4       	brne	.+2      	; 0xcae <__vector_24+0x46>
     cac:	f5 c0       	rjmp	.+490    	; 0xe98 <__vector_24+0x230>
     cae:	88 30       	cpi	r24, 0x08	; 8
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <__vector_24+0x4c>
     cb2:	4f c0       	rjmp	.+158    	; 0xd52 <__vector_24+0xea>
     cb4:	f5 c0       	rjmp	.+490    	; 0xea0 <__vector_24+0x238>
     cb6:	88 31       	cpi	r24, 0x18	; 24
     cb8:	09 f4       	brne	.+2      	; 0xcbc <__vector_24+0x54>
     cba:	4e c0       	rjmp	.+156    	; 0xd58 <__vector_24+0xf0>
     cbc:	80 32       	cpi	r24, 0x20	; 32
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <__vector_24+0x5a>
     cc0:	5f c0       	rjmp	.+190    	; 0xd80 <__vector_24+0x118>
     cc2:	ee c0       	rjmp	.+476    	; 0xea0 <__vector_24+0x238>
     cc4:	80 34       	cpi	r24, 0x40	; 64
     cc6:	09 f4       	brne	.+2      	; 0xcca <__vector_24+0x62>
     cc8:	6a c0       	rjmp	.+212    	; 0xd9e <__vector_24+0x136>
     cca:	58 f4       	brcc	.+22     	; 0xce2 <__vector_24+0x7a>
     ccc:	80 33       	cpi	r24, 0x30	; 48
     cce:	09 f4       	brne	.+2      	; 0xcd2 <__vector_24+0x6a>
     cd0:	57 c0       	rjmp	.+174    	; 0xd80 <__vector_24+0x118>
     cd2:	88 33       	cpi	r24, 0x38	; 56
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <__vector_24+0x70>
     cd6:	e4 c0       	rjmp	.+456    	; 0xea0 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     cd8:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <twi_error>
      twi_releaseBus();
     cdc:	0e 94 2e 06 	call	0xc5c	; 0xc5c <twi_releaseBus>
      break;
     ce0:	df c0       	rjmp	.+446    	; 0xea0 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     ce2:	80 35       	cpi	r24, 0x50	; 80
     ce4:	09 f4       	brne	.+2      	; 0xce8 <__vector_24+0x80>
     ce6:	4f c0       	rjmp	.+158    	; 0xd86 <__vector_24+0x11e>
     ce8:	88 35       	cpi	r24, 0x58	; 88
     cea:	09 f4       	brne	.+2      	; 0xcee <__vector_24+0x86>
     cec:	5d c0       	rjmp	.+186    	; 0xda8 <__vector_24+0x140>
     cee:	88 34       	cpi	r24, 0x48	; 72
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <__vector_24+0x8c>
     cf2:	d6 c0       	rjmp	.+428    	; 0xea0 <__vector_24+0x238>
     cf4:	d3 c0       	rjmp	.+422    	; 0xe9c <__vector_24+0x234>
     cf6:	88 39       	cpi	r24, 0x98	; 152
     cf8:	09 f4       	brne	.+2      	; 0xcfc <__vector_24+0x94>
     cfa:	c4 c0       	rjmp	.+392    	; 0xe84 <__vector_24+0x21c>
     cfc:	a8 f4       	brcc	.+42     	; 0xd28 <__vector_24+0xc0>
     cfe:	88 37       	cpi	r24, 0x78	; 120
     d00:	09 f4       	brne	.+2      	; 0xd04 <__vector_24+0x9c>
     d02:	67 c0       	rjmp	.+206    	; 0xdd2 <__vector_24+0x16a>
     d04:	38 f4       	brcc	.+14     	; 0xd14 <__vector_24+0xac>
     d06:	88 36       	cpi	r24, 0x68	; 104
     d08:	09 f4       	brne	.+2      	; 0xd0c <__vector_24+0xa4>
     d0a:	63 c0       	rjmp	.+198    	; 0xdd2 <__vector_24+0x16a>
     d0c:	80 37       	cpi	r24, 0x70	; 112
     d0e:	09 f4       	brne	.+2      	; 0xd12 <__vector_24+0xaa>
     d10:	60 c0       	rjmp	.+192    	; 0xdd2 <__vector_24+0x16a>
     d12:	c6 c0       	rjmp	.+396    	; 0xea0 <__vector_24+0x238>
     d14:	88 38       	cpi	r24, 0x88	; 136
     d16:	09 f4       	brne	.+2      	; 0xd1a <__vector_24+0xb2>
     d18:	b5 c0       	rjmp	.+362    	; 0xe84 <__vector_24+0x21c>
     d1a:	80 39       	cpi	r24, 0x90	; 144
     d1c:	09 f4       	brne	.+2      	; 0xd20 <__vector_24+0xb8>
     d1e:	5f c0       	rjmp	.+190    	; 0xdde <__vector_24+0x176>
     d20:	80 38       	cpi	r24, 0x80	; 128
     d22:	09 f0       	breq	.+2      	; 0xd26 <__vector_24+0xbe>
     d24:	bd c0       	rjmp	.+378    	; 0xea0 <__vector_24+0x238>
     d26:	5b c0       	rjmp	.+182    	; 0xdde <__vector_24+0x176>
     d28:	80 3b       	cpi	r24, 0xB0	; 176
     d2a:	09 f4       	brne	.+2      	; 0xd2e <__vector_24+0xc6>
     d2c:	83 c0       	rjmp	.+262    	; 0xe34 <__vector_24+0x1cc>
     d2e:	38 f4       	brcc	.+14     	; 0xd3e <__vector_24+0xd6>
     d30:	80 3a       	cpi	r24, 0xA0	; 160
     d32:	09 f4       	brne	.+2      	; 0xd36 <__vector_24+0xce>
     d34:	66 c0       	rjmp	.+204    	; 0xe02 <__vector_24+0x19a>
     d36:	88 3a       	cpi	r24, 0xA8	; 168
     d38:	09 f4       	brne	.+2      	; 0xd3c <__vector_24+0xd4>
     d3a:	7c c0       	rjmp	.+248    	; 0xe34 <__vector_24+0x1cc>
     d3c:	b1 c0       	rjmp	.+354    	; 0xea0 <__vector_24+0x238>
     d3e:	80 3c       	cpi	r24, 0xC0	; 192
     d40:	09 f4       	brne	.+2      	; 0xd44 <__vector_24+0xdc>
     d42:	a4 c0       	rjmp	.+328    	; 0xe8c <__vector_24+0x224>
     d44:	88 3c       	cpi	r24, 0xC8	; 200
     d46:	09 f4       	brne	.+2      	; 0xd4a <__vector_24+0xe2>
     d48:	a1 c0       	rjmp	.+322    	; 0xe8c <__vector_24+0x224>
     d4a:	88 3b       	cpi	r24, 0xB8	; 184
     d4c:	09 f4       	brne	.+2      	; 0xd50 <__vector_24+0xe8>
     d4e:	87 c0       	rjmp	.+270    	; 0xe5e <__vector_24+0x1f6>
     d50:	a7 c0       	rjmp	.+334    	; 0xea0 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     d52:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_slarw>
     d56:	10 c0       	rjmp	.+32     	; 0xd78 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     d58:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <twi_masterBufferIndex>
     d5c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <twi_masterBufferLength>
     d60:	98 17       	cp	r25, r24
     d62:	70 f5       	brcc	.+92     	; 0xdc0 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     d64:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <twi_masterBufferIndex>
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	8e 0f       	add	r24, r30
     d6c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <twi_masterBufferIndex>
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	e5 5c       	subi	r30, 0xC5	; 197
     d74:	fd 4f       	sbci	r31, 0xFD	; 253
     d76:	80 81       	ld	r24, Z
     d78:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     d7c:	85 ec       	ldi	r24, 0xC5	; 197
     d7e:	83 c0       	rjmp	.+262    	; 0xe86 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     d80:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <twi_error>
     d84:	8b c0       	rjmp	.+278    	; 0xe9c <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     d86:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <twi_masterBufferIndex>
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	8e 0f       	add	r24, r30
     d8e:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <twi_masterBufferIndex>
     d92:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	e5 5c       	subi	r30, 0xC5	; 197
     d9a:	fd 4f       	sbci	r31, 0xFD	; 253
     d9c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     d9e:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <twi_masterBufferIndex>
     da2:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <twi_masterBufferLength>
     da6:	6b c0       	rjmp	.+214    	; 0xe7e <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     da8:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <twi_masterBufferIndex>
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	8e 0f       	add	r24, r30
     db0:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <twi_masterBufferIndex>
     db4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	e5 5c       	subi	r30, 0xC5	; 197
     dbc:	fd 4f       	sbci	r31, 0xFD	; 253
     dbe:	80 83       	st	Z, r24
	if (twi_sendStop)
     dc0:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi_sendStop>
     dc4:	81 11       	cpse	r24, r1
     dc6:	6a c0       	rjmp	.+212    	; 0xe9c <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     dce:	84 ea       	ldi	r24, 0xA4	; 164
     dd0:	5e c0       	rjmp	.+188    	; 0xe8e <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     dd2:	83 e0       	ldi	r24, 0x03	; 3
     dd4:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     dd8:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <twi_rxBufferIndex>
     ddc:	cf cf       	rjmp	.-98     	; 0xd7c <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     dde:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <twi_rxBufferIndex>
     de2:	80 32       	cpi	r24, 0x20	; 32
     de4:	08 f0       	brcs	.+2      	; 0xde8 <__vector_24+0x180>
     de6:	4e c0       	rjmp	.+156    	; 0xe84 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     de8:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <twi_rxBufferIndex>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	8e 0f       	add	r24, r30
     df0:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <twi_rxBufferIndex>
     df4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	e9 50       	subi	r30, 0x09	; 9
     dfc:	fe 4f       	sbci	r31, 0xFE	; 254
     dfe:	80 83       	st	Z, r24
     e00:	bd cf       	rjmp	.-134    	; 0xd7c <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     e02:	0e 94 2e 06 	call	0xc5c	; 0xc5c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     e06:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <twi_rxBufferIndex>
     e0a:	80 32       	cpi	r24, 0x20	; 32
     e0c:	30 f4       	brcc	.+12     	; 0xe1a <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     e0e:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <twi_rxBufferIndex>
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	e9 50       	subi	r30, 0x09	; 9
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     e1a:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <twi_rxBufferIndex>
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <twi_onSlaveReceive>
     e24:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <twi_onSlaveReceive+0x1>
     e28:	87 ef       	ldi	r24, 0xF7	; 247
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     e2e:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <twi_rxBufferIndex>
      break;
     e32:	36 c0       	rjmp	.+108    	; 0xea0 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     e3a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     e3e:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     e42:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <twi_onSlaveTransmit>
     e46:	f0 91 5e 02 	lds	r31, 0x025E	; 0x80025e <twi_onSlaveTransmit+0x1>
     e4a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     e4c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <twi_txBufferLength>
     e50:	81 11       	cpse	r24, r1
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <__vector_24+0x1f6>
        twi_txBufferLength = 1;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     e5a:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     e5e:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <twi_txBufferIndex>
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	8e 0f       	add	r24, r30
     e66:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <twi_txBufferIndex>
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	e7 5e       	subi	r30, 0xE7	; 231
     e6e:	fd 4f       	sbci	r31, 0xFD	; 253
     e70:	80 81       	ld	r24, Z
     e72:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     e76:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <twi_txBufferIndex>
     e7a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <twi_txBufferLength>
     e7e:	98 17       	cp	r25, r24
     e80:	08 f4       	brcc	.+2      	; 0xe84 <__vector_24+0x21c>
     e82:	7c cf       	rjmp	.-264    	; 0xd7c <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     e84:	85 e8       	ldi	r24, 0x85	; 133
     e86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e8a:	0a c0       	rjmp	.+20     	; 0xea0 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     e8c:	85 ec       	ldi	r24, 0xC5	; 197
     e8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     e92:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi_state>
      break;
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     e98:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <twi_error>
      twi_stop();
     e9c:	0e 94 24 06 	call	0xc48	; 0xc48 <twi_stop>
      break;
  }
}
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0
     ebe:	1f 90       	pop	r1
     ec0:	18 95       	reti

00000ec2 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     ec2:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_ZN7TwoWire14rxBufferLengthE>
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	20 91 97 02 	lds	r18, 0x0297	; 0x800297 <_ZN7TwoWire13rxBufferIndexE>
     ecc:	82 1b       	sub	r24, r18
     ece:	91 09       	sbc	r25, r1
     ed0:	08 95       	ret

00000ed2 <_ZN7TwoWire4readEv>:
     ed2:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <_ZN7TwoWire13rxBufferIndexE>
     ed6:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_ZN7TwoWire14rxBufferLengthE>
     eda:	98 17       	cp	r25, r24
     edc:	50 f4       	brcc	.+20     	; 0xef2 <_ZN7TwoWire4readEv+0x20>
     ede:	e9 2f       	mov	r30, r25
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	e8 56       	subi	r30, 0x68	; 104
     ee4:	fd 4f       	sbci	r31, 0xFD	; 253
     ee6:	20 81       	ld	r18, Z
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	9f 5f       	subi	r25, 0xFF	; 255
     eec:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <_ZN7TwoWire13rxBufferIndexE>
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <_ZN7TwoWire4readEv+0x24>
     ef2:	2f ef       	ldi	r18, 0xFF	; 255
     ef4:	3f ef       	ldi	r19, 0xFF	; 255
     ef6:	c9 01       	movw	r24, r18
     ef8:	08 95       	ret

00000efa <_ZN7TwoWire4peekEv>:
     efa:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <_ZN7TwoWire13rxBufferIndexE>
     efe:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_ZN7TwoWire14rxBufferLengthE>
     f02:	e8 17       	cp	r30, r24
     f04:	30 f4       	brcc	.+12     	; 0xf12 <_ZN7TwoWire4peekEv+0x18>
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	e8 56       	subi	r30, 0x68	; 104
     f0a:	fd 4f       	sbci	r31, 0xFD	; 253
     f0c:	80 81       	ld	r24, Z
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	08 95       	ret
     f12:	8f ef       	ldi	r24, 0xFF	; 255
     f14:	9f ef       	ldi	r25, 0xFF	; 255
     f16:	08 95       	ret

00000f18 <_ZN7TwoWire5flushEv>:
     f18:	08 95       	ret

00000f1a <_ZN7TwoWire16onReceiveServiceEPhi>:
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	ec 01       	movw	r28, r24
     f20:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <_ZN7TwoWire14user_onReceiveE>
     f24:	f0 91 70 02 	lds	r31, 0x0270	; 0x800270 <_ZN7TwoWire14user_onReceiveE+0x1>
     f28:	30 97       	sbiw	r30, 0x00	; 0
     f2a:	f1 f0       	breq	.+60     	; 0xf68 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
     f2c:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <_ZN7TwoWire13rxBufferIndexE>
     f30:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_ZN7TwoWire14rxBufferLengthE>
     f34:	98 17       	cp	r25, r24
     f36:	c0 f0       	brcs	.+48     	; 0xf68 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	29 2f       	mov	r18, r25
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	26 17       	cp	r18, r22
     f40:	37 07       	cpc	r19, r23
     f42:	54 f4       	brge	.+20     	; 0xf58 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
     f44:	de 01       	movw	r26, r28
     f46:	a2 0f       	add	r26, r18
     f48:	b3 1f       	adc	r27, r19
     f4a:	4c 91       	ld	r20, X
     f4c:	d9 01       	movw	r26, r18
     f4e:	a8 56       	subi	r26, 0x68	; 104
     f50:	bd 4f       	sbci	r27, 0xFD	; 253
     f52:	4c 93       	st	X, r20
     f54:	9f 5f       	subi	r25, 0xFF	; 255
     f56:	f1 cf       	rjmp	.-30     	; 0xf3a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
     f58:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <_ZN7TwoWire13rxBufferIndexE>
     f5c:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <_ZN7TwoWire14rxBufferLengthE>
     f60:	cb 01       	movw	r24, r22
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	09 94       	ijmp
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <_ZN7TwoWire16onRequestServiceEv>:
     f6e:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <_ZN7TwoWire14user_onRequestE>
     f72:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <_ZN7TwoWire14user_onRequestE+0x1>
     f76:	30 97       	sbiw	r30, 0x00	; 0
     f78:	29 f0       	breq	.+10     	; 0xf84 <_ZN7TwoWire16onRequestServiceEv+0x16>
     f7a:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <_ZN7TwoWire13txBufferIndexE>
     f7e:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <_ZN7TwoWire14txBufferLengthE>
     f82:	09 94       	ijmp
     f84:	08 95       	ret

00000f86 <_ZN7TwoWire5writeEPKhj>:
     f86:	cf 92       	push	r12
     f88:	df 92       	push	r13
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	7c 01       	movw	r14, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	8a 01       	movw	r16, r20
     f9c:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <_ZN7TwoWire12transmittingE>
     fa0:	22 23       	and	r18, r18
     fa2:	89 f0       	breq	.+34     	; 0xfc6 <_ZN7TwoWire5writeEPKhj+0x40>
     fa4:	eb 01       	movw	r28, r22
     fa6:	6b 01       	movw	r12, r22
     fa8:	c4 0e       	add	r12, r20
     faa:	d5 1e       	adc	r13, r21
     fac:	cc 15       	cp	r28, r12
     fae:	dd 05       	cpc	r29, r13
     fb0:	69 f0       	breq	.+26     	; 0xfcc <_ZN7TwoWire5writeEPKhj+0x46>
     fb2:	69 91       	ld	r22, Y+
     fb4:	d7 01       	movw	r26, r14
     fb6:	ed 91       	ld	r30, X+
     fb8:	fc 91       	ld	r31, X
     fba:	01 90       	ld	r0, Z+
     fbc:	f0 81       	ld	r31, Z
     fbe:	e0 2d       	mov	r30, r0
     fc0:	c7 01       	movw	r24, r14
     fc2:	09 95       	icall
     fc4:	f3 cf       	rjmp	.-26     	; 0xfac <_ZN7TwoWire5writeEPKhj+0x26>
     fc6:	64 2f       	mov	r22, r20
     fc8:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <twi_transmit>
     fcc:	c8 01       	movw	r24, r16
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	08 95       	ret

00000fe0 <_ZN7TwoWire5writeEh>:
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	1f 92       	push	r1
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	69 83       	std	Y+1, r22	; 0x01
     fec:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <_ZN7TwoWire12transmittingE>
     ff0:	22 23       	and	r18, r18
     ff2:	d1 f0       	breq	.+52     	; 0x1028 <_ZN7TwoWire5writeEh+0x48>
     ff4:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <_ZN7TwoWire14txBufferLengthE>
     ff8:	20 32       	cpi	r18, 0x20	; 32
     ffa:	40 f0       	brcs	.+16     	; 0x100c <_ZN7TwoWire5writeEh+0x2c>
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	fc 01       	movw	r30, r24
    1002:	33 83       	std	Z+3, r19	; 0x03
    1004:	22 83       	std	Z+2, r18	; 0x02
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	15 c0       	rjmp	.+42     	; 0x1036 <_ZN7TwoWire5writeEh+0x56>
    100c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZN7TwoWire13txBufferIndexE>
    1010:	e8 2f       	mov	r30, r24
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	ea 58       	subi	r30, 0x8A	; 138
    1016:	fd 4f       	sbci	r31, 0xFD	; 253
    1018:	99 81       	ldd	r25, Y+1	; 0x01
    101a:	90 83       	st	Z, r25
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <_ZN7TwoWire13txBufferIndexE>
    1022:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <_ZN7TwoWire14txBufferLengthE>
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <_ZN7TwoWire5writeEh+0x52>
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <twi_transmit>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0f 90       	pop	r0
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <_ZN7TwoWireC1Ev>:
    103e:	fc 01       	movw	r30, r24
    1040:	13 82       	std	Z+3, r1	; 0x03
    1042:	12 82       	std	Z+2, r1	; 0x02
    1044:	88 ee       	ldi	r24, 0xE8	; 232
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	84 83       	std	Z+4, r24	; 0x04
    104e:	95 83       	std	Z+5, r25	; 0x05
    1050:	a6 83       	std	Z+6, r26	; 0x06
    1052:	b7 83       	std	Z+7, r27	; 0x07
    1054:	82 e4       	ldi	r24, 0x42	; 66
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	80 83       	st	Z, r24
    105c:	08 95       	ret

0000105e <_ZN7TwoWire5beginEv>:
    105e:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <_ZN7TwoWire13rxBufferIndexE>
    1062:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <_ZN7TwoWire14rxBufferLengthE>
    1066:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <_ZN7TwoWire13txBufferIndexE>
    106a:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <_ZN7TwoWire14txBufferLengthE>
    106e:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <twi_init>

00001072 <_ZN7TwoWire5beginEh>:
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	ec 01       	movw	r28, r24
    1078:	86 2f       	mov	r24, r22
    107a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <twi_setAddress>
    107e:	87 eb       	ldi	r24, 0xB7	; 183
    1080:	97 e0       	ldi	r25, 0x07	; 7
    1082:	0e 94 1f 06 	call	0xc3e	; 0xc3e <twi_attachSlaveTxEvent>
    1086:	8d e8       	ldi	r24, 0x8D	; 141
    1088:	97 e0       	ldi	r25, 0x07	; 7
    108a:	0e 94 1a 06 	call	0xc34	; 0xc34 <twi_attachSlaveRxEvent>
    108e:	ce 01       	movw	r24, r28
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	0c 94 2f 08 	jmp	0x105e	; 0x105e <_ZN7TwoWire5beginEv>

00001098 <_ZN7TwoWire5beginEi>:
    1098:	0c 94 39 08 	jmp	0x1072	; 0x1072 <_ZN7TwoWire5beginEh>

0000109c <_ZN7TwoWire9onReceiveEPFviE>:
    109c:	70 93 70 02 	sts	0x0270, r23	; 0x800270 <_ZN7TwoWire14user_onReceiveE+0x1>
    10a0:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <_ZN7TwoWire14user_onReceiveE>
    10a4:	08 95       	ret

000010a6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    10a6:	83 e6       	ldi	r24, 0x63	; 99
    10a8:	92 e0       	ldi	r25, 0x02	; 2
    10aa:	0c 94 1f 08 	jmp	0x103e	; 0x103e <_ZN7TwoWireC1Ev>

000010ae <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    10ae:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    10b0:	91 8d       	ldd	r25, Z+25	; 0x19
    10b2:	22 8d       	ldd	r18, Z+26	; 0x1a
    10b4:	89 2f       	mov	r24, r25
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	80 5c       	subi	r24, 0xC0	; 192
    10ba:	9f 4f       	sbci	r25, 0xFF	; 255
    10bc:	82 1b       	sub	r24, r18
    10be:	91 09       	sbc	r25, r1
}
    10c0:	8f 73       	andi	r24, 0x3F	; 63
    10c2:	99 27       	eor	r25, r25
    10c4:	08 95       	ret

000010c6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    10c6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    10c8:	91 8d       	ldd	r25, Z+25	; 0x19
    10ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    10cc:	98 17       	cp	r25, r24
    10ce:	31 f0       	breq	.+12     	; 0x10dc <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    10d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    10d2:	e8 0f       	add	r30, r24
    10d4:	f1 1d       	adc	r31, r1
    10d6:	85 8d       	ldd	r24, Z+29	; 0x1d
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    10dc:	8f ef       	ldi	r24, 0xFF	; 255
    10de:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    10e0:	08 95       	ret

000010e2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    10e2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    10e4:	91 8d       	ldd	r25, Z+25	; 0x19
    10e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    10e8:	98 17       	cp	r25, r24
    10ea:	61 f0       	breq	.+24     	; 0x1104 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    10ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    10ee:	df 01       	movw	r26, r30
    10f0:	a8 0f       	add	r26, r24
    10f2:	b1 1d       	adc	r27, r1
    10f4:	5d 96       	adiw	r26, 0x1d	; 29
    10f6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    10f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    10fa:	9f 5f       	subi	r25, 0xFF	; 255
    10fc:	9f 73       	andi	r25, 0x3F	; 63
    10fe:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1108:	08 95       	ret

0000110a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    110a:	8a ed       	ldi	r24, 0xDA	; 218
    110c:	99 e0       	ldi	r25, 0x09	; 9
    110e:	89 2b       	or	r24, r25
    1110:	49 f0       	breq	.+18     	; 0x1124 <_Z14serialEventRunv+0x1a>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	89 2b       	or	r24, r25
    1118:	29 f0       	breq	.+10     	; 0x1124 <_Z14serialEventRunv+0x1a>
    111a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_Z17Serial0_availablev>
    111e:	81 11       	cpse	r24, r1
    1120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1124:	08 95       	ret

00001126 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1126:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1128:	84 8d       	ldd	r24, Z+28	; 0x1c
    112a:	df 01       	movw	r26, r30
    112c:	a8 0f       	add	r26, r24
    112e:	b1 1d       	adc	r27, r1
    1130:	a3 5a       	subi	r26, 0xA3	; 163
    1132:	bf 4f       	sbci	r27, 0xFF	; 255
    1134:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1136:	84 8d       	ldd	r24, Z+28	; 0x1c
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	8f 73       	andi	r24, 0x3F	; 63
    113e:	99 27       	eor	r25, r25
    1140:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1142:	a6 89       	ldd	r26, Z+22	; 0x16
    1144:	b7 89       	ldd	r27, Z+23	; 0x17
    1146:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1148:	a0 89       	ldd	r26, Z+16	; 0x10
    114a:	b1 89       	ldd	r27, Z+17	; 0x11
    114c:	8c 91       	ld	r24, X
    114e:	80 64       	ori	r24, 0x40	; 64
    1150:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1152:	93 8d       	ldd	r25, Z+27	; 0x1b
    1154:	84 8d       	ldd	r24, Z+28	; 0x1c
    1156:	98 13       	cpse	r25, r24
    1158:	06 c0       	rjmp	.+12     	; 0x1166 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    115a:	02 88       	ldd	r0, Z+18	; 0x12
    115c:	f3 89       	ldd	r31, Z+19	; 0x13
    115e:	e0 2d       	mov	r30, r0
    1160:	80 81       	ld	r24, Z
    1162:	8f 7d       	andi	r24, 0xDF	; 223
    1164:	80 83       	st	Z, r24
    1166:	08 95       	ret

00001168 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ec 01       	movw	r28, r24
  _written = true;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    117a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    117c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    117e:	98 13       	cpse	r25, r24
    1180:	05 c0       	rjmp	.+10     	; 0x118c <_ZN14HardwareSerial5writeEh+0x24>
    1182:	e8 89       	ldd	r30, Y+16	; 0x10
    1184:	f9 89       	ldd	r31, Y+17	; 0x11
    1186:	80 81       	ld	r24, Z
    1188:	85 fd       	sbrc	r24, 5
    118a:	24 c0       	rjmp	.+72     	; 0x11d4 <_ZN14HardwareSerial5writeEh+0x6c>
    118c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    118e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1190:	10 e0       	ldi	r17, 0x00	; 0
    1192:	0f 5f       	subi	r16, 0xFF	; 255
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
    1196:	0f 73       	andi	r16, 0x3F	; 63
    1198:	11 27       	eor	r17, r17
    119a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    119c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    119e:	e8 12       	cpse	r14, r24
    11a0:	0c c0       	rjmp	.+24     	; 0x11ba <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	07 fc       	sbrc	r0, 7
    11a6:	fa cf       	rjmp	.-12     	; 0x119c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    11a8:	e8 89       	ldd	r30, Y+16	; 0x10
    11aa:	f9 89       	ldd	r31, Y+17	; 0x11
    11ac:	80 81       	ld	r24, Z
    11ae:	85 ff       	sbrs	r24, 5
    11b0:	f5 cf       	rjmp	.-22     	; 0x119c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    11b2:	ce 01       	movw	r24, r28
    11b4:	0e 94 93 08 	call	0x1126	; 0x1126 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    11b8:	f1 cf       	rjmp	.-30     	; 0x119c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    11ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11bc:	fe 01       	movw	r30, r28
    11be:	e8 0f       	add	r30, r24
    11c0:	f1 1d       	adc	r31, r1
    11c2:	e3 5a       	subi	r30, 0xA3	; 163
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    11c8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    11ca:	ea 89       	ldd	r30, Y+18	; 0x12
    11cc:	fb 89       	ldd	r31, Y+19	; 0x13
    11ce:	80 81       	ld	r24, Z
    11d0:	80 62       	ori	r24, 0x20	; 32
    11d2:	07 c0       	rjmp	.+14     	; 0x11e2 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    11d4:	ee 89       	ldd	r30, Y+22	; 0x16
    11d6:	ff 89       	ldd	r31, Y+23	; 0x17
    11d8:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    11da:	e8 89       	ldd	r30, Y+16	; 0x10
    11dc:	f9 89       	ldd	r31, Y+17	; 0x11
    11de:	80 81       	ld	r24, Z
    11e0:	80 64       	ori	r24, 0x40	; 64
    11e2:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	08 95       	ret

000011f6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    11fc:	88 8d       	ldd	r24, Y+24	; 0x18
    11fe:	88 23       	and	r24, r24
    1200:	c9 f0       	breq	.+50     	; 0x1234 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1202:	ea 89       	ldd	r30, Y+18	; 0x12
    1204:	fb 89       	ldd	r31, Y+19	; 0x13
    1206:	80 81       	ld	r24, Z
    1208:	85 fd       	sbrc	r24, 5
    120a:	05 c0       	rjmp	.+10     	; 0x1216 <_ZN14HardwareSerial5flushEv+0x20>
    120c:	a8 89       	ldd	r26, Y+16	; 0x10
    120e:	b9 89       	ldd	r27, Y+17	; 0x11
    1210:	8c 91       	ld	r24, X
    1212:	86 fd       	sbrc	r24, 6
    1214:	0f c0       	rjmp	.+30     	; 0x1234 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	07 fc       	sbrc	r0, 7
    121a:	f5 cf       	rjmp	.-22     	; 0x1206 <_ZN14HardwareSerial5flushEv+0x10>
    121c:	80 81       	ld	r24, Z
    121e:	85 ff       	sbrs	r24, 5
    1220:	f2 cf       	rjmp	.-28     	; 0x1206 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1222:	a8 89       	ldd	r26, Y+16	; 0x10
    1224:	b9 89       	ldd	r27, Y+17	; 0x11
    1226:	8c 91       	ld	r24, X
    1228:	85 ff       	sbrs	r24, 5
    122a:	ed cf       	rjmp	.-38     	; 0x1206 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    122c:	ce 01       	movw	r24, r28
    122e:	0e 94 93 08 	call	0x1126	; 0x1126 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1232:	e7 cf       	rjmp	.-50     	; 0x1202 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    123a:	cf 92       	push	r12
    123c:	df 92       	push	r13
    123e:	ef 92       	push	r14
    1240:	ff 92       	push	r15
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	ec 01       	movw	r28, r24
    124a:	6a 01       	movw	r12, r20
    124c:	7b 01       	movw	r14, r22
    124e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1250:	e8 89       	ldd	r30, Y+16	; 0x10
    1252:	f9 89       	ldd	r31, Y+17	; 0x11
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1258:	41 15       	cp	r20, r1
    125a:	51 4e       	sbci	r21, 0xE1	; 225
    125c:	61 05       	cpc	r22, r1
    125e:	71 05       	cpc	r23, r1
    1260:	b1 f0       	breq	.+44     	; 0x128e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	79 e0       	ldi	r23, 0x09	; 9
    1266:	8d e3       	ldi	r24, 0x3D	; 61
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a7 01       	movw	r20, r14
    126c:	96 01       	movw	r18, r12
    126e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__udivmodsi4>
    1272:	da 01       	movw	r26, r20
    1274:	c9 01       	movw	r24, r18
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	a1 09       	sbc	r26, r1
    127a:	b1 09       	sbc	r27, r1
    127c:	b6 95       	lsr	r27
    127e:	a7 95       	ror	r26
    1280:	97 95       	ror	r25
    1282:	87 95       	ror	r24
    1284:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1286:	21 15       	cp	r18, r1
    1288:	80 e1       	ldi	r24, 0x10	; 16
    128a:	38 07       	cpc	r19, r24
    128c:	a8 f0       	brcs	.+42     	; 0x12b8 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    128e:	e8 89       	ldd	r30, Y+16	; 0x10
    1290:	f9 89       	ldd	r31, Y+17	; 0x11
    1292:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1294:	60 e8       	ldi	r22, 0x80	; 128
    1296:	74 e8       	ldi	r23, 0x84	; 132
    1298:	8e e1       	ldi	r24, 0x1E	; 30
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a7 01       	movw	r20, r14
    129e:	96 01       	movw	r18, r12
    12a0:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__udivmodsi4>
    12a4:	da 01       	movw	r26, r20
    12a6:	c9 01       	movw	r24, r18
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	a1 09       	sbc	r26, r1
    12ac:	b1 09       	sbc	r27, r1
    12ae:	b6 95       	lsr	r27
    12b0:	a7 95       	ror	r26
    12b2:	97 95       	ror	r25
    12b4:	87 95       	ror	r24
    12b6:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    12b8:	ec 85       	ldd	r30, Y+12	; 0x0c
    12ba:	fd 85       	ldd	r31, Y+13	; 0x0d
    12bc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    12be:	ee 85       	ldd	r30, Y+14	; 0x0e
    12c0:	ff 85       	ldd	r31, Y+15	; 0x0f
    12c2:	20 83       	st	Z, r18

  _written = false;
    12c4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    12c6:	ec 89       	ldd	r30, Y+20	; 0x14
    12c8:	fd 89       	ldd	r31, Y+21	; 0x15
    12ca:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    12cc:	ea 89       	ldd	r30, Y+18	; 0x12
    12ce:	fb 89       	ldd	r31, Y+19	; 0x13
    12d0:	80 81       	ld	r24, Z
    12d2:	80 61       	ori	r24, 0x10	; 16
    12d4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    12d6:	ea 89       	ldd	r30, Y+18	; 0x12
    12d8:	fb 89       	ldd	r31, Y+19	; 0x13
    12da:	80 81       	ld	r24, Z
    12dc:	88 60       	ori	r24, 0x08	; 8
    12de:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    12e0:	ea 89       	ldd	r30, Y+18	; 0x12
    12e2:	fb 89       	ldd	r31, Y+19	; 0x13
    12e4:	80 81       	ld	r24, Z
    12e6:	80 68       	ori	r24, 0x80	; 128
    12e8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    12ea:	ea 89       	ldd	r30, Y+18	; 0x12
    12ec:	fb 89       	ldd	r31, Y+19	; 0x13
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 7d       	andi	r24, 0xDF	; 223
    12f2:	80 83       	st	Z, r24
}
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	ff 90       	pop	r15
    12fc:	ef 90       	pop	r14
    12fe:	df 90       	pop	r13
    1300:	cf 90       	pop	r12
    1302:	08 95       	ret

00001304 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1304:	1f 92       	push	r1
    1306:	0f 92       	push	r0
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	0f 92       	push	r0
    130c:	11 24       	eor	r1, r1
    130e:	2f 93       	push	r18
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	ef 93       	push	r30
    1316:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1318:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <Serial+0x10>
    131c:	f0 91 c9 02 	lds	r31, 0x02C9	; 0x8002c9 <Serial+0x11>
    1320:	80 81       	ld	r24, Z
    1322:	e0 91 ce 02 	lds	r30, 0x02CE	; 0x8002ce <Serial+0x16>
    1326:	f0 91 cf 02 	lds	r31, 0x02CF	; 0x8002cf <Serial+0x17>
    132a:	82 fd       	sbrc	r24, 2
    132c:	12 c0       	rjmp	.+36     	; 0x1352 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    132e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1330:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <Serial+0x19>
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1338:	20 91 d2 02 	lds	r18, 0x02D2	; 0x8002d2 <Serial+0x1a>
    133c:	82 17       	cp	r24, r18
    133e:	51 f0       	breq	.+20     	; 0x1354 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1340:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <Serial+0x19>
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	e8 54       	subi	r30, 0x48	; 72
    1348:	fd 4f       	sbci	r31, 0xFD	; 253
    134a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    134c:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <Serial+0x19>
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1352:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1354:	ff 91       	pop	r31
    1356:	ef 91       	pop	r30
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	2f 91       	pop	r18
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti

00001368 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1368:	1f 92       	push	r1
    136a:	0f 92       	push	r0
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	0f 92       	push	r0
    1370:	11 24       	eor	r1, r1
    1372:	2f 93       	push	r18
    1374:	3f 93       	push	r19
    1376:	4f 93       	push	r20
    1378:	5f 93       	push	r21
    137a:	6f 93       	push	r22
    137c:	7f 93       	push	r23
    137e:	8f 93       	push	r24
    1380:	9f 93       	push	r25
    1382:	af 93       	push	r26
    1384:	bf 93       	push	r27
    1386:	ef 93       	push	r30
    1388:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    138a:	88 eb       	ldi	r24, 0xB8	; 184
    138c:	92 e0       	ldi	r25, 0x02	; 2
    138e:	0e 94 93 08 	call	0x1126	; 0x1126 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1392:	ff 91       	pop	r31
    1394:	ef 91       	pop	r30
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	4f 91       	pop	r20
    13a6:	3f 91       	pop	r19
    13a8:	2f 91       	pop	r18
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0
    13b0:	1f 90       	pop	r1
    13b2:	18 95       	reti

000013b4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    13b4:	88 eb       	ldi	r24, 0xB8	; 184
    13b6:	92 e0       	ldi	r25, 0x02	; 2
    13b8:	0e 94 57 08 	call	0x10ae	; 0x10ae <_ZN14HardwareSerial9availableEv>
    13bc:	21 e0       	ldi	r18, 0x01	; 1
    13be:	89 2b       	or	r24, r25
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <_Z17Serial0_availablev+0x10>
    13c2:	20 e0       	ldi	r18, 0x00	; 0
}
    13c4:	82 2f       	mov	r24, r18
    13c6:	08 95       	ret

000013c8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    13c8:	e8 eb       	ldi	r30, 0xB8	; 184
    13ca:	f2 e0       	ldi	r31, 0x02	; 2
    13cc:	13 82       	std	Z+3, r1	; 0x03
    13ce:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    13d0:	88 ee       	ldi	r24, 0xE8	; 232
    13d2:	93 e0       	ldi	r25, 0x03	; 3
    13d4:	a0 e0       	ldi	r26, 0x00	; 0
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	84 83       	std	Z+4, r24	; 0x04
    13da:	95 83       	std	Z+5, r25	; 0x05
    13dc:	a6 83       	std	Z+6, r26	; 0x06
    13de:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    13e0:	82 e5       	ldi	r24, 0x52	; 82
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	80 83       	st	Z, r24
    13e8:	85 ec       	ldi	r24, 0xC5	; 197
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	95 87       	std	Z+13, r25	; 0x0d
    13ee:	84 87       	std	Z+12, r24	; 0x0c
    13f0:	84 ec       	ldi	r24, 0xC4	; 196
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	97 87       	std	Z+15, r25	; 0x0f
    13f6:	86 87       	std	Z+14, r24	; 0x0e
    13f8:	80 ec       	ldi	r24, 0xC0	; 192
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	91 8b       	std	Z+17, r25	; 0x11
    13fe:	80 8b       	std	Z+16, r24	; 0x10
    1400:	81 ec       	ldi	r24, 0xC1	; 193
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	93 8b       	std	Z+19, r25	; 0x13
    1406:	82 8b       	std	Z+18, r24	; 0x12
    1408:	82 ec       	ldi	r24, 0xC2	; 194
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	95 8b       	std	Z+21, r25	; 0x15
    140e:	84 8b       	std	Z+20, r24	; 0x14
    1410:	86 ec       	ldi	r24, 0xC6	; 198
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	97 8b       	std	Z+23, r25	; 0x17
    1416:	86 8b       	std	Z+22, r24	; 0x16
    1418:	11 8e       	std	Z+25, r1	; 0x19
    141a:	12 8e       	std	Z+26, r1	; 0x1a
    141c:	13 8e       	std	Z+27, r1	; 0x1b
    141e:	14 8e       	std	Z+28, r1	; 0x1c
    1420:	08 95       	ret

00001422 <initVariant>:
    1422:	08 95       	ret

00001424 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1424:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <init>

	initVariant();
    1428:	0e 94 11 0a 	call	0x1422	; 0x1422 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    142c:	0e 94 89 01 	call	0x312	; 0x312 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1430:	c5 e8       	ldi	r28, 0x85	; 133
    1432:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    1434:	0e 94 de 01 	call	0x3bc	; 0x3bc <loop>
		if (serialEventRun) serialEventRun();
    1438:	20 97       	sbiw	r28, 0x00	; 0
    143a:	e1 f3       	breq	.-8      	; 0x1434 <main+0x10>
    143c:	0e 94 85 08 	call	0x110a	; 0x110a <_Z14serialEventRunv>
    1440:	f9 cf       	rjmp	.-14     	; 0x1434 <main+0x10>

00001442 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1442:	cf 92       	push	r12
    1444:	df 92       	push	r13
    1446:	ef 92       	push	r14
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	6c 01       	movw	r12, r24
    1454:	7a 01       	movw	r14, r20
    1456:	8b 01       	movw	r16, r22
    1458:	c0 e0       	ldi	r28, 0x00	; 0
    145a:	d0 e0       	ldi	r29, 0x00	; 0
    145c:	ce 15       	cp	r28, r14
    145e:	df 05       	cpc	r29, r15
    1460:	81 f0       	breq	.+32     	; 0x1482 <_ZN5Print5writeEPKhj+0x40>
    1462:	d8 01       	movw	r26, r16
    1464:	6d 91       	ld	r22, X+
    1466:	8d 01       	movw	r16, r26
    1468:	d6 01       	movw	r26, r12
    146a:	ed 91       	ld	r30, X+
    146c:	fc 91       	ld	r31, X
    146e:	01 90       	ld	r0, Z+
    1470:	f0 81       	ld	r31, Z
    1472:	e0 2d       	mov	r30, r0
    1474:	c6 01       	movw	r24, r12
    1476:	09 95       	icall
    1478:	89 2b       	or	r24, r25
    147a:	11 f0       	breq	.+4      	; 0x1480 <_ZN5Print5writeEPKhj+0x3e>
    147c:	21 96       	adiw	r28, 0x01	; 1
    147e:	ee cf       	rjmp	.-36     	; 0x145c <_ZN5Print5writeEPKhj+0x1a>
    1480:	7e 01       	movw	r14, r28
    1482:	c7 01       	movw	r24, r14
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	ff 90       	pop	r15
    148e:	ef 90       	pop	r14
    1490:	df 90       	pop	r13
    1492:	cf 90       	pop	r12
    1494:	08 95       	ret

00001496 <_ZN5Print5writeEPKc>:
    1496:	61 15       	cp	r22, r1
    1498:	71 05       	cpc	r23, r1
    149a:	79 f0       	breq	.+30     	; 0x14ba <_ZN5Print5writeEPKc+0x24>
    149c:	fb 01       	movw	r30, r22
    149e:	01 90       	ld	r0, Z+
    14a0:	00 20       	and	r0, r0
    14a2:	e9 f7       	brne	.-6      	; 0x149e <_ZN5Print5writeEPKc+0x8>
    14a4:	31 97       	sbiw	r30, 0x01	; 1
    14a6:	af 01       	movw	r20, r30
    14a8:	46 1b       	sub	r20, r22
    14aa:	57 0b       	sbc	r21, r23
    14ac:	dc 01       	movw	r26, r24
    14ae:	ed 91       	ld	r30, X+
    14b0:	fc 91       	ld	r31, X
    14b2:	02 80       	ldd	r0, Z+2	; 0x02
    14b4:	f3 81       	ldd	r31, Z+3	; 0x03
    14b6:	e0 2d       	mov	r30, r0
    14b8:	09 94       	ijmp
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	08 95       	ret

000014c0 <_ZN5Print5printEc>:
    14c0:	dc 01       	movw	r26, r24
    14c2:	ed 91       	ld	r30, X+
    14c4:	fc 91       	ld	r31, X
    14c6:	01 90       	ld	r0, Z+
    14c8:	f0 81       	ld	r31, Z
    14ca:	e0 2d       	mov	r30, r0
    14cc:	09 94       	ijmp

000014ce <_ZN5Print7printlnEv>:
    14ce:	6e e5       	ldi	r22, 0x5E	; 94
    14d0:	71 e0       	ldi	r23, 0x01	; 1
    14d2:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <_ZN5Print5writeEPKc>

000014d6 <_ZN5Print7printlnEPKc>:
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	ec 01       	movw	r28, r24
    14e0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_ZN5Print5writeEPKc>
    14e4:	8c 01       	movw	r16, r24
    14e6:	ce 01       	movw	r24, r28
    14e8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN5Print7printlnEv>
    14ec:	80 0f       	add	r24, r16
    14ee:	91 1f       	adc	r25, r17
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <_ZN5Print11printNumberEmh>:
    14fa:	8f 92       	push	r8
    14fc:	9f 92       	push	r9
    14fe:	af 92       	push	r10
    1500:	bf 92       	push	r11
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	a1 97       	sbiw	r28, 0x21	; 33
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	7c 01       	movw	r14, r24
    1520:	fa 01       	movw	r30, r20
    1522:	cb 01       	movw	r24, r22
    1524:	19 a2       	std	Y+33, r1	; 0x21
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	08 f4       	brcc	.+2      	; 0x152c <_ZN5Print11printNumberEmh+0x32>
    152a:	2a e0       	ldi	r18, 0x0A	; 10
    152c:	8e 01       	movw	r16, r28
    152e:	0f 5d       	subi	r16, 0xDF	; 223
    1530:	1f 4f       	sbci	r17, 0xFF	; 255
    1532:	82 2e       	mov	r8, r18
    1534:	91 2c       	mov	r9, r1
    1536:	a1 2c       	mov	r10, r1
    1538:	b1 2c       	mov	r11, r1
    153a:	bf 01       	movw	r22, r30
    153c:	a5 01       	movw	r20, r10
    153e:	94 01       	movw	r18, r8
    1540:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__udivmodsi4>
    1544:	f9 01       	movw	r30, r18
    1546:	ca 01       	movw	r24, r20
    1548:	01 50       	subi	r16, 0x01	; 1
    154a:	11 09       	sbc	r17, r1
    154c:	6a 30       	cpi	r22, 0x0A	; 10
    154e:	10 f4       	brcc	.+4      	; 0x1554 <_ZN5Print11printNumberEmh+0x5a>
    1550:	60 5d       	subi	r22, 0xD0	; 208
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <_ZN5Print11printNumberEmh+0x5c>
    1554:	69 5c       	subi	r22, 0xC9	; 201
    1556:	d8 01       	movw	r26, r16
    1558:	6c 93       	st	X, r22
    155a:	23 2b       	or	r18, r19
    155c:	24 2b       	or	r18, r20
    155e:	25 2b       	or	r18, r21
    1560:	61 f7       	brne	.-40     	; 0x153a <_ZN5Print11printNumberEmh+0x40>
    1562:	b8 01       	movw	r22, r16
    1564:	c7 01       	movw	r24, r14
    1566:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_ZN5Print5writeEPKc>
    156a:	a1 96       	adiw	r28, 0x21	; 33
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	bf 90       	pop	r11
    1584:	af 90       	pop	r10
    1586:	9f 90       	pop	r9
    1588:	8f 90       	pop	r8
    158a:	08 95       	ret

0000158c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    158c:	cf 92       	push	r12
    158e:	df 92       	push	r13
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
  if (base == 0) {
    159c:	21 15       	cp	r18, r1
    159e:	31 05       	cpc	r19, r1
    15a0:	81 f4       	brne	.+32     	; 0x15c2 <_ZN5Print5printEli+0x36>
    return write(n);
    15a2:	dc 01       	movw	r26, r24
    15a4:	ed 91       	ld	r30, X+
    15a6:	fc 91       	ld	r31, X
    15a8:	01 90       	ld	r0, Z+
    15aa:	f0 81       	ld	r31, Z
    15ac:	e0 2d       	mov	r30, r0
    15ae:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	df 90       	pop	r13
    15be:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    15c0:	09 94       	ijmp
  } else if (base == 10) {
    15c2:	2a 30       	cpi	r18, 0x0A	; 10
    15c4:	31 05       	cpc	r19, r1
    15c6:	01 f5       	brne	.+64     	; 0x1608 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    15c8:	77 ff       	sbrs	r23, 7
    15ca:	1d c0       	rjmp	.+58     	; 0x1606 <_ZN5Print5printEli+0x7a>
    15cc:	6a 01       	movw	r12, r20
    15ce:	7b 01       	movw	r14, r22
    15d0:	ec 01       	movw	r28, r24
      int t = print('-');
    15d2:	6d e2       	ldi	r22, 0x2D	; 45
    15d4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <_ZN5Print5printEc>
    15d8:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    15da:	44 27       	eor	r20, r20
    15dc:	55 27       	eor	r21, r21
    15de:	ba 01       	movw	r22, r20
    15e0:	4c 19       	sub	r20, r12
    15e2:	5d 09       	sbc	r21, r13
    15e4:	6e 09       	sbc	r22, r14
    15e6:	7f 09       	sbc	r23, r15
    15e8:	2a e0       	ldi	r18, 0x0A	; 10
    15ea:	ce 01       	movw	r24, r28
    15ec:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN5Print11printNumberEmh>
    15f0:	80 0f       	add	r24, r16
    15f2:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	df 90       	pop	r13
    1602:	cf 90       	pop	r12
    1604:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1606:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	ff 90       	pop	r15
    1612:	ef 90       	pop	r14
    1614:	df 90       	pop	r13
    1616:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1618:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <_ZN5Print11printNumberEmh>

0000161c <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    161c:	9a 01       	movw	r18, r20
  return print((long) n, base);
    161e:	ab 01       	movw	r20, r22
    1620:	77 0f       	add	r23, r23
    1622:	66 0b       	sbc	r22, r22
    1624:	77 0b       	sbc	r23, r23
    1626:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <_ZN5Print5printEli>

0000162a <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1634:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN5Print5printEii>
    1638:	8c 01       	movw	r16, r24
  n += println();
    163a:	ce 01       	movw	r24, r28
    163c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN5Print7printlnEv>
  return n;
}
    1640:	80 0f       	add	r24, r16
    1642:	91 1f       	adc	r25, r17
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	08 95       	ret

0000164e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    164e:	1f 92       	push	r1
    1650:	0f 92       	push	r0
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	0f 92       	push	r0
    1656:	11 24       	eor	r1, r1
    1658:	2f 93       	push	r18
    165a:	3f 93       	push	r19
    165c:	8f 93       	push	r24
    165e:	9f 93       	push	r25
    1660:	af 93       	push	r26
    1662:	bf 93       	push	r27
    1664:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <timer0_millis>
    1668:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <timer0_millis+0x1>
    166c:	a0 91 58 03 	lds	r26, 0x0358	; 0x800358 <timer0_millis+0x2>
    1670:	b0 91 59 03 	lds	r27, 0x0359	; 0x800359 <timer0_millis+0x3>
    1674:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <timer0_fract>
    1678:	23 e0       	ldi	r18, 0x03	; 3
    167a:	23 0f       	add	r18, r19
    167c:	2d 37       	cpi	r18, 0x7D	; 125
    167e:	20 f4       	brcc	.+8      	; 0x1688 <__vector_16+0x3a>
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	a1 1d       	adc	r26, r1
    1684:	b1 1d       	adc	r27, r1
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <__vector_16+0x44>
    1688:	26 e8       	ldi	r18, 0x86	; 134
    168a:	23 0f       	add	r18, r19
    168c:	02 96       	adiw	r24, 0x02	; 2
    168e:	a1 1d       	adc	r26, r1
    1690:	b1 1d       	adc	r27, r1
    1692:	20 93 55 03 	sts	0x0355, r18	; 0x800355 <timer0_fract>
    1696:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <timer0_millis>
    169a:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <timer0_millis+0x1>
    169e:	a0 93 58 03 	sts	0x0358, r26	; 0x800358 <timer0_millis+0x2>
    16a2:	b0 93 59 03 	sts	0x0359, r27	; 0x800359 <timer0_millis+0x3>
    16a6:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <timer0_overflow_count>
    16aa:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <timer0_overflow_count+0x1>
    16ae:	a0 91 5c 03 	lds	r26, 0x035C	; 0x80035c <timer0_overflow_count+0x2>
    16b2:	b0 91 5d 03 	lds	r27, 0x035D	; 0x80035d <timer0_overflow_count+0x3>
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	a1 1d       	adc	r26, r1
    16ba:	b1 1d       	adc	r27, r1
    16bc:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <timer0_overflow_count>
    16c0:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <timer0_overflow_count+0x1>
    16c4:	a0 93 5c 03 	sts	0x035C, r26	; 0x80035c <timer0_overflow_count+0x2>
    16c8:	b0 93 5d 03 	sts	0x035D, r27	; 0x80035d <timer0_overflow_count+0x3>
    16cc:	bf 91       	pop	r27
    16ce:	af 91       	pop	r26
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	3f 91       	pop	r19
    16d6:	2f 91       	pop	r18
    16d8:	0f 90       	pop	r0
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	0f 90       	pop	r0
    16de:	1f 90       	pop	r1
    16e0:	18 95       	reti

000016e2 <millis>:
    16e2:	2f b7       	in	r18, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	60 91 56 03 	lds	r22, 0x0356	; 0x800356 <timer0_millis>
    16ea:	70 91 57 03 	lds	r23, 0x0357	; 0x800357 <timer0_millis+0x1>
    16ee:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <timer0_millis+0x2>
    16f2:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <timer0_millis+0x3>
    16f6:	2f bf       	out	0x3f, r18	; 63
    16f8:	08 95       	ret

000016fa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    16fa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    16fc:	84 b5       	in	r24, 0x24	; 36
    16fe:	82 60       	ori	r24, 0x02	; 2
    1700:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1702:	84 b5       	in	r24, 0x24	; 36
    1704:	81 60       	ori	r24, 0x01	; 1
    1706:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1708:	85 b5       	in	r24, 0x25	; 37
    170a:	82 60       	ori	r24, 0x02	; 2
    170c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    170e:	85 b5       	in	r24, 0x25	; 37
    1710:	81 60       	ori	r24, 0x01	; 1
    1712:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1714:	ee e6       	ldi	r30, 0x6E	; 110
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	81 60       	ori	r24, 0x01	; 1
    171c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    171e:	e1 e8       	ldi	r30, 0x81	; 129
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1724:	80 81       	ld	r24, Z
    1726:	82 60       	ori	r24, 0x02	; 2
    1728:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    172a:	80 81       	ld	r24, Z
    172c:	81 60       	ori	r24, 0x01	; 1
    172e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1730:	e0 e8       	ldi	r30, 0x80	; 128
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	81 60       	ori	r24, 0x01	; 1
    1738:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    173a:	e1 eb       	ldi	r30, 0xB1	; 177
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	84 60       	ori	r24, 0x04	; 4
    1742:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1744:	e0 eb       	ldi	r30, 0xB0	; 176
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	81 60       	ori	r24, 0x01	; 1
    174c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    174e:	ea e7       	ldi	r30, 0x7A	; 122
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	84 60       	ori	r24, 0x04	; 4
    1756:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1758:	80 81       	ld	r24, Z
    175a:	82 60       	ori	r24, 0x02	; 2
    175c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    175e:	80 81       	ld	r24, Z
    1760:	81 60       	ori	r24, 0x01	; 1
    1762:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1764:	80 81       	ld	r24, Z
    1766:	80 68       	ori	r24, 0x80	; 128
    1768:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    176a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    176e:	08 95       	ret

00001770 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	18 2f       	mov	r17, r24
    1778:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	0e 94 40 0c 	call	0x1880	; 0x1880 <pinMode>
	if (val == 0)
    1780:	20 97       	sbiw	r28, 0x00	; 0
    1782:	11 f4       	brne	.+4      	; 0x1788 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <analogWrite+0x20>
	}
	else if (val == 255)
    1788:	cf 3f       	cpi	r28, 0xFF	; 255
    178a:	d1 05       	cpc	r29, r1
    178c:	39 f4       	brne	.+14     	; 0x179c <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    1798:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    179c:	e1 2f       	mov	r30, r17
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	e8 59       	subi	r30, 0x98	; 152
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	e4 91       	lpm	r30, Z
    17a6:	e3 30       	cpi	r30, 0x03	; 3
    17a8:	f9 f0       	breq	.+62     	; 0x17e8 <analogWrite+0x78>
    17aa:	48 f4       	brcc	.+18     	; 0x17be <analogWrite+0x4e>
    17ac:	e1 30       	cpi	r30, 0x01	; 1
    17ae:	b9 f0       	breq	.+46     	; 0x17de <analogWrite+0x6e>
    17b0:	e2 30       	cpi	r30, 0x02	; 2
    17b2:	a1 f5       	brne	.+104    	; 0x181c <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    17b4:	84 b5       	in	r24, 0x24	; 36
    17b6:	80 62       	ori	r24, 0x20	; 32
    17b8:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    17ba:	c8 bd       	out	0x28, r28	; 40
				break;
    17bc:	34 c0       	rjmp	.+104    	; 0x1826 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    17be:	e7 30       	cpi	r30, 0x07	; 7
    17c0:	e9 f0       	breq	.+58     	; 0x17fc <analogWrite+0x8c>
    17c2:	e8 30       	cpi	r30, 0x08	; 8
    17c4:	19 f1       	breq	.+70     	; 0x180c <analogWrite+0x9c>
    17c6:	e4 30       	cpi	r30, 0x04	; 4
    17c8:	49 f5       	brne	.+82     	; 0x181c <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    17ca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    17ce:	80 62       	ori	r24, 0x20	; 32
    17d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    17d4:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    17d8:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    17dc:	24 c0       	rjmp	.+72     	; 0x1826 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    17de:	84 b5       	in	r24, 0x24	; 36
    17e0:	80 68       	ori	r24, 0x80	; 128
    17e2:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    17e4:	c7 bd       	out	0x27, r28	; 39
				break;
    17e6:	1f c0       	rjmp	.+62     	; 0x1826 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    17e8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    17ec:	80 68       	ori	r24, 0x80	; 128
    17ee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    17f2:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    17f6:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    17fa:	15 c0       	rjmp	.+42     	; 0x1826 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    17fc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1800:	80 68       	ori	r24, 0x80	; 128
    1802:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    1806:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    180a:	0d c0       	rjmp	.+26     	; 0x1826 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    180c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1810:	80 62       	ori	r24, 0x20	; 32
    1812:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    1816:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    181c:	c0 38       	cpi	r28, 0x80	; 128
    181e:	d1 05       	cpc	r29, r1
    1820:	0c f0       	brlt	.+2      	; 0x1824 <analogWrite+0xb4>
    1822:	b5 cf       	rjmp	.-150    	; 0x178e <analogWrite+0x1e>
    1824:	af cf       	rjmp	.-162    	; 0x1784 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	08 95       	ret

0000182e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    182e:	83 30       	cpi	r24, 0x03	; 3
    1830:	81 f0       	breq	.+32     	; 0x1852 <turnOffPWM+0x24>
    1832:	28 f4       	brcc	.+10     	; 0x183e <turnOffPWM+0x10>
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	99 f0       	breq	.+38     	; 0x185e <turnOffPWM+0x30>
    1838:	82 30       	cpi	r24, 0x02	; 2
    183a:	a1 f0       	breq	.+40     	; 0x1864 <turnOffPWM+0x36>
    183c:	08 95       	ret
    183e:	87 30       	cpi	r24, 0x07	; 7
    1840:	a9 f0       	breq	.+42     	; 0x186c <turnOffPWM+0x3e>
    1842:	88 30       	cpi	r24, 0x08	; 8
    1844:	b9 f0       	breq	.+46     	; 0x1874 <turnOffPWM+0x46>
    1846:	84 30       	cpi	r24, 0x04	; 4
    1848:	d1 f4       	brne	.+52     	; 0x187e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    184a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    184e:	8f 7d       	andi	r24, 0xDF	; 223
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1852:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1856:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1858:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    185c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    185e:	84 b5       	in	r24, 0x24	; 36
    1860:	8f 77       	andi	r24, 0x7F	; 127
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1864:	84 b5       	in	r24, 0x24	; 36
    1866:	8f 7d       	andi	r24, 0xDF	; 223
    1868:	84 bd       	out	0x24, r24	; 36
    186a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    186c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1870:	8f 77       	andi	r24, 0x7F	; 127
    1872:	03 c0       	rjmp	.+6      	; 0x187a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1874:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1878:	8f 7d       	andi	r24, 0xDF	; 223
    187a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    187e:	08 95       	ret

00001880 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	fc 01       	movw	r30, r24
    1888:	e4 58       	subi	r30, 0x84	; 132
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    188e:	fc 01       	movw	r30, r24
    1890:	e0 57       	subi	r30, 0x70	; 112
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1896:	88 23       	and	r24, r24
    1898:	61 f1       	breq	.+88     	; 0x18f2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	fc 01       	movw	r30, r24
    18a2:	e2 55       	subi	r30, 0x52	; 82
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	c5 91       	lpm	r28, Z+
    18a8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    18aa:	fc 01       	movw	r30, r24
    18ac:	ec 55       	subi	r30, 0x5C	; 92
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	a5 91       	lpm	r26, Z+
    18b2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    18b4:	61 11       	cpse	r22, r1
    18b6:	09 c0       	rjmp	.+18     	; 0x18ca <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    18b8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    18ba:	f8 94       	cli
		*reg &= ~bit;
    18bc:	88 81       	ld	r24, Y
    18be:	20 95       	com	r18
    18c0:	82 23       	and	r24, r18
    18c2:	88 83       	st	Y, r24
		*out &= ~bit;
    18c4:	ec 91       	ld	r30, X
    18c6:	2e 23       	and	r18, r30
    18c8:	0b c0       	rjmp	.+22     	; 0x18e0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    18ca:	62 30       	cpi	r22, 0x02	; 2
    18cc:	61 f4       	brne	.+24     	; 0x18e6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    18ce:	9f b7       	in	r25, 0x3f	; 63
                cli();
    18d0:	f8 94       	cli
		*reg &= ~bit;
    18d2:	88 81       	ld	r24, Y
    18d4:	32 2f       	mov	r19, r18
    18d6:	30 95       	com	r19
    18d8:	83 23       	and	r24, r19
    18da:	88 83       	st	Y, r24
		*out |= bit;
    18dc:	ec 91       	ld	r30, X
    18de:	2e 2b       	or	r18, r30
    18e0:	2c 93       	st	X, r18
		SREG = oldSREG;
    18e2:	9f bf       	out	0x3f, r25	; 63
    18e4:	06 c0       	rjmp	.+12     	; 0x18f2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    18e6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    18e8:	f8 94       	cli
		*reg |= bit;
    18ea:	e8 81       	ld	r30, Y
    18ec:	2e 2b       	or	r18, r30
    18ee:	28 83       	st	Y, r18
		SREG = oldSREG;
    18f0:	8f bf       	out	0x3f, r24	; 63
	}
}
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	08 95       	ret

000018f8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    18f8:	1f 93       	push	r17
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	f9 01       	movw	r30, r18
    1904:	e8 59       	subi	r30, 0x98	; 152
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    190a:	f9 01       	movw	r30, r18
    190c:	e4 58       	subi	r30, 0x84	; 132
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1912:	f9 01       	movw	r30, r18
    1914:	e0 57       	subi	r30, 0x70	; 112
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    191a:	cc 23       	and	r28, r28
    191c:	c1 f0       	breq	.+48     	; 0x194e <digitalWrite+0x56>
    191e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1920:	81 11       	cpse	r24, r1
    1922:	0e 94 17 0c 	call	0x182e	; 0x182e <turnOffPWM>

	out = portOutputRegister(port);
    1926:	ec 2f       	mov	r30, r28
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	ee 0f       	add	r30, r30
    192c:	ff 1f       	adc	r31, r31
    192e:	ec 55       	subi	r30, 0x5C	; 92
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	a5 91       	lpm	r26, Z+
    1934:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1936:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1938:	f8 94       	cli

	if (val == LOW) {
    193a:	11 11       	cpse	r17, r1
    193c:	04 c0       	rjmp	.+8      	; 0x1946 <digitalWrite+0x4e>
		*out &= ~bit;
    193e:	8c 91       	ld	r24, X
    1940:	d0 95       	com	r29
    1942:	d8 23       	and	r29, r24
    1944:	02 c0       	rjmp	.+4      	; 0x194a <digitalWrite+0x52>
	} else {
		*out |= bit;
    1946:	ec 91       	ld	r30, X
    1948:	de 2b       	or	r29, r30
    194a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    194c:	9f bf       	out	0x3f, r25	; 63
}
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	08 95       	ret

00001956 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    1956:	4f 92       	push	r4
    1958:	5f 92       	push	r5
    195a:	6f 92       	push	r6
    195c:	7f 92       	push	r7
    195e:	af 92       	push	r10
    1960:	bf 92       	push	r11
    1962:	cf 92       	push	r12
    1964:	df 92       	push	r13
    1966:	ef 92       	push	r14
    1968:	ff 92       	push	r15
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	29 01       	movw	r4, r18
    1978:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    197a:	9b 01       	movw	r18, r22
    197c:	ac 01       	movw	r20, r24
    197e:	24 19       	sub	r18, r4
    1980:	35 09       	sbc	r19, r5
    1982:	46 09       	sbc	r20, r6
    1984:	57 09       	sbc	r21, r7
    1986:	89 89       	ldd	r24, Y+17	; 0x11
    1988:	9a 89       	ldd	r25, Y+18	; 0x12
    198a:	ab 89       	ldd	r26, Y+19	; 0x13
    198c:	bc 89       	ldd	r27, Y+20	; 0x14
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	6a 19       	sub	r22, r10
    1994:	7b 09       	sbc	r23, r11
    1996:	8c 09       	sbc	r24, r12
    1998:	9d 09       	sbc	r25, r13
    199a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__mulsi3>
    199e:	a8 01       	movw	r20, r16
    19a0:	97 01       	movw	r18, r14
    19a2:	24 19       	sub	r18, r4
    19a4:	35 09       	sbc	r19, r5
    19a6:	46 09       	sbc	r20, r6
    19a8:	57 09       	sbc	r21, r7
    19aa:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__divmodsi4>
    19ae:	ca 01       	movw	r24, r20
    19b0:	b9 01       	movw	r22, r18
    19b2:	6a 0d       	add	r22, r10
    19b4:	7b 1d       	adc	r23, r11
    19b6:	8c 1d       	adc	r24, r12
    19b8:	9d 1d       	adc	r25, r13
}
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	ff 90       	pop	r15
    19c4:	ef 90       	pop	r14
    19c6:	df 90       	pop	r13
    19c8:	cf 90       	pop	r12
    19ca:	bf 90       	pop	r11
    19cc:	af 90       	pop	r10
    19ce:	7f 90       	pop	r7
    19d0:	6f 90       	pop	r6
    19d2:	5f 90       	pop	r5
    19d4:	4f 90       	pop	r4
    19d6:	08 95       	ret

000019d8 <__mulsi3>:
    19d8:	db 01       	movw	r26, r22
    19da:	8f 93       	push	r24
    19dc:	9f 93       	push	r25
    19de:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__muluhisi3>
    19e2:	bf 91       	pop	r27
    19e4:	af 91       	pop	r26
    19e6:	a2 9f       	mul	r26, r18
    19e8:	80 0d       	add	r24, r0
    19ea:	91 1d       	adc	r25, r1
    19ec:	a3 9f       	mul	r26, r19
    19ee:	90 0d       	add	r25, r0
    19f0:	b2 9f       	mul	r27, r18
    19f2:	90 0d       	add	r25, r0
    19f4:	11 24       	eor	r1, r1
    19f6:	08 95       	ret

000019f8 <__udivmodqi4>:
    19f8:	99 1b       	sub	r25, r25
    19fa:	79 e0       	ldi	r23, 0x09	; 9
    19fc:	04 c0       	rjmp	.+8      	; 0x1a06 <__udivmodqi4_ep>

000019fe <__udivmodqi4_loop>:
    19fe:	99 1f       	adc	r25, r25
    1a00:	96 17       	cp	r25, r22
    1a02:	08 f0       	brcs	.+2      	; 0x1a06 <__udivmodqi4_ep>
    1a04:	96 1b       	sub	r25, r22

00001a06 <__udivmodqi4_ep>:
    1a06:	88 1f       	adc	r24, r24
    1a08:	7a 95       	dec	r23
    1a0a:	c9 f7       	brne	.-14     	; 0x19fe <__udivmodqi4_loop>
    1a0c:	80 95       	com	r24
    1a0e:	08 95       	ret

00001a10 <__udivmodsi4>:
    1a10:	a1 e2       	ldi	r26, 0x21	; 33
    1a12:	1a 2e       	mov	r1, r26
    1a14:	aa 1b       	sub	r26, r26
    1a16:	bb 1b       	sub	r27, r27
    1a18:	fd 01       	movw	r30, r26
    1a1a:	0d c0       	rjmp	.+26     	; 0x1a36 <__udivmodsi4_ep>

00001a1c <__udivmodsi4_loop>:
    1a1c:	aa 1f       	adc	r26, r26
    1a1e:	bb 1f       	adc	r27, r27
    1a20:	ee 1f       	adc	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	a2 17       	cp	r26, r18
    1a26:	b3 07       	cpc	r27, r19
    1a28:	e4 07       	cpc	r30, r20
    1a2a:	f5 07       	cpc	r31, r21
    1a2c:	20 f0       	brcs	.+8      	; 0x1a36 <__udivmodsi4_ep>
    1a2e:	a2 1b       	sub	r26, r18
    1a30:	b3 0b       	sbc	r27, r19
    1a32:	e4 0b       	sbc	r30, r20
    1a34:	f5 0b       	sbc	r31, r21

00001a36 <__udivmodsi4_ep>:
    1a36:	66 1f       	adc	r22, r22
    1a38:	77 1f       	adc	r23, r23
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	1a 94       	dec	r1
    1a40:	69 f7       	brne	.-38     	; 0x1a1c <__udivmodsi4_loop>
    1a42:	60 95       	com	r22
    1a44:	70 95       	com	r23
    1a46:	80 95       	com	r24
    1a48:	90 95       	com	r25
    1a4a:	9b 01       	movw	r18, r22
    1a4c:	ac 01       	movw	r20, r24
    1a4e:	bd 01       	movw	r22, r26
    1a50:	cf 01       	movw	r24, r30
    1a52:	08 95       	ret

00001a54 <__divmodsi4>:
    1a54:	05 2e       	mov	r0, r21
    1a56:	97 fb       	bst	r25, 7
    1a58:	1e f4       	brtc	.+6      	; 0x1a60 <__divmodsi4+0xc>
    1a5a:	00 94       	com	r0
    1a5c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__negsi2>
    1a60:	57 fd       	sbrc	r21, 7
    1a62:	07 d0       	rcall	.+14     	; 0x1a72 <__divmodsi4_neg2>
    1a64:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__udivmodsi4>
    1a68:	07 fc       	sbrc	r0, 7
    1a6a:	03 d0       	rcall	.+6      	; 0x1a72 <__divmodsi4_neg2>
    1a6c:	4e f4       	brtc	.+18     	; 0x1a80 <__divmodsi4_exit>
    1a6e:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__negsi2>

00001a72 <__divmodsi4_neg2>:
    1a72:	50 95       	com	r21
    1a74:	40 95       	com	r20
    1a76:	30 95       	com	r19
    1a78:	21 95       	neg	r18
    1a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a7e:	5f 4f       	sbci	r21, 0xFF	; 255

00001a80 <__divmodsi4_exit>:
    1a80:	08 95       	ret

00001a82 <__negsi2>:
    1a82:	90 95       	com	r25
    1a84:	80 95       	com	r24
    1a86:	70 95       	com	r23
    1a88:	61 95       	neg	r22
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a90:	08 95       	ret

00001a92 <__muluhisi3>:
    1a92:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__umulhisi3>
    1a96:	a5 9f       	mul	r26, r21
    1a98:	90 0d       	add	r25, r0
    1a9a:	b4 9f       	mul	r27, r20
    1a9c:	90 0d       	add	r25, r0
    1a9e:	a4 9f       	mul	r26, r20
    1aa0:	80 0d       	add	r24, r0
    1aa2:	91 1d       	adc	r25, r1
    1aa4:	11 24       	eor	r1, r1
    1aa6:	08 95       	ret

00001aa8 <__tablejump2__>:
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	05 90       	lpm	r0, Z+
    1aae:	f4 91       	lpm	r31, Z
    1ab0:	e0 2d       	mov	r30, r0
    1ab2:	09 94       	ijmp

00001ab4 <__umulhisi3>:
    1ab4:	a2 9f       	mul	r26, r18
    1ab6:	b0 01       	movw	r22, r0
    1ab8:	b3 9f       	mul	r27, r19
    1aba:	c0 01       	movw	r24, r0
    1abc:	a3 9f       	mul	r26, r19
    1abe:	70 0d       	add	r23, r0
    1ac0:	81 1d       	adc	r24, r1
    1ac2:	11 24       	eor	r1, r1
    1ac4:	91 1d       	adc	r25, r1
    1ac6:	b2 9f       	mul	r27, r18
    1ac8:	70 0d       	add	r23, r0
    1aca:	81 1d       	adc	r24, r1
    1acc:	11 24       	eor	r1, r1
    1ace:	91 1d       	adc	r25, r1
    1ad0:	08 95       	ret

00001ad2 <atoi>:
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	88 27       	eor	r24, r24
    1ad6:	99 27       	eor	r25, r25
    1ad8:	e8 94       	clt
    1ada:	21 91       	ld	r18, Z+
    1adc:	20 32       	cpi	r18, 0x20	; 32
    1ade:	e9 f3       	breq	.-6      	; 0x1ada <atoi+0x8>
    1ae0:	29 30       	cpi	r18, 0x09	; 9
    1ae2:	10 f0       	brcs	.+4      	; 0x1ae8 <atoi+0x16>
    1ae4:	2e 30       	cpi	r18, 0x0E	; 14
    1ae6:	c8 f3       	brcs	.-14     	; 0x1ada <atoi+0x8>
    1ae8:	2b 32       	cpi	r18, 0x2B	; 43
    1aea:	41 f0       	breq	.+16     	; 0x1afc <atoi+0x2a>
    1aec:	2d 32       	cpi	r18, 0x2D	; 45
    1aee:	39 f4       	brne	.+14     	; 0x1afe <atoi+0x2c>
    1af0:	68 94       	set
    1af2:	04 c0       	rjmp	.+8      	; 0x1afc <atoi+0x2a>
    1af4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__mulhi_const_10>
    1af8:	82 0f       	add	r24, r18
    1afa:	91 1d       	adc	r25, r1
    1afc:	21 91       	ld	r18, Z+
    1afe:	20 53       	subi	r18, 0x30	; 48
    1b00:	2a 30       	cpi	r18, 0x0A	; 10
    1b02:	c0 f3       	brcs	.-16     	; 0x1af4 <atoi+0x22>
    1b04:	1e f4       	brtc	.+6      	; 0x1b0c <atoi+0x3a>
    1b06:	90 95       	com	r25
    1b08:	81 95       	neg	r24
    1b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0c:	08 95       	ret

00001b0e <strtok>:
    1b0e:	4e e6       	ldi	r20, 0x6E	; 110
    1b10:	51 e0       	ldi	r21, 0x01	; 1
    1b12:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <strtok_r>
    1b16:	08 95       	ret

00001b18 <strcmp>:
    1b18:	fb 01       	movw	r30, r22
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	8d 91       	ld	r24, X+
    1b1e:	01 90       	ld	r0, Z+
    1b20:	80 19       	sub	r24, r0
    1b22:	01 10       	cpse	r0, r1
    1b24:	d9 f3       	breq	.-10     	; 0x1b1c <strcmp+0x4>
    1b26:	99 0b       	sbc	r25, r25
    1b28:	08 95       	ret

00001b2a <strtok_r>:
    1b2a:	fa 01       	movw	r30, r20
    1b2c:	a1 91       	ld	r26, Z+
    1b2e:	b0 81       	ld	r27, Z
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	19 f4       	brne	.+6      	; 0x1b3a <strtok_r+0x10>
    1b34:	10 97       	sbiw	r26, 0x00	; 0
    1b36:	e1 f0       	breq	.+56     	; 0x1b70 <strtok_r+0x46>
    1b38:	cd 01       	movw	r24, r26
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0d 90       	ld	r0, X+
    1b40:	00 20       	and	r0, r0
    1b42:	11 f4       	brne	.+4      	; 0x1b48 <strtok_r+0x1e>
    1b44:	c0 01       	movw	r24, r0
    1b46:	13 c0       	rjmp	.+38     	; 0x1b6e <strtok_r+0x44>
    1b48:	fb 01       	movw	r30, r22
    1b4a:	21 91       	ld	r18, Z+
    1b4c:	22 23       	and	r18, r18
    1b4e:	19 f0       	breq	.+6      	; 0x1b56 <strtok_r+0x2c>
    1b50:	20 15       	cp	r18, r0
    1b52:	d9 f7       	brne	.-10     	; 0x1b4a <strtok_r+0x20>
    1b54:	f3 cf       	rjmp	.-26     	; 0x1b3c <strtok_r+0x12>
    1b56:	fb 01       	movw	r30, r22
    1b58:	21 91       	ld	r18, Z+
    1b5a:	20 15       	cp	r18, r0
    1b5c:	19 f4       	brne	.+6      	; 0x1b64 <strtok_r+0x3a>
    1b5e:	1e 92       	st	-X, r1
    1b60:	11 96       	adiw	r26, 0x01	; 1
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <strtok_r+0x46>
    1b64:	22 23       	and	r18, r18
    1b66:	c1 f7       	brne	.-16     	; 0x1b58 <strtok_r+0x2e>
    1b68:	0d 90       	ld	r0, X+
    1b6a:	00 20       	and	r0, r0
    1b6c:	a1 f7       	brne	.-24     	; 0x1b56 <strtok_r+0x2c>
    1b6e:	d0 01       	movw	r26, r0
    1b70:	fa 01       	movw	r30, r20
    1b72:	a1 93       	st	Z+, r26
    1b74:	b0 83       	st	Z, r27
    1b76:	08 95       	ret

00001b78 <__mulhi_const_10>:
    1b78:	7a e0       	ldi	r23, 0x0A	; 10
    1b7a:	97 9f       	mul	r25, r23
    1b7c:	90 2d       	mov	r25, r0
    1b7e:	87 9f       	mul	r24, r23
    1b80:	80 2d       	mov	r24, r0
    1b82:	91 0d       	add	r25, r1
    1b84:	11 24       	eor	r1, r1
    1b86:	08 95       	ret

00001b88 <_exit>:
    1b88:	f8 94       	cli

00001b8a <__stop_program>:
    1b8a:	ff cf       	rjmp	.-2      	; 0x1b8a <__stop_program>
