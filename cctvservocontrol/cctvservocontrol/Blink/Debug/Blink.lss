
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00001510  000015a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001510  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012d  00800170  00800170  00001614  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008957  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b17  00000000  00000000  0000a34b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002014  00000000  00000000  0000be62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ae0  00000000  00000000  0000de78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000210a  00000000  00000000  0000e958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b06  00000000  00000000  00010a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  00014568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__vector_16>
      44:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_17>
      48:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_18>
      4c:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	c0 03       	fmuls	r20, r16
      ba:	55 07       	cpc	r21, r21

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	e0 e1       	ldi	r30, 0x10	; 16
      d0:	f5 e1       	ldi	r31, 0x15	; 21
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a0 37       	cpi	r26, 0x70	; 112
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	22 e0       	ldi	r18, 0x02	; 2
      e0:	a0 e7       	ldi	r26, 0x70	; 112
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	ad 39       	cpi	r26, 0x9D	; 157
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	ce e5       	ldi	r28, 0x5E	; 94
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
      f6:	21 97       	sbiw	r28, 0x01	; 1
      f8:	fe 01       	movw	r30, r28
      fa:	0e 94 16 0a 	call	0x142c	; 0x142c <__tablejump2__>
      fe:	cc 35       	cpi	r28, 0x5C	; 92
     100:	d1 07       	cpc	r29, r17
     102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
     104:	0e 94 83 07 	call	0xf06	; 0xf06 <main>
     108:	0c 94 86 0a 	jmp	0x150c	; 0x150c <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_Z15command_handlerPPci>:
volatile bool led2state = 0;
volatile bool led3state = 0;
volatile bool ledstateupdate_flag = 0;


void *command_handler(char **args,int arg_count){
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	ec 01       	movw	r28, r24

	if(!strcmp(args[0], "cctv") ) {
     11a:	08 81       	ld	r16, Y
     11c:	19 81       	ldd	r17, Y+1	; 0x01
     11e:	6a e0       	ldi	r22, 0x0A	; 10
     120:	71 e0       	ldi	r23, 0x01	; 1
     122:	c8 01       	movw	r24, r16
     124:	0e 94 4e 0a 	call	0x149c	; 0x149c <strcmp>
     128:	89 2b       	or	r24, r25
     12a:	b1 f5       	brne	.+108    	; 0x198 <_Z15command_handlerPPci+0x88>
		if(!strcmp(args[1], "pitch")) {
     12c:	0a 81       	ldd	r16, Y+2	; 0x02
     12e:	1b 81       	ldd	r17, Y+3	; 0x03
     130:	6f e0       	ldi	r22, 0x0F	; 15
     132:	71 e0       	ldi	r23, 0x01	; 1
     134:	c8 01       	movw	r24, r16
     136:	0e 94 4e 0a 	call	0x149c	; 0x149c <strcmp>
     13a:	89 2b       	or	r24, r25
     13c:	49 f4       	brne	.+18     	; 0x150 <_Z15command_handlerPPci+0x40>
			servo_pitch_pos = atoi(args[2]);
     13e:	8c 81       	ldd	r24, Y+4	; 0x04
     140:	9d 81       	ldd	r25, Y+5	; 0x05
     142:	0e 94 2b 0a 	call	0x1456	; 0x1456 <atoi>
     146:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <servo_pitch_pos+0x1>
     14a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <servo_pitch_pos>
     14e:	0f c0       	rjmp	.+30     	; 0x16e <_Z15command_handlerPPci+0x5e>
			servo_pos_update_flag = 1;
			//cctvPitchServo.write(servo_pitch_pos);
			//cctvPitchServo.write(atoi(args[2]));
		}
		else if(!strcmp(args[1], "yaw")) {
     150:	65 e1       	ldi	r22, 0x15	; 21
     152:	71 e0       	ldi	r23, 0x01	; 1
     154:	c8 01       	movw	r24, r16
     156:	0e 94 4e 0a 	call	0x149c	; 0x149c <strcmp>
     15a:	89 2b       	or	r24, r25
     15c:	61 f4       	brne	.+24     	; 0x176 <_Z15command_handlerPPci+0x66>
			servo_yaw_pos = atoi(args[2]);
     15e:	8c 81       	ldd	r24, Y+4	; 0x04
     160:	9d 81       	ldd	r25, Y+5	; 0x05
     162:	0e 94 2b 0a 	call	0x1456	; 0x1456 <atoi>
     166:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <servo_yaw_pos+0x1>
     16a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servo_yaw_pos>
			servo_pos_update_flag = 1;
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <servo_pos_update_flag>
     174:	87 c0       	rjmp	.+270    	; 0x284 <_Z15command_handlerPPci+0x174>
			//cctvYawServo.write(servo_yaw_pos);
			//cctvYawServo.write(atoi(args[2]));
		}
		else if(!strcmp(args[1], "speed")) {
     176:	69 e1       	ldi	r22, 0x19	; 25
     178:	71 e0       	ldi	r23, 0x01	; 1
     17a:	c8 01       	movw	r24, r16
     17c:	0e 94 4e 0a 	call	0x149c	; 0x149c <strcmp>
     180:	89 2b       	or	r24, r25
     182:	09 f0       	breq	.+2      	; 0x186 <_Z15command_handlerPPci+0x76>
     184:	7f c0       	rjmp	.+254    	; 0x284 <_Z15command_handlerPPci+0x174>
			servo_speed = (atoi(args[2]));
     186:	8c 81       	ldd	r24, Y+4	; 0x04
     188:	9d 81       	ldd	r25, Y+5	; 0x05
     18a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <atoi>
     18e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <servo_speed+0x1>
     192:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <servo_speed>
     196:	76 c0       	rjmp	.+236    	; 0x284 <_Z15command_handlerPPci+0x174>
		}
	}
	else if(!strcmp(args[0], "beep")) {
     198:	6f e1       	ldi	r22, 0x1F	; 31
     19a:	71 e0       	ldi	r23, 0x01	; 1
     19c:	c8 01       	movw	r24, r16
     19e:	0e 94 4e 0a 	call	0x149c	; 0x149c <strcmp>
     1a2:	89 2b       	or	r24, r25
     1a4:	71 f5       	brne	.+92     	; 0x202 <_Z15command_handlerPPci+0xf2>
		if(!strcmp(args[1], "set_rate")) {
     1a6:	0a 81       	ldd	r16, Y+2	; 0x02
     1a8:	1b 81       	ldd	r17, Y+3	; 0x03
     1aa:	64 e2       	ldi	r22, 0x24	; 36
     1ac:	71 e0       	ldi	r23, 0x01	; 1
     1ae:	c8 01       	movw	r24, r16
     1b0:	0e 94 4e 0a 	call	0x149c	; 0x149c <strcmp>
     1b4:	89 2b       	or	r24, r25
     1b6:	49 f4       	brne	.+18     	; 0x1ca <_Z15command_handlerPPci+0xba>
			beep_rate_ms = (atoi(args[2]));
     1b8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ba:	9d 81       	ldd	r25, Y+5	; 0x05
     1bc:	0e 94 2b 0a 	call	0x1456	; 0x1456 <atoi>
     1c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     1c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     1c8:	5d c0       	rjmp	.+186    	; 0x284 <_Z15command_handlerPPci+0x174>
		}
		else if(!strcmp(args[1], "now")) {
     1ca:	6d e2       	ldi	r22, 0x2D	; 45
     1cc:	71 e0       	ldi	r23, 0x01	; 1
     1ce:	c8 01       	movw	r24, r16
     1d0:	0e 94 4e 0a 	call	0x149c	; 0x149c <strcmp>
     1d4:	89 2b       	or	r24, r25
     1d6:	09 f0       	breq	.+2      	; 0x1da <_Z15command_handlerPPci+0xca>
     1d8:	55 c0       	rjmp	.+170    	; 0x284 <_Z15command_handlerPPci+0x174>
			beep_times = (atoi(args[2]));
     1da:	8c 81       	ldd	r24, Y+4	; 0x04
     1dc:	9d 81       	ldd	r25, Y+5	; 0x05
     1de:	0e 94 2b 0a 	call	0x1456	; 0x1456 <atoi>
     1e2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <beep_times+0x1>
     1e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <beep_times>
			if(beep_times >0){
     1ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <beep_times>
     1ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <beep_times+0x1>
     1f2:	18 16       	cp	r1, r24
     1f4:	19 06       	cpc	r1, r25
     1f6:	0c f0       	brlt	.+2      	; 0x1fa <_Z15command_handlerPPci+0xea>
     1f8:	45 c0       	rjmp	.+138    	; 0x284 <_Z15command_handlerPPci+0x174>
				beep_request = 1;
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <beep_request>
     200:	41 c0       	rjmp	.+130    	; 0x284 <_Z15command_handlerPPci+0x174>
			}
			//beep_rate_ms = (atoi(args[2]));
		}
	}
	else if(!strcmp(args[0], "led")) {
     202:	61 e3       	ldi	r22, 0x31	; 49
     204:	71 e0       	ldi	r23, 0x01	; 1
     206:	c8 01       	movw	r24, r16
     208:	0e 94 4e 0a 	call	0x149c	; 0x149c <strcmp>
     20c:	89 2b       	or	r24, r25
     20e:	d1 f5       	brne	.+116    	; 0x284 <_Z15command_handlerPPci+0x174>
		if(!strcmp(args[1], "1")) {
     210:	0a 81       	ldd	r16, Y+2	; 0x02
     212:	1b 81       	ldd	r17, Y+3	; 0x03
     214:	65 e3       	ldi	r22, 0x35	; 53
     216:	71 e0       	ldi	r23, 0x01	; 1
     218:	c8 01       	movw	r24, r16
     21a:	0e 94 4e 0a 	call	0x149c	; 0x149c <strcmp>
     21e:	89 2b       	or	r24, r25
     220:	59 f4       	brne	.+22     	; 0x238 <_Z15command_handlerPPci+0x128>
			led1state = atoi(args[2]);
     222:	8c 81       	ldd	r24, Y+4	; 0x04
     224:	9d 81       	ldd	r25, Y+5	; 0x05
     226:	0e 94 2b 0a 	call	0x1456	; 0x1456 <atoi>
     22a:	21 e0       	ldi	r18, 0x01	; 1
     22c:	89 2b       	or	r24, r25
     22e:	09 f4       	brne	.+2      	; 0x232 <_Z15command_handlerPPci+0x122>
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	20 93 75 01 	sts	0x0175, r18	; 0x800175 <led1state>
     236:	23 c0       	rjmp	.+70     	; 0x27e <_Z15command_handlerPPci+0x16e>
			ledstateupdate_flag = 1;
		}
		else if(!strcmp(args[1], "2")) {
     238:	67 e3       	ldi	r22, 0x37	; 55
     23a:	71 e0       	ldi	r23, 0x01	; 1
     23c:	c8 01       	movw	r24, r16
     23e:	0e 94 4e 0a 	call	0x149c	; 0x149c <strcmp>
     242:	89 2b       	or	r24, r25
     244:	59 f4       	brne	.+22     	; 0x25c <_Z15command_handlerPPci+0x14c>
			led2state = atoi(args[2]);
     246:	8c 81       	ldd	r24, Y+4	; 0x04
     248:	9d 81       	ldd	r25, Y+5	; 0x05
     24a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <atoi>
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	89 2b       	or	r24, r25
     252:	09 f4       	brne	.+2      	; 0x256 <_Z15command_handlerPPci+0x146>
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <led2state>
     25a:	11 c0       	rjmp	.+34     	; 0x27e <_Z15command_handlerPPci+0x16e>
			ledstateupdate_flag = 1;
		}
		else if(!strcmp(args[1], "3")) {
     25c:	69 e3       	ldi	r22, 0x39	; 57
     25e:	71 e0       	ldi	r23, 0x01	; 1
     260:	c8 01       	movw	r24, r16
     262:	0e 94 4e 0a 	call	0x149c	; 0x149c <strcmp>
     266:	89 2b       	or	r24, r25
     268:	69 f4       	brne	.+26     	; 0x284 <_Z15command_handlerPPci+0x174>
			led3state = atoi(args[2]);
     26a:	8c 81       	ldd	r24, Y+4	; 0x04
     26c:	9d 81       	ldd	r25, Y+5	; 0x05
     26e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <atoi>
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	89 2b       	or	r24, r25
     276:	09 f4       	brne	.+2      	; 0x27a <_Z15command_handlerPPci+0x16a>
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	20 93 73 01 	sts	0x0173, r18	; 0x800173 <led3state>
			ledstateupdate_flag = 1;
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <ledstateupdate_flag>
		}
		
	}
}
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	08 95       	ret

0000028e <_Z21command_parse_executePc>:

void command_parse_execute(char *command){
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	64 97       	sbiw	r28, 0x14	; 20
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	f8 94       	cli
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	cd bf       	out	0x3d, r28	; 61

	asm("nop");
     2ae:	00 00       	nop
	int arg_index = 0;
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
     2b0:	6b e3       	ldi	r22, 0x3B	; 59
     2b2:	71 e0       	ldi	r23, 0x01	; 1
     2b4:	0e 94 49 0a 	call	0x1492	; 0x1492 <strtok>
     2b8:	9e 01       	movw	r18, r28
     2ba:	2f 5f       	subi	r18, 0xFF	; 255
     2bc:	3f 4f       	sbci	r19, 0xFF	; 255
     2be:	79 01       	movw	r14, r18
}

void command_parse_execute(char *command){

	asm("nop");
	int arg_index = 0;
     2c0:	00 e0       	ldi	r16, 0x00	; 0
     2c2:	10 e0       	ldi	r17, 0x00	; 0
     2c4:	69 01       	movw	r12, r18
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
	while(pch != NULL) {
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	81 f0       	breq	.+32     	; 0x2ea <_Z21command_parse_executePc+0x5c>
		remotch_args[arg_index] = pch;
     2ca:	f7 01       	movw	r30, r14
     2cc:	81 93       	st	Z+, r24
     2ce:	91 93       	st	Z+, r25
     2d0:	7f 01       	movw	r14, r30
		arg_index++;
     2d2:	0f 5f       	subi	r16, 0xFF	; 255
     2d4:	1f 4f       	sbci	r17, 0xFF	; 255
		if(arg_index >=10) break;
     2d6:	0a 30       	cpi	r16, 0x0A	; 10
     2d8:	11 05       	cpc	r17, r1
     2da:	39 f0       	breq	.+14     	; 0x2ea <_Z21command_parse_executePc+0x5c>
		pch = strtok (NULL, " ,");
     2dc:	6b e3       	ldi	r22, 0x3B	; 59
     2de:	71 e0       	ldi	r23, 0x01	; 1
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 49 0a 	call	0x1492	; 0x1492 <strtok>
     2e8:	ee cf       	rjmp	.-36     	; 0x2c6 <_Z21command_parse_executePc+0x38>
	}
	command_handler(remotch_args,arg_index);
     2ea:	b8 01       	movw	r22, r16
     2ec:	c6 01       	movw	r24, r12
     2ee:	0e 94 88 00 	call	0x110	; 0x110 <_Z15command_handlerPPci>
}
     2f2:	64 96       	adiw	r28, 0x14	; 20
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	df 90       	pop	r13
     30c:	cf 90       	pop	r12
     30e:	08 95       	ret

00000310 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     310:	26 e0       	ldi	r18, 0x06	; 6
     312:	40 e8       	ldi	r20, 0x80	; 128
     314:	55 e2       	ldi	r21, 0x25	; 37
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	87 ef       	ldi	r24, 0xF7	; 247
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN14HardwareSerial5beginEmh>


void setup (void)
{
  Serial.begin (9600);   // debugging
  Serial.println ("starting system");
     322:	6e e3       	ldi	r22, 0x3E	; 62
     324:	71 e0       	ldi	r23, 0x01	; 1
     326:	87 ef       	ldi	r24, 0xF7	; 247
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	0e 94 d6 07 	call	0xfac	; 0xfac <_ZN5Print7printlnEPKc>
  
  cctvPitchServo.attach(5);  // attaches the servo on pin 9 to the servo object
     32e:	65 e0       	ldi	r22, 0x05	; 5
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	8e ec       	ldi	r24, 0xCE	; 206
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Servo6attachEi>
  cctvYawServo.attach(6);
     33a:	66 e0       	ldi	r22, 0x06	; 6
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	8b ec       	ldi	r24, 0xCB	; 203
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Servo6attachEi>

  cctvPitchServo.write(servo_pitch_pos);
     346:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <servo_pitch_pos>
     34a:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <servo_pitch_pos+0x1>
     34e:	8e ec       	ldi	r24, 0xCE	; 206
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN5Servo5writeEi>
  cctvYawServo.write(servo_yaw_pos);
     356:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <servo_yaw_pos>
     35a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <servo_yaw_pos+0x1>
     35e:	8b ec       	ldi	r24, 0xCB	; 203
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN5Servo5writeEi>

  // have to send on master in, *slave out*
  pinMode(MISO, OUTPUT);
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	8c e0       	ldi	r24, 0x0C	; 12
     36a:	0e 94 01 09 	call	0x1202	; 0x1202 <pinMode>
  
  
  // turn on SPI in slave mode
  SPCR |= _BV(SPE);
     36e:	8c b5       	in	r24, 0x2c	; 44
     370:	80 64       	ori	r24, 0x40	; 64
     372:	8c bd       	out	0x2c, r24	; 44
  
  // get ready for an interrupt 
  pos = 0;   // buffer empty
     374:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <pos>
  process_it = false;
     378:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <process_it>
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
  }
  // These undocumented functions should not be used.  SPI.transfer()
  // polls the hardware flag which is automatically cleared as the
  // AVR responds to SPI's interrupt
  inline static void attachInterrupt() { SPCR |= _BV(SPIE); }
     37c:	8c b5       	in	r24, 0x2c	; 44
     37e:	80 68       	ori	r24, 0x80	; 128
     380:	8c bd       	out	0x2c, r24	; 44

  // now turn on interrupts
  SPI.attachInterrupt();

	
	TCCR2B = /*_BV(CS22)| */_BV(CS21) | _BV(CS20);
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = 63;
     388:	8f e3       	ldi	r24, 0x3F	; 63
     38a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 0;
     38e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>

	pinMode(3, OUTPUT);
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	83 e0       	ldi	r24, 0x03	; 3
     396:	0e 94 01 09 	call	0x1202	; 0x1202 <pinMode>
	
	pinMode(7,OUTPUT);
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	87 e0       	ldi	r24, 0x07	; 7
     39e:	0e 94 01 09 	call	0x1202	; 0x1202 <pinMode>
	pinMode(8,OUTPUT);
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	88 e0       	ldi	r24, 0x08	; 8
     3a6:	0e 94 01 09 	call	0x1202	; 0x1202 <pinMode>
	pinMode(9,OUTPUT);
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	89 e0       	ldi	r24, 0x09	; 9
     3ae:	0e 94 01 09 	call	0x1202	; 0x1202 <pinMode>
	
	digitalWrite(7,LOW);
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	87 e0       	ldi	r24, 0x07	; 7
     3b6:	0e 94 3d 09 	call	0x127a	; 0x127a <digitalWrite>
	digitalWrite(8,LOW);
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	88 e0       	ldi	r24, 0x08	; 8
     3be:	0e 94 3d 09 	call	0x127a	; 0x127a <digitalWrite>
	digitalWrite(9,LOW);
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	89 e0       	ldi	r24, 0x09	; 9
     3c6:	0c 94 3d 09 	jmp	0x127a	; 0x127a <digitalWrite>

000003ca <__vector_17>:
}  // end of setup


// SPI interrupt routine
ISR (SPI_STC_vect)
{
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	8f 93       	push	r24
     3d6:	9f 93       	push	r25
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
byte c = SPDR;  // grab byte from SPI Data Register
     3dc:	8e b5       	in	r24, 0x2e	; 46
  // add to buffer if room
  if (pos < sizeof(buf))
     3de:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <pos>
     3e2:	90 34       	cpi	r25, 0x40	; 64
     3e4:	78 f4       	brcc	.+30     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
    {
    buf [pos++] = c;
     3e6:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <pos>
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	9e 0f       	add	r25, r30
     3ee:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <pos>
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	e5 57       	subi	r30, 0x75	; 117
     3f6:	fe 4f       	sbci	r31, 0xFE	; 254
     3f8:	80 83       	st	Z, r24
    
    // example: newline means time to process buffer
    if (c == '\n')
     3fa:	8a 30       	cpi	r24, 0x0A	; 10
     3fc:	19 f4       	brne	.+6      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
      process_it = true;
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <process_it>
      
    }  // end of room available
}  // end of interrupt routine SPI_STC_vect
     404:	ff 91       	pop	r31
     406:	ef 91       	pop	r30
     408:	9f 91       	pop	r25
     40a:	8f 91       	pop	r24
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <loop>:



void loop (void)
{
     416:	cf 92       	push	r12
     418:	df 92       	push	r13
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15

	if(ledstateupdate_flag){
     41e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <ledstateupdate_flag>
     422:	88 23       	and	r24, r24
     424:	01 f1       	breq	.+64     	; 0x466 <loop+0x50>
		if(led1state) digitalWrite(7,HIGH);
     426:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <led1state>
     42a:	88 23       	and	r24, r24
     42c:	11 f0       	breq	.+4      	; 0x432 <loop+0x1c>
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	01 c0       	rjmp	.+2      	; 0x434 <loop+0x1e>
		else digitalWrite(7,LOW);
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	87 e0       	ldi	r24, 0x07	; 7
     436:	0e 94 3d 09 	call	0x127a	; 0x127a <digitalWrite>
		
		if(led2state) digitalWrite(8,HIGH);
     43a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <led2state>
     43e:	88 23       	and	r24, r24
     440:	11 f0       	breq	.+4      	; 0x446 <loop+0x30>
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	01 c0       	rjmp	.+2      	; 0x448 <loop+0x32>
		else digitalWrite(8,LOW);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	88 e0       	ldi	r24, 0x08	; 8
     44a:	0e 94 3d 09 	call	0x127a	; 0x127a <digitalWrite>
		
		if(led3state) digitalWrite(9,HIGH);
     44e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <led3state>
     452:	88 23       	and	r24, r24
     454:	11 f0       	breq	.+4      	; 0x45a <loop+0x44>
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	01 c0       	rjmp	.+2      	; 0x45c <loop+0x46>
		else digitalWrite(9,LOW);
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	89 e0       	ldi	r24, 0x09	; 9
     45e:	0e 94 3d 09 	call	0x127a	; 0x127a <digitalWrite>
		
		ledstateupdate_flag = 0;
     462:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <ledstateupdate_flag>
	}
	
	
	
	
	if( (beep_request==1) && ( millis() - beep_timer) > beep_rate_ms ){
     466:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <beep_request>
     46a:	88 23       	and	r24, r24
     46c:	09 f4       	brne	.+2      	; 0x470 <loop+0x5a>
     46e:	3f c0       	rjmp	.+126    	; 0x4ee <loop+0xd8>
     470:	0e 94 32 08 	call	0x1064	; 0x1064 <millis>
     474:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     478:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     47c:	c0 90 78 01 	lds	r12, 0x0178	; 0x800178 <beep_timer>
     480:	d0 90 79 01 	lds	r13, 0x0179	; 0x800179 <beep_timer+0x1>
     484:	e0 90 7a 01 	lds	r14, 0x017A	; 0x80017a <beep_timer+0x2>
     488:	f0 90 7b 01 	lds	r15, 0x017B	; 0x80017b <beep_timer+0x3>
     48c:	ab 01       	movw	r20, r22
     48e:	bc 01       	movw	r22, r24
     490:	4c 19       	sub	r20, r12
     492:	5d 09       	sbc	r21, r13
     494:	6e 09       	sbc	r22, r14
     496:	7f 09       	sbc	r23, r15
     498:	c9 01       	movw	r24, r18
     49a:	33 0f       	add	r19, r19
     49c:	aa 0b       	sbc	r26, r26
     49e:	bb 0b       	sbc	r27, r27
     4a0:	84 17       	cp	r24, r20
     4a2:	95 07       	cpc	r25, r21
     4a4:	a6 07       	cpc	r26, r22
     4a6:	b7 07       	cpc	r27, r23
     4a8:	10 f5       	brcc	.+68     	; 0x4ee <loop+0xd8>
		beep_state = !beep_state;
     4aa:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <beep_state>
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	89 27       	eor	r24, r25
     4b2:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <beep_state>
		
		if(beep_state) {
     4b6:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <beep_state>
     4ba:	88 23       	and	r24, r24
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <loop+0xaa>
     4be:	fc c0       	rjmp	.+504    	; 0x6b8 <loop+0x2a2>
			analogWrite(3, 127);
     4c0:	6f e7       	ldi	r22, 0x7F	; 127
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	0e 94 79 08 	call	0x10f2	; 0x10f2 <analogWrite>
		else {
			analogWrite(3, 0);
			beep_times--;
		}
		
		if(beep_times==0){
     4ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <beep_times>
     4ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <beep_times+0x1>
     4d2:	89 2b       	or	r24, r25
     4d4:	11 f4       	brne	.+4      	; 0x4da <loop+0xc4>
			beep_request = 0;
     4d6:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <beep_request>
		}
		
		beep_timer = millis();
     4da:	0e 94 32 08 	call	0x1064	; 0x1064 <millis>
     4de:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <beep_timer>
     4e2:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <beep_timer+0x1>
     4e6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <beep_timer+0x2>
     4ea:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <beep_timer+0x3>
		//beep_request = 0;
	}
	
	
	  if (process_it)
     4ee:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <process_it>
     4f2:	88 23       	and	r24, r24
     4f4:	a1 f0       	breq	.+40     	; 0x51e <loop+0x108>
		{
		buf [pos] = 0;  
     4f6:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <pos>
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	e5 57       	subi	r30, 0x75	; 117
     4fe:	fe 4f       	sbci	r31, 0xFE	; 254
     500:	10 82       	st	Z, r1
		pos = 0;
     502:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <pos>
		Serial.println (buf);
     506:	6b e8       	ldi	r22, 0x8B	; 139
     508:	71 e0       	ldi	r23, 0x01	; 1
     50a:	87 ef       	ldi	r24, 0xF7	; 247
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 d6 07 	call	0xfac	; 0xfac <_ZN5Print7printlnEPKc>
		command_parse_execute(buf);
     512:	8b e8       	ldi	r24, 0x8B	; 139
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	0e 94 47 01 	call	0x28e	; 0x28e <_Z21command_parse_executePc>
    
		process_it = false;
     51a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <process_it>
		}  // end of flag set
    

	
		if((servo_pitch_pos_last > servo_pitch_pos) && (millis() - cctv_pitch_timer > (1000-servo_speed)) ){
     51e:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <servo_pitch_pos_last>
     522:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <servo_pitch_pos_last+0x1>
     526:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <servo_pitch_pos>
     52a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <servo_pitch_pos+0x1>
     52e:	82 17       	cp	r24, r18
     530:	93 07       	cpc	r25, r19
     532:	14 f5       	brge	.+68     	; 0x578 <loop+0x162>
     534:	0e 94 32 08 	call	0x1064	; 0x1064 <millis>
     538:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <servo_speed>
     53c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <servo_speed+0x1>
     540:	c0 90 80 01 	lds	r12, 0x0180	; 0x800180 <cctv_pitch_timer>
     544:	d0 90 81 01 	lds	r13, 0x0181	; 0x800181 <cctv_pitch_timer+0x1>
     548:	e0 90 82 01 	lds	r14, 0x0182	; 0x800182 <cctv_pitch_timer+0x2>
     54c:	f0 90 83 01 	lds	r15, 0x0183	; 0x800183 <cctv_pitch_timer+0x3>
     550:	ab 01       	movw	r20, r22
     552:	bc 01       	movw	r22, r24
     554:	4c 19       	sub	r20, r12
     556:	5d 09       	sbc	r21, r13
     558:	6e 09       	sbc	r22, r14
     55a:	7f 09       	sbc	r23, r15
     55c:	88 ee       	ldi	r24, 0xE8	; 232
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	82 1b       	sub	r24, r18
     562:	93 0b       	sbc	r25, r19
     564:	09 2e       	mov	r0, r25
     566:	00 0c       	add	r0, r0
     568:	aa 0b       	sbc	r26, r26
     56a:	bb 0b       	sbc	r27, r27
     56c:	84 17       	cp	r24, r20
     56e:	95 07       	cpc	r25, r21
     570:	a6 07       	cpc	r26, r22
     572:	b7 07       	cpc	r27, r23
     574:	08 f4       	brcc	.+2      	; 0x578 <loop+0x162>
     576:	af c0       	rjmp	.+350    	; 0x6d6 <loop+0x2c0>
			servo_pitch_pos_last--;
			cctv_pitch_timer = millis();
		}
	
		if((servo_pitch_pos_last < servo_pitch_pos) && (millis() - cctv_pitch_timer > (1000-servo_speed)) ){
     578:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <servo_pitch_pos_last>
     57c:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <servo_pitch_pos_last+0x1>
     580:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <servo_pitch_pos>
     584:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <servo_pitch_pos+0x1>
     588:	28 17       	cp	r18, r24
     58a:	39 07       	cpc	r19, r25
     58c:	14 f5       	brge	.+68     	; 0x5d2 <loop+0x1bc>
     58e:	0e 94 32 08 	call	0x1064	; 0x1064 <millis>
     592:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <servo_speed>
     596:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <servo_speed+0x1>
     59a:	c0 90 80 01 	lds	r12, 0x0180	; 0x800180 <cctv_pitch_timer>
     59e:	d0 90 81 01 	lds	r13, 0x0181	; 0x800181 <cctv_pitch_timer+0x1>
     5a2:	e0 90 82 01 	lds	r14, 0x0182	; 0x800182 <cctv_pitch_timer+0x2>
     5a6:	f0 90 83 01 	lds	r15, 0x0183	; 0x800183 <cctv_pitch_timer+0x3>
     5aa:	ab 01       	movw	r20, r22
     5ac:	bc 01       	movw	r22, r24
     5ae:	4c 19       	sub	r20, r12
     5b0:	5d 09       	sbc	r21, r13
     5b2:	6e 09       	sbc	r22, r14
     5b4:	7f 09       	sbc	r23, r15
     5b6:	88 ee       	ldi	r24, 0xE8	; 232
     5b8:	93 e0       	ldi	r25, 0x03	; 3
     5ba:	82 1b       	sub	r24, r18
     5bc:	93 0b       	sbc	r25, r19
     5be:	09 2e       	mov	r0, r25
     5c0:	00 0c       	add	r0, r0
     5c2:	aa 0b       	sbc	r26, r26
     5c4:	bb 0b       	sbc	r27, r27
     5c6:	84 17       	cp	r24, r20
     5c8:	95 07       	cpc	r25, r21
     5ca:	a6 07       	cpc	r26, r22
     5cc:	b7 07       	cpc	r27, r23
     5ce:	08 f4       	brcc	.+2      	; 0x5d2 <loop+0x1bc>
     5d0:	96 c0       	rjmp	.+300    	; 0x6fe <loop+0x2e8>
			servo_pitch_pos_last++;
			cctv_pitch_timer = millis();
		}
	
		if((servo_yaw_pos_last > servo_yaw_pos) && (millis() - cctv_yaw_timer > (1000-servo_speed)) ){
     5d2:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <servo_yaw_pos_last>
     5d6:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <servo_yaw_pos_last+0x1>
     5da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servo_yaw_pos>
     5de:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <servo_yaw_pos+0x1>
     5e2:	82 17       	cp	r24, r18
     5e4:	93 07       	cpc	r25, r19
     5e6:	14 f5       	brge	.+68     	; 0x62c <loop+0x216>
     5e8:	0e 94 32 08 	call	0x1064	; 0x1064 <millis>
     5ec:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <servo_speed>
     5f0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <servo_speed+0x1>
     5f4:	c0 90 7c 01 	lds	r12, 0x017C	; 0x80017c <cctv_yaw_timer>
     5f8:	d0 90 7d 01 	lds	r13, 0x017D	; 0x80017d <cctv_yaw_timer+0x1>
     5fc:	e0 90 7e 01 	lds	r14, 0x017E	; 0x80017e <cctv_yaw_timer+0x2>
     600:	f0 90 7f 01 	lds	r15, 0x017F	; 0x80017f <cctv_yaw_timer+0x3>
     604:	ab 01       	movw	r20, r22
     606:	bc 01       	movw	r22, r24
     608:	4c 19       	sub	r20, r12
     60a:	5d 09       	sbc	r21, r13
     60c:	6e 09       	sbc	r22, r14
     60e:	7f 09       	sbc	r23, r15
     610:	88 ee       	ldi	r24, 0xE8	; 232
     612:	93 e0       	ldi	r25, 0x03	; 3
     614:	82 1b       	sub	r24, r18
     616:	93 0b       	sbc	r25, r19
     618:	09 2e       	mov	r0, r25
     61a:	00 0c       	add	r0, r0
     61c:	aa 0b       	sbc	r26, r26
     61e:	bb 0b       	sbc	r27, r27
     620:	84 17       	cp	r24, r20
     622:	95 07       	cpc	r25, r21
     624:	a6 07       	cpc	r26, r22
     626:	b7 07       	cpc	r27, r23
     628:	08 f4       	brcc	.+2      	; 0x62c <loop+0x216>
     62a:	7d c0       	rjmp	.+250    	; 0x726 <loop+0x310>
			servo_yaw_pos_last--;
			cctv_yaw_timer = millis();
		}
	
		if((servo_yaw_pos_last < servo_yaw_pos) && (millis() - cctv_yaw_timer > (1000-servo_speed)) ){
     62c:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <servo_yaw_pos_last>
     630:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <servo_yaw_pos_last+0x1>
     634:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servo_yaw_pos>
     638:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <servo_yaw_pos+0x1>
     63c:	28 17       	cp	r18, r24
     63e:	39 07       	cpc	r19, r25
     640:	14 f5       	brge	.+68     	; 0x686 <loop+0x270>
     642:	0e 94 32 08 	call	0x1064	; 0x1064 <millis>
     646:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <servo_speed>
     64a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <servo_speed+0x1>
     64e:	c0 90 7c 01 	lds	r12, 0x017C	; 0x80017c <cctv_yaw_timer>
     652:	d0 90 7d 01 	lds	r13, 0x017D	; 0x80017d <cctv_yaw_timer+0x1>
     656:	e0 90 7e 01 	lds	r14, 0x017E	; 0x80017e <cctv_yaw_timer+0x2>
     65a:	f0 90 7f 01 	lds	r15, 0x017F	; 0x80017f <cctv_yaw_timer+0x3>
     65e:	ab 01       	movw	r20, r22
     660:	bc 01       	movw	r22, r24
     662:	4c 19       	sub	r20, r12
     664:	5d 09       	sbc	r21, r13
     666:	6e 09       	sbc	r22, r14
     668:	7f 09       	sbc	r23, r15
     66a:	88 ee       	ldi	r24, 0xE8	; 232
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	82 1b       	sub	r24, r18
     670:	93 0b       	sbc	r25, r19
     672:	09 2e       	mov	r0, r25
     674:	00 0c       	add	r0, r0
     676:	aa 0b       	sbc	r26, r26
     678:	bb 0b       	sbc	r27, r27
     67a:	84 17       	cp	r24, r20
     67c:	95 07       	cpc	r25, r21
     67e:	a6 07       	cpc	r26, r22
     680:	b7 07       	cpc	r27, r23
     682:	08 f4       	brcc	.+2      	; 0x686 <loop+0x270>
     684:	64 c0       	rjmp	.+200    	; 0x74e <loop+0x338>
			servo_yaw_pos_last++;
			cctv_yaw_timer = millis();
		}

		if(servo_pos_update_flag){
     686:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <servo_pos_update_flag>
     68a:	88 23       	and	r24, r24
     68c:	09 f4       	brne	.+2      	; 0x690 <loop+0x27a>
     68e:	73 c0       	rjmp	.+230    	; 0x776 <loop+0x360>
			cctvPitchServo.write(servo_pitch_pos_last);
     690:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <servo_pitch_pos_last>
     694:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <servo_pitch_pos_last+0x1>
     698:	8e ec       	ldi	r24, 0xCE	; 206
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN5Servo5writeEi>
			cctvYawServo.write(servo_yaw_pos_last);
     6a0:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <servo_yaw_pos_last>
     6a4:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <servo_yaw_pos_last+0x1>
     6a8:	8b ec       	ldi	r24, 0xCB	; 203
     6aa:	91 e0       	ldi	r25, 0x01	; 1
			//servo_pos_update_flag = 0;
		}
	
	
	
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
			cctv_yaw_timer = millis();
		}

		if(servo_pos_update_flag){
			cctvPitchServo.write(servo_pitch_pos_last);
			cctvYawServo.write(servo_yaw_pos_last);
     6b4:	0c 94 71 05 	jmp	0xae2	; 0xae2 <_ZN5Servo5writeEi>
		
		if(beep_state) {
			analogWrite(3, 127);
		}
		else {
			analogWrite(3, 0);
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	0e 94 79 08 	call	0x10f2	; 0x10f2 <analogWrite>
			beep_times--;
     6c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <beep_times>
     6c6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <beep_times+0x1>
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <beep_times+0x1>
     6d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <beep_times>
     6d4:	fa ce       	rjmp	.-524    	; 0x4ca <loop+0xb4>
		}  // end of flag set
    

	
		if((servo_pitch_pos_last > servo_pitch_pos) && (millis() - cctv_pitch_timer > (1000-servo_speed)) ){
			servo_pitch_pos_last--;
     6d6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <servo_pitch_pos_last>
     6da:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <servo_pitch_pos_last+0x1>
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <servo_pitch_pos_last+0x1>
     6e4:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <servo_pitch_pos_last>
			cctv_pitch_timer = millis();
     6e8:	0e 94 32 08 	call	0x1064	; 0x1064 <millis>
     6ec:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <cctv_pitch_timer>
     6f0:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <cctv_pitch_timer+0x1>
     6f4:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <cctv_pitch_timer+0x2>
     6f8:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <cctv_pitch_timer+0x3>
     6fc:	3d cf       	rjmp	.-390    	; 0x578 <loop+0x162>
		}
	
		if((servo_pitch_pos_last < servo_pitch_pos) && (millis() - cctv_pitch_timer > (1000-servo_speed)) ){
			servo_pitch_pos_last++;
     6fe:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <servo_pitch_pos_last>
     702:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <servo_pitch_pos_last+0x1>
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <servo_pitch_pos_last+0x1>
     70c:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <servo_pitch_pos_last>
			cctv_pitch_timer = millis();
     710:	0e 94 32 08 	call	0x1064	; 0x1064 <millis>
     714:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <cctv_pitch_timer>
     718:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <cctv_pitch_timer+0x1>
     71c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <cctv_pitch_timer+0x2>
     720:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <cctv_pitch_timer+0x3>
     724:	56 cf       	rjmp	.-340    	; 0x5d2 <loop+0x1bc>
		}
	
		if((servo_yaw_pos_last > servo_yaw_pos) && (millis() - cctv_yaw_timer > (1000-servo_speed)) ){
			servo_yaw_pos_last--;
     726:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <servo_yaw_pos_last>
     72a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <servo_yaw_pos_last+0x1>
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <servo_yaw_pos_last+0x1>
     734:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <servo_yaw_pos_last>
			cctv_yaw_timer = millis();
     738:	0e 94 32 08 	call	0x1064	; 0x1064 <millis>
     73c:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <cctv_yaw_timer>
     740:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <cctv_yaw_timer+0x1>
     744:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <cctv_yaw_timer+0x2>
     748:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <cctv_yaw_timer+0x3>
     74c:	6f cf       	rjmp	.-290    	; 0x62c <loop+0x216>
		}
	
		if((servo_yaw_pos_last < servo_yaw_pos) && (millis() - cctv_yaw_timer > (1000-servo_speed)) ){
			servo_yaw_pos_last++;
     74e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <servo_yaw_pos_last>
     752:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <servo_yaw_pos_last+0x1>
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <servo_yaw_pos_last+0x1>
     75c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <servo_yaw_pos_last>
			cctv_yaw_timer = millis();
     760:	0e 94 32 08 	call	0x1064	; 0x1064 <millis>
     764:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <cctv_yaw_timer>
     768:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <cctv_yaw_timer+0x1>
     76c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <cctv_yaw_timer+0x2>
     770:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <cctv_yaw_timer+0x3>
     774:	88 cf       	rjmp	.-240    	; 0x686 <loop+0x270>
			//servo_pos_update_flag = 0;
		}
	
	
	
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	08 95       	ret

00000780 <_GLOBAL__sub_I_cctvPitchServo>:
 */

#include <SPI.h>
#include <Servo.h>

Servo cctvPitchServo;  // create servo object to control a servo
     780:	8e ec       	ldi	r24, 0xCE	; 206
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 9a 04 	call	0x934	; 0x934 <_ZN5ServoC1Ev>
Servo cctvYawServo;  // create servo object to control a servo
     788:	8b ec       	ldi	r24, 0xCB	; 203
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 9a 04 	call	0x934	; 0x934 <_ZN5ServoC1Ev>
volatile boolean process_it;

volatile int servo_speed = 1000;
volatile int servo_pitch_pos = 60;
volatile int servo_yaw_pos = 90;
volatile int servo_pitch_pos_last = servo_pitch_pos;
     790:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <servo_pitch_pos>
     794:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <servo_pitch_pos+0x1>
     798:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <servo_pitch_pos_last+0x1>
     79c:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <servo_pitch_pos_last>
volatile int servo_yaw_pos_last = servo_yaw_pos;
     7a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servo_yaw_pos>
     7a4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <servo_yaw_pos+0x1>
     7a8:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <servo_yaw_pos_last+0x1>
     7ac:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <servo_yaw_pos_last>
     7b0:	08 95       	ret

000007b2 <__vector_11>:
  return this->servoIndex ;
}

void Servo::detach()
{
  servos[this->servoIndex].Pin.isActive = false;
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	0f 92       	push	r0
     7ba:	11 24       	eor	r1, r1
     7bc:	2f 93       	push	r18
     7be:	3f 93       	push	r19
     7c0:	4f 93       	push	r20
     7c2:	5f 93       	push	r21
     7c4:	6f 93       	push	r22
     7c6:	7f 93       	push	r23
     7c8:	8f 93       	push	r24
     7ca:	9f 93       	push	r25
     7cc:	af 93       	push	r26
     7ce:	bf 93       	push	r27
     7d0:	ef 93       	push	r30
     7d2:	ff 93       	push	r31
     7d4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <_ZL7Channel>
     7d8:	87 ff       	sbrs	r24, 7
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <__vector_11+0x34>
     7dc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     7e0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     7e4:	1b c0       	rjmp	.+54     	; 0x81c <__vector_11+0x6a>
     7e6:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <_ZL7Channel>
     7ea:	02 2e       	mov	r0, r18
     7ec:	00 0c       	add	r0, r0
     7ee:	33 0b       	sbc	r19, r19
     7f0:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ServoCount>
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	28 17       	cp	r18, r24
     7f8:	39 07       	cpc	r19, r25
     7fa:	84 f4       	brge	.+32     	; 0x81c <__vector_11+0x6a>
     7fc:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <_ZL7Channel>
     800:	08 2e       	mov	r0, r24
     802:	00 0c       	add	r0, r0
     804:	99 0b       	sbc	r25, r25
     806:	fc 01       	movw	r30, r24
     808:	ee 0f       	add	r30, r30
     80a:	ff 1f       	adc	r31, r31
     80c:	8e 0f       	add	r24, r30
     80e:	9f 1f       	adc	r25, r31
     810:	fc 01       	movw	r30, r24
     812:	ed 52       	subi	r30, 0x2D	; 45
     814:	fe 4f       	sbci	r31, 0xFE	; 254
     816:	80 81       	ld	r24, Z
     818:	86 fd       	sbrc	r24, 6
     81a:	15 c0       	rjmp	.+42     	; 0x846 <__vector_11+0x94>
     81c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <_ZL7Channel>
     820:	8f 5f       	subi	r24, 0xFF	; 255
     822:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <_ZL7Channel>
     826:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <_ZL7Channel>
     82a:	02 2e       	mov	r0, r18
     82c:	00 0c       	add	r0, r0
     82e:	33 0b       	sbc	r19, r19
     830:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ServoCount>
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	28 17       	cp	r18, r24
     838:	39 07       	cpc	r19, r25
     83a:	c4 f4       	brge	.+48     	; 0x86c <__vector_11+0xba>
     83c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <_ZL7Channel>
     840:	8c 30       	cpi	r24, 0x0C	; 12
     842:	64 f1       	brlt	.+88     	; 0x89c <__vector_11+0xea>
     844:	13 c0       	rjmp	.+38     	; 0x86c <__vector_11+0xba>
     846:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <_ZL7Channel>
     84a:	08 2e       	mov	r0, r24
     84c:	00 0c       	add	r0, r0
     84e:	99 0b       	sbc	r25, r25
     850:	fc 01       	movw	r30, r24
     852:	ee 0f       	add	r30, r30
     854:	ff 1f       	adc	r31, r31
     856:	8e 0f       	add	r24, r30
     858:	9f 1f       	adc	r25, r31
     85a:	fc 01       	movw	r30, r24
     85c:	ed 52       	subi	r30, 0x2D	; 45
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
     860:	80 81       	ld	r24, Z
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	8f 73       	andi	r24, 0x3F	; 63
     866:	0e 94 3d 09 	call	0x127a	; 0x127a <digitalWrite>
     86a:	d8 cf       	rjmp	.-80     	; 0x81c <__vector_11+0x6a>
     86c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     870:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     874:	04 96       	adiw	r24, 0x04	; 4
     876:	80 32       	cpi	r24, 0x20	; 32
     878:	9e 44       	sbci	r25, 0x4E	; 78
     87a:	18 f4       	brcc	.+6      	; 0x882 <__vector_11+0xd0>
     87c:	80 e2       	ldi	r24, 0x20	; 32
     87e:	9e e4       	ldi	r25, 0x4E	; 78
     880:	05 c0       	rjmp	.+10     	; 0x88c <__vector_11+0xda>
     882:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     886:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     88a:	04 96       	adiw	r24, 0x04	; 4
     88c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     890:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     894:	8f ef       	ldi	r24, 0xFF	; 255
     896:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <_ZL7Channel>
     89a:	3b c0       	rjmp	.+118    	; 0x912 <__stack+0x13>
     89c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     8a0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     8a4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <_ZL7Channel>
     8a8:	08 2e       	mov	r0, r24
     8aa:	00 0c       	add	r0, r0
     8ac:	99 0b       	sbc	r25, r25
     8ae:	fc 01       	movw	r30, r24
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	8e 0f       	add	r24, r30
     8b6:	9f 1f       	adc	r25, r31
     8b8:	fc 01       	movw	r30, r24
     8ba:	ed 52       	subi	r30, 0x2D	; 45
     8bc:	fe 4f       	sbci	r31, 0xFE	; 254
     8be:	81 81       	ldd	r24, Z+1	; 0x01
     8c0:	92 81       	ldd	r25, Z+2	; 0x02
     8c2:	82 0f       	add	r24, r18
     8c4:	93 1f       	adc	r25, r19
     8c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     8ce:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <_ZL7Channel>
     8d2:	08 2e       	mov	r0, r24
     8d4:	00 0c       	add	r0, r0
     8d6:	99 0b       	sbc	r25, r25
     8d8:	fc 01       	movw	r30, r24
     8da:	ee 0f       	add	r30, r30
     8dc:	ff 1f       	adc	r31, r31
     8de:	8e 0f       	add	r24, r30
     8e0:	9f 1f       	adc	r25, r31
     8e2:	fc 01       	movw	r30, r24
     8e4:	ed 52       	subi	r30, 0x2D	; 45
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254
     8e8:	80 81       	ld	r24, Z
     8ea:	86 ff       	sbrs	r24, 6
     8ec:	12 c0       	rjmp	.+36     	; 0x912 <__stack+0x13>
     8ee:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <_ZL7Channel>
     8f2:	08 2e       	mov	r0, r24
     8f4:	00 0c       	add	r0, r0
     8f6:	99 0b       	sbc	r25, r25
     8f8:	fc 01       	movw	r30, r24
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	8e 0f       	add	r24, r30
     900:	9f 1f       	adc	r25, r31
     902:	fc 01       	movw	r30, r24
     904:	ed 52       	subi	r30, 0x2D	; 45
     906:	fe 4f       	sbci	r31, 0xFE	; 254
     908:	80 81       	ld	r24, Z
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	8f 73       	andi	r24, 0x3F	; 63
     90e:	0e 94 3d 09 	call	0x127a	; 0x127a <digitalWrite>
     912:	ff 91       	pop	r31
     914:	ef 91       	pop	r30
     916:	bf 91       	pop	r27
     918:	af 91       	pop	r26
     91a:	9f 91       	pop	r25
     91c:	8f 91       	pop	r24
     91e:	7f 91       	pop	r23
     920:	6f 91       	pop	r22
     922:	5f 91       	pop	r21
     924:	4f 91       	pop	r20
     926:	3f 91       	pop	r19
     928:	2f 91       	pop	r18
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <_ZN5ServoC1Ev>:
     934:	fc 01       	movw	r30, r24
     936:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <ServoCount>
     93a:	9c 30       	cpi	r25, 0x0C	; 12
     93c:	a0 f4       	brcc	.+40     	; 0x966 <_ZN5ServoC1Ev+0x32>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	89 0f       	add	r24, r25
     942:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <ServoCount>
     946:	90 83       	st	Z, r25
     948:	89 2f       	mov	r24, r25
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	fc 01       	movw	r30, r24
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	8e 0f       	add	r24, r30
     954:	9f 1f       	adc	r25, r31
     956:	fc 01       	movw	r30, r24
     958:	ed 52       	subi	r30, 0x2D	; 45
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	8c ed       	ldi	r24, 0xDC	; 220
     95e:	95 e0       	ldi	r25, 0x05	; 5
     960:	92 83       	std	Z+2, r25	; 0x02
     962:	81 83       	std	Z+1, r24	; 0x01
     964:	08 95       	ret
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	80 83       	st	Z, r24
     96a:	08 95       	ret

0000096c <_ZN5Servo6attachEiii>:
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	ec 01       	movw	r28, r24
     97c:	d6 2e       	mov	r13, r22
     97e:	7a 01       	movw	r14, r20
     980:	89 01       	movw	r16, r18
     982:	88 81       	ld	r24, Y
     984:	8c 30       	cpi	r24, 0x0C	; 12
     986:	08 f0       	brcs	.+2      	; 0x98a <_ZN5Servo6attachEiii+0x1e>
     988:	6a c0       	rjmp	.+212    	; 0xa5e <_ZN5Servo6attachEiii+0xf2>
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	8d 2d       	mov	r24, r13
     98e:	0e 94 01 09 	call	0x1202	; 0x1202 <pinMode>
     992:	88 81       	ld	r24, Y
     994:	e8 2f       	mov	r30, r24
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	9f 01       	movw	r18, r30
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	e2 0f       	add	r30, r18
     9a0:	f3 1f       	adc	r31, r19
     9a2:	ed 52       	subi	r30, 0x2D	; 45
     9a4:	fe 4f       	sbci	r31, 0xFE	; 254
     9a6:	9d 2d       	mov	r25, r13
     9a8:	9f 73       	andi	r25, 0x3F	; 63
     9aa:	20 81       	ld	r18, Z
     9ac:	20 7c       	andi	r18, 0xC0	; 192
     9ae:	d2 2e       	mov	r13, r18
     9b0:	d9 2a       	or	r13, r25
     9b2:	d0 82       	st	Z, r13
     9b4:	60 e2       	ldi	r22, 0x20	; 32
     9b6:	72 e0       	ldi	r23, 0x02	; 2
     9b8:	ab 01       	movw	r20, r22
     9ba:	4e 19       	sub	r20, r14
     9bc:	5f 09       	sbc	r21, r15
     9be:	57 ff       	sbrs	r21, 7
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <_ZN5Servo6attachEiii+0x5a>
     9c2:	4d 5f       	subi	r20, 0xFD	; 253
     9c4:	5f 4f       	sbci	r21, 0xFF	; 255
     9c6:	55 95       	asr	r21
     9c8:	47 95       	ror	r20
     9ca:	55 95       	asr	r21
     9cc:	47 95       	ror	r20
     9ce:	49 83       	std	Y+1, r20	; 0x01
     9d0:	40 e6       	ldi	r20, 0x60	; 96
     9d2:	59 e0       	ldi	r21, 0x09	; 9
     9d4:	9a 01       	movw	r18, r20
     9d6:	20 1b       	sub	r18, r16
     9d8:	31 0b       	sbc	r19, r17
     9da:	37 ff       	sbrs	r19, 7
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <_ZN5Servo6attachEiii+0x76>
     9de:	2d 5f       	subi	r18, 0xFD	; 253
     9e0:	3f 4f       	sbci	r19, 0xFF	; 255
     9e2:	35 95       	asr	r19
     9e4:	27 95       	ror	r18
     9e6:	35 95       	asr	r19
     9e8:	27 95       	ror	r18
     9ea:	2a 83       	std	Y+2, r18	; 0x02
     9ec:	2c e0       	ldi	r18, 0x0C	; 12
     9ee:	62 2f       	mov	r22, r18
     9f0:	0e 94 be 09 	call	0x137c	; 0x137c <__udivmodqi4>
     9f4:	28 9f       	mul	r18, r24
     9f6:	b0 01       	movw	r22, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	9a 01       	movw	r18, r20
     a00:	26 0f       	add	r18, r22
     a02:	37 1f       	adc	r19, r23
     a04:	f9 01       	movw	r30, r18
     a06:	ee 0f       	add	r30, r30
     a08:	ff 1f       	adc	r31, r31
     a0a:	2e 0f       	add	r18, r30
     a0c:	3f 1f       	adc	r19, r31
     a0e:	f9 01       	movw	r30, r18
     a10:	ed 52       	subi	r30, 0x2D	; 45
     a12:	fe 4f       	sbci	r31, 0xFE	; 254
     a14:	90 81       	ld	r25, Z
     a16:	96 fd       	sbrc	r25, 6
     a18:	16 c0       	rjmp	.+44     	; 0xa46 <_ZN5Servo6attachEiii+0xda>
     a1a:	4f 5f       	subi	r20, 0xFF	; 255
     a1c:	5f 4f       	sbci	r21, 0xFF	; 255
     a1e:	4c 30       	cpi	r20, 0x0C	; 12
     a20:	51 05       	cpc	r21, r1
     a22:	69 f7       	brne	.-38     	; 0x9fe <_ZN5Servo6attachEiii+0x92>
     a24:	81 11       	cpse	r24, r1
     a26:	0f c0       	rjmp	.+30     	; 0xa46 <_ZN5Servo6attachEiii+0xda>
     a28:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     a32:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a36:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a3a:	b1 9a       	sbi	0x16, 1	; 22
     a3c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     a40:	82 60       	ori	r24, 0x02	; 2
     a42:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     a46:	e8 81       	ld	r30, Y
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	cf 01       	movw	r24, r30
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	e8 0f       	add	r30, r24
     a52:	f9 1f       	adc	r31, r25
     a54:	ed 52       	subi	r30, 0x2D	; 45
     a56:	fe 4f       	sbci	r31, 0xFE	; 254
     a58:	80 81       	ld	r24, Z
     a5a:	80 64       	ori	r24, 0x40	; 64
     a5c:	80 83       	st	Z, r24
     a5e:	88 81       	ld	r24, Y
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	08 95       	ret

00000a70 <_ZN5Servo6attachEi>:
     a70:	20 e6       	ldi	r18, 0x60	; 96
     a72:	39 e0       	ldi	r19, 0x09	; 9
     a74:	40 e2       	ldi	r20, 0x20	; 32
     a76:	52 e0       	ldi	r21, 0x02	; 2
     a78:	0c 94 b6 04 	jmp	0x96c	; 0x96c <_ZN5Servo6attachEiii>

00000a7c <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
     a7c:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     a7e:	90 81       	ld	r25, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     a80:	9c 30       	cpi	r25, 0x0C	; 12
     a82:	70 f5       	brcc	.+92     	; 0xae0 <_ZN5Servo17writeMicrosecondsEi+0x64>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     a84:	81 81       	ldd	r24, Z+1	; 0x01
     a86:	28 e8       	ldi	r18, 0x88	; 136
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	28 1b       	sub	r18, r24
     a8c:	31 09       	sbc	r19, r1
     a8e:	87 fd       	sbrc	r24, 7
     a90:	33 95       	inc	r19
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	22 0f       	add	r18, r18
     a98:	33 1f       	adc	r19, r19
     a9a:	62 17       	cp	r22, r18
     a9c:	73 07       	cpc	r23, r19
     a9e:	7c f0       	brlt	.+30     	; 0xabe <_ZN5Servo17writeMicrosecondsEi+0x42>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
     aa0:	82 81       	ldd	r24, Z+2	; 0x02
     aa2:	28 e5       	ldi	r18, 0x58	; 88
     aa4:	32 e0       	ldi	r19, 0x02	; 2
     aa6:	28 1b       	sub	r18, r24
     aa8:	31 09       	sbc	r19, r1
     aaa:	87 fd       	sbrc	r24, 7
     aac:	33 95       	inc	r19
     aae:	22 0f       	add	r18, r18
     ab0:	33 1f       	adc	r19, r19
     ab2:	22 0f       	add	r18, r18
     ab4:	33 1f       	adc	r19, r19
     ab6:	62 17       	cp	r22, r18
     ab8:	73 07       	cpc	r23, r19
     aba:	0c f4       	brge	.+2      	; 0xabe <_ZN5Servo17writeMicrosecondsEi+0x42>
     abc:	9b 01       	movw	r18, r22
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009

    uint8_t oldSREG = SREG;
     abe:	4f b7       	in	r20, 0x3f	; 63
    cli();
     ac0:	f8 94       	cli
    servos[channel].ticks = value;
     ac2:	89 2f       	mov	r24, r25
     ac4:	90 e0       	ldi	r25, 0x00	; 0
    if( value < SERVO_MIN() )          // ensure pulse width is valid
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
     ac6:	22 50       	subi	r18, 0x02	; 2
     ac8:	31 09       	sbc	r19, r1
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009

    uint8_t oldSREG = SREG;
    cli();
    servos[channel].ticks = value;
     aca:	fc 01       	movw	r30, r24
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	8e 0f       	add	r24, r30
     ad2:	9f 1f       	adc	r25, r31
     ad4:	fc 01       	movw	r30, r24
     ad6:	ed 52       	subi	r30, 0x2D	; 45
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	32 83       	std	Z+2, r19	; 0x02
     adc:	21 83       	std	Z+1, r18	; 0x01
    SREG = oldSREG;
     ade:	4f bf       	out	0x3f, r20	; 63
     ae0:	08 95       	ret

00000ae2 <_ZN5Servo5writeEi>:
    finISR(timer);
  }
}

void Servo::write(int value)
{
     ae2:	af 92       	push	r10
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	ec 01       	movw	r28, r24
  if(value < MIN_PULSE_WIDTH)
     af8:	60 32       	cpi	r22, 0x20	; 32
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	78 07       	cpc	r23, r24
     afe:	0c f0       	brlt	.+2      	; 0xb02 <_ZN5Servo5writeEi+0x20>
     b00:	3f c0       	rjmp	.+126    	; 0xb80 <_ZN5Servo5writeEi+0x9e>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
     b02:	77 fd       	sbrc	r23, 7
     b04:	06 c0       	rjmp	.+12     	; 0xb12 <_ZN5Servo5writeEi+0x30>
    if(value > 180) value = 180;
     b06:	65 3b       	cpi	r22, 0xB5	; 181
     b08:	71 05       	cpc	r23, r1
     b0a:	2c f0       	brlt	.+10     	; 0xb16 <_ZN5Servo5writeEi+0x34>
     b0c:	64 eb       	ldi	r22, 0xB4	; 180
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <_ZN5Servo5writeEi+0x34>

void Servo::write(int value)
{
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	70 e0       	ldi	r23, 0x00	; 0
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	28 e8       	ldi	r18, 0x88	; 136
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	59 01       	movw	r10, r18
     b1e:	a8 1a       	sub	r10, r24
     b20:	b1 08       	sbc	r11, r1
     b22:	87 fd       	sbrc	r24, 7
     b24:	b3 94       	inc	r11
     b26:	aa 0c       	add	r10, r10
     b28:	bb 1c       	adc	r11, r11
     b2a:	aa 0c       	add	r10, r10
     b2c:	bb 1c       	adc	r11, r11
     b2e:	0b 2c       	mov	r0, r11
     b30:	00 0c       	add	r0, r0
     b32:	cc 08       	sbc	r12, r12
     b34:	dd 08       	sbc	r13, r13
     b36:	07 2e       	mov	r0, r23
     b38:	00 0c       	add	r0, r0
     b3a:	88 0b       	sbc	r24, r24
     b3c:	99 0b       	sbc	r25, r25
     b3e:	2a 81       	ldd	r18, Y+2	; 0x02
     b40:	08 e5       	ldi	r16, 0x58	; 88
     b42:	12 e0       	ldi	r17, 0x02	; 2
     b44:	02 1b       	sub	r16, r18
     b46:	11 09       	sbc	r17, r1
     b48:	27 fd       	sbrc	r18, 7
     b4a:	13 95       	inc	r17
     b4c:	00 0f       	add	r16, r16
     b4e:	11 1f       	adc	r17, r17
     b50:	00 0f       	add	r16, r16
     b52:	11 1f       	adc	r17, r17
     b54:	01 2e       	mov	r0, r17
     b56:	00 0c       	add	r0, r0
     b58:	22 0b       	sbc	r18, r18
     b5a:	33 0b       	sbc	r19, r19
     b5c:	3f 93       	push	r19
     b5e:	2f 93       	push	r18
     b60:	1f 93       	push	r17
     b62:	0f 93       	push	r16
     b64:	14 eb       	ldi	r17, 0xB4	; 180
     b66:	e1 2e       	mov	r14, r17
     b68:	f1 2c       	mov	r15, r1
     b6a:	00 e0       	ldi	r16, 0x00	; 0
     b6c:	10 e0       	ldi	r17, 0x00	; 0
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	a9 01       	movw	r20, r18
     b74:	0e 94 6d 09 	call	0x12da	; 0x12da <_Z3maplllll>
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
     b80:	ce 01       	movw	r24, r28
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	df 90       	pop	r13
     b90:	cf 90       	pop	r12
     b92:	bf 90       	pop	r11
     b94:	af 90       	pop	r10
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
     b96:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <_ZN5Servo17writeMicrosecondsEi>

00000b9a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     b9a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     b9c:	91 8d       	ldd	r25, Z+25	; 0x19
     b9e:	22 8d       	ldd	r18, Z+26	; 0x1a
     ba0:	89 2f       	mov	r24, r25
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	80 5c       	subi	r24, 0xC0	; 192
     ba6:	9f 4f       	sbci	r25, 0xFF	; 255
     ba8:	82 1b       	sub	r24, r18
     baa:	91 09       	sbc	r25, r1
}
     bac:	8f 73       	andi	r24, 0x3F	; 63
     bae:	99 27       	eor	r25, r25
     bb0:	08 95       	ret

00000bb2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     bb2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     bb4:	91 8d       	ldd	r25, Z+25	; 0x19
     bb6:	82 8d       	ldd	r24, Z+26	; 0x1a
     bb8:	98 17       	cp	r25, r24
     bba:	31 f0       	breq	.+12     	; 0xbc8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     bbc:	82 8d       	ldd	r24, Z+26	; 0x1a
     bbe:	e8 0f       	add	r30, r24
     bc0:	f1 1d       	adc	r31, r1
     bc2:	85 8d       	ldd	r24, Z+29	; 0x1d
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     bc8:	8f ef       	ldi	r24, 0xFF	; 255
     bca:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     bcc:	08 95       	ret

00000bce <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     bce:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     bd0:	91 8d       	ldd	r25, Z+25	; 0x19
     bd2:	82 8d       	ldd	r24, Z+26	; 0x1a
     bd4:	98 17       	cp	r25, r24
     bd6:	61 f0       	breq	.+24     	; 0xbf0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     bd8:	82 8d       	ldd	r24, Z+26	; 0x1a
     bda:	df 01       	movw	r26, r30
     bdc:	a8 0f       	add	r26, r24
     bde:	b1 1d       	adc	r27, r1
     be0:	5d 96       	adiw	r26, 0x1d	; 29
     be2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     be4:	92 8d       	ldd	r25, Z+26	; 0x1a
     be6:	9f 5f       	subi	r25, 0xFF	; 255
     be8:	9f 73       	andi	r25, 0x3F	; 63
     bea:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     bf4:	08 95       	ret

00000bf6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     bf6:	8b e4       	ldi	r24, 0x4B	; 75
     bf8:	97 e0       	ldi	r25, 0x07	; 7
     bfa:	89 2b       	or	r24, r25
     bfc:	49 f0       	breq	.+18     	; 0xc10 <_Z14serialEventRunv+0x1a>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	89 2b       	or	r24, r25
     c04:	29 f0       	breq	.+10     	; 0xc10 <_Z14serialEventRunv+0x1a>
     c06:	0e 94 4b 07 	call	0xe96	; 0xe96 <_Z17Serial0_availablev>
     c0a:	81 11       	cpse	r24, r1
     c0c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     c10:	08 95       	ret

00000c12 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     c12:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     c14:	84 8d       	ldd	r24, Z+28	; 0x1c
     c16:	df 01       	movw	r26, r30
     c18:	a8 0f       	add	r26, r24
     c1a:	b1 1d       	adc	r27, r1
     c1c:	a3 5a       	subi	r26, 0xA3	; 163
     c1e:	bf 4f       	sbci	r27, 0xFF	; 255
     c20:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     c22:	84 8d       	ldd	r24, Z+28	; 0x1c
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	8f 73       	andi	r24, 0x3F	; 63
     c2a:	99 27       	eor	r25, r25
     c2c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     c2e:	a6 89       	ldd	r26, Z+22	; 0x16
     c30:	b7 89       	ldd	r27, Z+23	; 0x17
     c32:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     c34:	a0 89       	ldd	r26, Z+16	; 0x10
     c36:	b1 89       	ldd	r27, Z+17	; 0x11
     c38:	8c 91       	ld	r24, X
     c3a:	80 64       	ori	r24, 0x40	; 64
     c3c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     c3e:	93 8d       	ldd	r25, Z+27	; 0x1b
     c40:	84 8d       	ldd	r24, Z+28	; 0x1c
     c42:	98 13       	cpse	r25, r24
     c44:	06 c0       	rjmp	.+12     	; 0xc52 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     c46:	02 88       	ldd	r0, Z+18	; 0x12
     c48:	f3 89       	ldd	r31, Z+19	; 0x13
     c4a:	e0 2d       	mov	r30, r0
     c4c:	80 81       	ld	r24, Z
     c4e:	8f 7d       	andi	r24, 0xDF	; 223
     c50:	80 83       	st	Z, r24
     c52:	08 95       	ret

00000c54 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     c5a:	88 8d       	ldd	r24, Y+24	; 0x18
     c5c:	88 23       	and	r24, r24
     c5e:	c9 f0       	breq	.+50     	; 0xc92 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     c60:	ea 89       	ldd	r30, Y+18	; 0x12
     c62:	fb 89       	ldd	r31, Y+19	; 0x13
     c64:	80 81       	ld	r24, Z
     c66:	85 fd       	sbrc	r24, 5
     c68:	05 c0       	rjmp	.+10     	; 0xc74 <_ZN14HardwareSerial5flushEv+0x20>
     c6a:	a8 89       	ldd	r26, Y+16	; 0x10
     c6c:	b9 89       	ldd	r27, Y+17	; 0x11
     c6e:	8c 91       	ld	r24, X
     c70:	86 fd       	sbrc	r24, 6
     c72:	0f c0       	rjmp	.+30     	; 0xc92 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	07 fc       	sbrc	r0, 7
     c78:	f5 cf       	rjmp	.-22     	; 0xc64 <_ZN14HardwareSerial5flushEv+0x10>
     c7a:	80 81       	ld	r24, Z
     c7c:	85 ff       	sbrs	r24, 5
     c7e:	f2 cf       	rjmp	.-28     	; 0xc64 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     c80:	a8 89       	ldd	r26, Y+16	; 0x10
     c82:	b9 89       	ldd	r27, Y+17	; 0x11
     c84:	8c 91       	ld	r24, X
     c86:	85 ff       	sbrs	r24, 5
     c88:	ed cf       	rjmp	.-38     	; 0xc64 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     c8a:	ce 01       	movw	r24, r28
     c8c:	0e 94 09 06 	call	0xc12	; 0xc12 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     c90:	e7 cf       	rjmp	.-50     	; 0xc60 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	ec 01       	movw	r28, r24
  _written = true;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     caa:	9b 8d       	ldd	r25, Y+27	; 0x1b
     cac:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cae:	98 13       	cpse	r25, r24
     cb0:	05 c0       	rjmp	.+10     	; 0xcbc <_ZN14HardwareSerial5writeEh+0x24>
     cb2:	e8 89       	ldd	r30, Y+16	; 0x10
     cb4:	f9 89       	ldd	r31, Y+17	; 0x11
     cb6:	80 81       	ld	r24, Z
     cb8:	85 fd       	sbrc	r24, 5
     cba:	24 c0       	rjmp	.+72     	; 0xd04 <_ZN14HardwareSerial5writeEh+0x6c>
     cbc:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     cbe:	0b 8d       	ldd	r16, Y+27	; 0x1b
     cc0:	10 e0       	ldi	r17, 0x00	; 0
     cc2:	0f 5f       	subi	r16, 0xFF	; 255
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
     cc6:	0f 73       	andi	r16, 0x3F	; 63
     cc8:	11 27       	eor	r17, r17
     cca:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     ccc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cce:	e8 12       	cpse	r14, r24
     cd0:	0c c0       	rjmp	.+24     	; 0xcea <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	07 fc       	sbrc	r0, 7
     cd6:	fa cf       	rjmp	.-12     	; 0xccc <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     cd8:	e8 89       	ldd	r30, Y+16	; 0x10
     cda:	f9 89       	ldd	r31, Y+17	; 0x11
     cdc:	80 81       	ld	r24, Z
     cde:	85 ff       	sbrs	r24, 5
     ce0:	f5 cf       	rjmp	.-22     	; 0xccc <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     ce2:	ce 01       	movw	r24, r28
     ce4:	0e 94 09 06 	call	0xc12	; 0xc12 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ce8:	f1 cf       	rjmp	.-30     	; 0xccc <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cec:	fe 01       	movw	r30, r28
     cee:	e8 0f       	add	r30, r24
     cf0:	f1 1d       	adc	r31, r1
     cf2:	e3 5a       	subi	r30, 0xA3	; 163
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     cf8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     cfa:	ea 89       	ldd	r30, Y+18	; 0x12
     cfc:	fb 89       	ldd	r31, Y+19	; 0x13
     cfe:	80 81       	ld	r24, Z
     d00:	80 62       	ori	r24, 0x20	; 32
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     d04:	ee 89       	ldd	r30, Y+22	; 0x16
     d06:	ff 89       	ldd	r31, Y+23	; 0x17
     d08:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     d0a:	e8 89       	ldd	r30, Y+16	; 0x10
     d0c:	f9 89       	ldd	r31, Y+17	; 0x11
     d0e:	80 81       	ld	r24, Z
     d10:	80 64       	ori	r24, 0x40	; 64
     d12:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	08 95       	ret

00000d26 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
     d36:	6a 01       	movw	r12, r20
     d38:	7b 01       	movw	r14, r22
     d3a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     d3c:	60 e8       	ldi	r22, 0x80	; 128
     d3e:	74 e8       	ldi	r23, 0x84	; 132
     d40:	8e e1       	ldi	r24, 0x1E	; 30
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a7 01       	movw	r20, r14
     d46:	96 01       	movw	r18, r12
     d48:	0e 94 ca 09 	call	0x1394	; 0x1394 <__udivmodsi4>
     d4c:	da 01       	movw	r26, r20
     d4e:	c9 01       	movw	r24, r18
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	a1 09       	sbc	r26, r1
     d54:	b1 09       	sbc	r27, r1
     d56:	b6 95       	lsr	r27
     d58:	a7 95       	ror	r26
     d5a:	97 95       	ror	r25
     d5c:	87 95       	ror	r24
     d5e:	ac 01       	movw	r20, r24
  *_ucsra = 1 << U2X0;
     d60:	e8 89       	ldd	r30, Y+16	; 0x10
     d62:	f9 89       	ldd	r31, Y+17	; 0x11
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d68:	41 15       	cp	r20, r1
     d6a:	80 e1       	ldi	r24, 0x10	; 16
     d6c:	58 07       	cpc	r21, r24
     d6e:	a8 f0       	brcs	.+42     	; 0xd9a <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
     d70:	e8 89       	ldd	r30, Y+16	; 0x10
     d72:	f9 89       	ldd	r31, Y+17	; 0x11
     d74:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     d76:	60 e4       	ldi	r22, 0x40	; 64
     d78:	72 e4       	ldi	r23, 0x42	; 66
     d7a:	8f e0       	ldi	r24, 0x0F	; 15
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	a7 01       	movw	r20, r14
     d80:	96 01       	movw	r18, r12
     d82:	0e 94 ca 09 	call	0x1394	; 0x1394 <__udivmodsi4>
     d86:	ba 01       	movw	r22, r20
     d88:	a9 01       	movw	r20, r18
     d8a:	41 50       	subi	r20, 0x01	; 1
     d8c:	51 09       	sbc	r21, r1
     d8e:	61 09       	sbc	r22, r1
     d90:	71 09       	sbc	r23, r1
     d92:	76 95       	lsr	r23
     d94:	67 95       	ror	r22
     d96:	57 95       	ror	r21
     d98:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     d9a:	ec 85       	ldd	r30, Y+12	; 0x0c
     d9c:	fd 85       	ldd	r31, Y+13	; 0x0d
     d9e:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
     da0:	ee 85       	ldd	r30, Y+14	; 0x0e
     da2:	ff 85       	ldd	r31, Y+15	; 0x0f
     da4:	40 83       	st	Z, r20

  _written = false;
     da6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     da8:	ec 89       	ldd	r30, Y+20	; 0x14
     daa:	fd 89       	ldd	r31, Y+21	; 0x15
     dac:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     dae:	ea 89       	ldd	r30, Y+18	; 0x12
     db0:	fb 89       	ldd	r31, Y+19	; 0x13
     db2:	80 81       	ld	r24, Z
     db4:	80 61       	ori	r24, 0x10	; 16
     db6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     db8:	ea 89       	ldd	r30, Y+18	; 0x12
     dba:	fb 89       	ldd	r31, Y+19	; 0x13
     dbc:	80 81       	ld	r24, Z
     dbe:	88 60       	ori	r24, 0x08	; 8
     dc0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     dc2:	ea 89       	ldd	r30, Y+18	; 0x12
     dc4:	fb 89       	ldd	r31, Y+19	; 0x13
     dc6:	80 81       	ld	r24, Z
     dc8:	80 68       	ori	r24, 0x80	; 128
     dca:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     dcc:	ea 89       	ldd	r30, Y+18	; 0x12
     dce:	fb 89       	ldd	r31, Y+19	; 0x13
     dd0:	80 81       	ld	r24, Z
     dd2:	8f 7d       	andi	r24, 0xDF	; 223
     dd4:	80 83       	st	Z, r24
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	08 95       	ret

00000de6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	2f 93       	push	r18
     df2:	8f 93       	push	r24
     df4:	9f 93       	push	r25
     df6:	ef 93       	push	r30
     df8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     dfa:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <Serial+0x10>
     dfe:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <Serial+0x11>
     e02:	80 81       	ld	r24, Z
     e04:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <Serial+0x16>
     e08:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <Serial+0x17>
     e0c:	82 fd       	sbrc	r24, 2
     e0e:	12 c0       	rjmp	.+36     	; 0xe34 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     e10:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     e12:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Serial+0x19>
     e16:	8f 5f       	subi	r24, 0xFF	; 255
     e18:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     e1a:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <Serial+0x1a>
     e1e:	82 17       	cp	r24, r18
     e20:	51 f0       	breq	.+20     	; 0xe36 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     e22:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Serial+0x19>
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	e9 50       	subi	r30, 0x09	; 9
     e2a:	fe 4f       	sbci	r31, 0xFE	; 254
     e2c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     e2e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <Serial+0x19>
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     e34:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     e36:	ff 91       	pop	r31
     e38:	ef 91       	pop	r30
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	2f 93       	push	r18
     e56:	3f 93       	push	r19
     e58:	4f 93       	push	r20
     e5a:	5f 93       	push	r21
     e5c:	6f 93       	push	r22
     e5e:	7f 93       	push	r23
     e60:	8f 93       	push	r24
     e62:	9f 93       	push	r25
     e64:	af 93       	push	r26
     e66:	bf 93       	push	r27
     e68:	ef 93       	push	r30
     e6a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     e6c:	87 ef       	ldi	r24, 0xF7	; 247
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	0e 94 09 06 	call	0xc12	; 0xc12 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     e74:	ff 91       	pop	r31
     e76:	ef 91       	pop	r30
     e78:	bf 91       	pop	r27
     e7a:	af 91       	pop	r26
     e7c:	9f 91       	pop	r25
     e7e:	8f 91       	pop	r24
     e80:	7f 91       	pop	r23
     e82:	6f 91       	pop	r22
     e84:	5f 91       	pop	r21
     e86:	4f 91       	pop	r20
     e88:	3f 91       	pop	r19
     e8a:	2f 91       	pop	r18
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     e96:	87 ef       	ldi	r24, 0xF7	; 247
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_ZN14HardwareSerial9availableEv>
     e9e:	21 e0       	ldi	r18, 0x01	; 1
     ea0:	89 2b       	or	r24, r25
     ea2:	09 f4       	brne	.+2      	; 0xea6 <_Z17Serial0_availablev+0x10>
     ea4:	20 e0       	ldi	r18, 0x00	; 0
}
     ea6:	82 2f       	mov	r24, r18
     ea8:	08 95       	ret

00000eaa <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     eaa:	e7 ef       	ldi	r30, 0xF7	; 247
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	13 82       	std	Z+3, r1	; 0x03
     eb0:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     eb2:	88 ee       	ldi	r24, 0xE8	; 232
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	a0 e0       	ldi	r26, 0x00	; 0
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	84 83       	std	Z+4, r24	; 0x04
     ebc:	95 83       	std	Z+5, r25	; 0x05
     ebe:	a6 83       	std	Z+6, r26	; 0x06
     ec0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     ec2:	82 e5       	ldi	r24, 0x52	; 82
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	91 83       	std	Z+1, r25	; 0x01
     ec8:	80 83       	st	Z, r24
     eca:	85 ec       	ldi	r24, 0xC5	; 197
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	95 87       	std	Z+13, r25	; 0x0d
     ed0:	84 87       	std	Z+12, r24	; 0x0c
     ed2:	84 ec       	ldi	r24, 0xC4	; 196
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	97 87       	std	Z+15, r25	; 0x0f
     ed8:	86 87       	std	Z+14, r24	; 0x0e
     eda:	80 ec       	ldi	r24, 0xC0	; 192
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	91 8b       	std	Z+17, r25	; 0x11
     ee0:	80 8b       	std	Z+16, r24	; 0x10
     ee2:	81 ec       	ldi	r24, 0xC1	; 193
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	93 8b       	std	Z+19, r25	; 0x13
     ee8:	82 8b       	std	Z+18, r24	; 0x12
     eea:	82 ec       	ldi	r24, 0xC2	; 194
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	95 8b       	std	Z+21, r25	; 0x15
     ef0:	84 8b       	std	Z+20, r24	; 0x14
     ef2:	86 ec       	ldi	r24, 0xC6	; 198
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	97 8b       	std	Z+23, r25	; 0x17
     ef8:	86 8b       	std	Z+22, r24	; 0x16
     efa:	11 8e       	std	Z+25, r1	; 0x19
     efc:	12 8e       	std	Z+26, r1	; 0x1a
     efe:	13 8e       	std	Z+27, r1	; 0x1b
     f00:	14 8e       	std	Z+28, r1	; 0x1c
     f02:	08 95       	ret

00000f04 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
     f04:	08 95       	ret

00000f06 <main>:

int main(void)
{
	init();
     f06:	0e 94 3e 08 	call	0x107c	; 0x107c <init>

	initVariant();
     f0a:	0e 94 82 07 	call	0xf04	; 0xf04 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     f0e:	0e 94 88 01 	call	0x310	; 0x310 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     f12:	cb ef       	ldi	r28, 0xFB	; 251
     f14:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     f16:	0e 94 0b 02 	call	0x416	; 0x416 <loop>
		if (serialEventRun) serialEventRun();
     f1a:	20 97       	sbiw	r28, 0x00	; 0
     f1c:	e1 f3       	breq	.-8      	; 0xf16 <main+0x10>
     f1e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14serialEventRunv>
     f22:	f9 cf       	rjmp	.-14     	; 0xf16 <main+0x10>

00000f24 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     f24:	cf 92       	push	r12
     f26:	df 92       	push	r13
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	6c 01       	movw	r12, r24
     f36:	7a 01       	movw	r14, r20
     f38:	8b 01       	movw	r16, r22
     f3a:	c0 e0       	ldi	r28, 0x00	; 0
     f3c:	d0 e0       	ldi	r29, 0x00	; 0
     f3e:	ce 15       	cp	r28, r14
     f40:	df 05       	cpc	r29, r15
     f42:	89 f0       	breq	.+34     	; 0xf66 <_ZN5Print5writeEPKhj+0x42>
     f44:	d8 01       	movw	r26, r16
     f46:	6d 91       	ld	r22, X+
     f48:	8d 01       	movw	r16, r26
     f4a:	d6 01       	movw	r26, r12
     f4c:	ed 91       	ld	r30, X+
     f4e:	fc 91       	ld	r31, X
     f50:	01 90       	ld	r0, Z+
     f52:	f0 81       	ld	r31, Z
     f54:	e0 2d       	mov	r30, r0
     f56:	c6 01       	movw	r24, r12
     f58:	09 95       	icall
     f5a:	89 2b       	or	r24, r25
     f5c:	11 f4       	brne	.+4      	; 0xf62 <_ZN5Print5writeEPKhj+0x3e>
     f5e:	7e 01       	movw	r14, r28
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <_ZN5Print5writeEPKhj+0x42>
     f62:	21 96       	adiw	r28, 0x01	; 1
     f64:	ec cf       	rjmp	.-40     	; 0xf3e <_ZN5Print5writeEPKhj+0x1a>
     f66:	c7 01       	movw	r24, r14
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	08 95       	ret

00000f7a <_ZN5Print5writeEPKc>:
     f7a:	61 15       	cp	r22, r1
     f7c:	71 05       	cpc	r23, r1
     f7e:	79 f0       	breq	.+30     	; 0xf9e <_ZN5Print5writeEPKc+0x24>
     f80:	fb 01       	movw	r30, r22
     f82:	01 90       	ld	r0, Z+
     f84:	00 20       	and	r0, r0
     f86:	e9 f7       	brne	.-6      	; 0xf82 <_ZN5Print5writeEPKc+0x8>
     f88:	31 97       	sbiw	r30, 0x01	; 1
     f8a:	af 01       	movw	r20, r30
     f8c:	46 1b       	sub	r20, r22
     f8e:	57 0b       	sbc	r21, r23
     f90:	dc 01       	movw	r26, r24
     f92:	ed 91       	ld	r30, X+
     f94:	fc 91       	ld	r31, X
     f96:	02 80       	ldd	r0, Z+2	; 0x02
     f98:	f3 81       	ldd	r31, Z+3	; 0x03
     f9a:	e0 2d       	mov	r30, r0
     f9c:	09 94       	ijmp
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	08 95       	ret

00000fa4 <_ZN5Print7printlnEv>:
     fa4:	6e e5       	ldi	r22, 0x5E	; 94
     fa6:	71 e0       	ldi	r23, 0x01	; 1
     fa8:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <_ZN5Print5writeEPKc>

00000fac <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     fb6:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN5Print5writeEPKc>
     fba:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     fbc:	ce 01       	movw	r24, r28
     fbe:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_ZN5Print7printlnEv>
  return n;
}
     fc2:	80 0f       	add	r24, r16
     fc4:	91 1f       	adc	r25, r17
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	08 95       	ret

00000fd0 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	11 24       	eor	r1, r1
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <timer0_millis>
     fea:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <timer0_millis+0x1>
     fee:	a0 91 97 02 	lds	r26, 0x0297	; 0x800297 <timer0_millis+0x2>
     ff2:	b0 91 98 02 	lds	r27, 0x0298	; 0x800298 <timer0_millis+0x3>
     ff6:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <timer0_fract>
     ffa:	26 e0       	ldi	r18, 0x06	; 6
     ffc:	23 0f       	add	r18, r19
     ffe:	2d 37       	cpi	r18, 0x7D	; 125
    1000:	20 f4       	brcc	.+8      	; 0x100a <__vector_16+0x3a>
    1002:	02 96       	adiw	r24, 0x02	; 2
    1004:	a1 1d       	adc	r26, r1
    1006:	b1 1d       	adc	r27, r1
    1008:	05 c0       	rjmp	.+10     	; 0x1014 <__vector_16+0x44>
    100a:	29 e8       	ldi	r18, 0x89	; 137
    100c:	23 0f       	add	r18, r19
    100e:	03 96       	adiw	r24, 0x03	; 3
    1010:	a1 1d       	adc	r26, r1
    1012:	b1 1d       	adc	r27, r1
    1014:	20 93 94 02 	sts	0x0294, r18	; 0x800294 <timer0_fract>
    1018:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <timer0_millis>
    101c:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <timer0_millis+0x1>
    1020:	a0 93 97 02 	sts	0x0297, r26	; 0x800297 <timer0_millis+0x2>
    1024:	b0 93 98 02 	sts	0x0298, r27	; 0x800298 <timer0_millis+0x3>
    1028:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <timer0_overflow_count>
    102c:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <timer0_overflow_count+0x1>
    1030:	a0 91 9b 02 	lds	r26, 0x029B	; 0x80029b <timer0_overflow_count+0x2>
    1034:	b0 91 9c 02 	lds	r27, 0x029C	; 0x80029c <timer0_overflow_count+0x3>
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	a1 1d       	adc	r26, r1
    103c:	b1 1d       	adc	r27, r1
    103e:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <timer0_overflow_count>
    1042:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <timer0_overflow_count+0x1>
    1046:	a0 93 9b 02 	sts	0x029B, r26	; 0x80029b <timer0_overflow_count+0x2>
    104a:	b0 93 9c 02 	sts	0x029C, r27	; 0x80029c <timer0_overflow_count+0x3>
    104e:	bf 91       	pop	r27
    1050:	af 91       	pop	r26
    1052:	9f 91       	pop	r25
    1054:	8f 91       	pop	r24
    1056:	3f 91       	pop	r19
    1058:	2f 91       	pop	r18
    105a:	0f 90       	pop	r0
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	0f 90       	pop	r0
    1060:	1f 90       	pop	r1
    1062:	18 95       	reti

00001064 <millis>:
    1064:	2f b7       	in	r18, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	60 91 95 02 	lds	r22, 0x0295	; 0x800295 <timer0_millis>
    106c:	70 91 96 02 	lds	r23, 0x0296	; 0x800296 <timer0_millis+0x1>
    1070:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <timer0_millis+0x2>
    1074:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <timer0_millis+0x3>
    1078:	2f bf       	out	0x3f, r18	; 63
    107a:	08 95       	ret

0000107c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    107c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    107e:	84 b5       	in	r24, 0x24	; 36
    1080:	82 60       	ori	r24, 0x02	; 2
    1082:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1084:	84 b5       	in	r24, 0x24	; 36
    1086:	81 60       	ori	r24, 0x01	; 1
    1088:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    108a:	85 b5       	in	r24, 0x25	; 37
    108c:	82 60       	ori	r24, 0x02	; 2
    108e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1090:	85 b5       	in	r24, 0x25	; 37
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1096:	ee e6       	ldi	r30, 0x6E	; 110
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	81 60       	ori	r24, 0x01	; 1
    109e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    10a0:	e1 e8       	ldi	r30, 0x81	; 129
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    10a6:	80 81       	ld	r24, Z
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    10ac:	80 81       	ld	r24, Z
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    10b2:	e0 e8       	ldi	r30, 0x80	; 128
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    10bc:	e1 eb       	ldi	r30, 0xB1	; 177
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	84 60       	ori	r24, 0x04	; 4
    10c4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    10c6:	e0 eb       	ldi	r30, 0xB0	; 176
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	81 60       	ori	r24, 0x01	; 1
    10ce:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    10d0:	ea e7       	ldi	r30, 0x7A	; 122
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	84 60       	ori	r24, 0x04	; 4
    10d8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    10da:	80 81       	ld	r24, Z
    10dc:	82 60       	ori	r24, 0x02	; 2
    10de:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    10e0:	80 81       	ld	r24, Z
    10e2:	8e 7f       	andi	r24, 0xFE	; 254
    10e4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    10e6:	80 81       	ld	r24, Z
    10e8:	80 68       	ori	r24, 0x80	; 128
    10ea:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    10ec:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    10f0:	08 95       	ret

000010f2 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	18 2f       	mov	r17, r24
    10fa:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	0e 94 01 09 	call	0x1202	; 0x1202 <pinMode>
	if (val == 0)
    1102:	20 97       	sbiw	r28, 0x00	; 0
    1104:	11 f4       	brne	.+4      	; 0x110a <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	04 c0       	rjmp	.+8      	; 0x1112 <analogWrite+0x20>
	}
	else if (val == 255)
    110a:	cf 3f       	cpi	r28, 0xFF	; 255
    110c:	d1 05       	cpc	r29, r1
    110e:	39 f4       	brne	.+14     	; 0x111e <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    111a:	0c 94 3d 09 	jmp	0x127a	; 0x127a <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    111e:	e1 2f       	mov	r30, r17
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	e8 59       	subi	r30, 0x98	; 152
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	e4 91       	lpm	r30, Z
    1128:	e3 30       	cpi	r30, 0x03	; 3
    112a:	f9 f0       	breq	.+62     	; 0x116a <analogWrite+0x78>
    112c:	48 f4       	brcc	.+18     	; 0x1140 <analogWrite+0x4e>
    112e:	e1 30       	cpi	r30, 0x01	; 1
    1130:	b9 f0       	breq	.+46     	; 0x1160 <analogWrite+0x6e>
    1132:	e2 30       	cpi	r30, 0x02	; 2
    1134:	a1 f5       	brne	.+104    	; 0x119e <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1136:	84 b5       	in	r24, 0x24	; 36
    1138:	80 62       	ori	r24, 0x20	; 32
    113a:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    113c:	c8 bd       	out	0x28, r28	; 40
				break;
    113e:	34 c0       	rjmp	.+104    	; 0x11a8 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1140:	e7 30       	cpi	r30, 0x07	; 7
    1142:	e9 f0       	breq	.+58     	; 0x117e <analogWrite+0x8c>
    1144:	e8 30       	cpi	r30, 0x08	; 8
    1146:	19 f1       	breq	.+70     	; 0x118e <analogWrite+0x9c>
    1148:	e4 30       	cpi	r30, 0x04	; 4
    114a:	49 f5       	brne	.+82     	; 0x119e <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    114c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1150:	80 62       	ori	r24, 0x20	; 32
    1152:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    1156:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    115a:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    115e:	24 c0       	rjmp	.+72     	; 0x11a8 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    1160:	84 b5       	in	r24, 0x24	; 36
    1162:	80 68       	ori	r24, 0x80	; 128
    1164:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1166:	c7 bd       	out	0x27, r28	; 39
				break;
    1168:	1f c0       	rjmp	.+62     	; 0x11a8 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    116a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    116e:	80 68       	ori	r24, 0x80	; 128
    1170:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    1174:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1178:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    117c:	15 c0       	rjmp	.+42     	; 0x11a8 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    117e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1182:	80 68       	ori	r24, 0x80	; 128
    1184:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    1188:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    118e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1192:	80 62       	ori	r24, 0x20	; 32
    1194:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    1198:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    119e:	c0 38       	cpi	r28, 0x80	; 128
    11a0:	d1 05       	cpc	r29, r1
    11a2:	0c f0       	brlt	.+2      	; 0x11a6 <analogWrite+0xb4>
    11a4:	b5 cf       	rjmp	.-150    	; 0x1110 <analogWrite+0x1e>
    11a6:	af cf       	rjmp	.-162    	; 0x1106 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	08 95       	ret

000011b0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	81 f0       	breq	.+32     	; 0x11d4 <turnOffPWM+0x24>
    11b4:	28 f4       	brcc	.+10     	; 0x11c0 <turnOffPWM+0x10>
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	99 f0       	breq	.+38     	; 0x11e0 <turnOffPWM+0x30>
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	a1 f0       	breq	.+40     	; 0x11e6 <turnOffPWM+0x36>
    11be:	08 95       	ret
    11c0:	87 30       	cpi	r24, 0x07	; 7
    11c2:	a9 f0       	breq	.+42     	; 0x11ee <turnOffPWM+0x3e>
    11c4:	88 30       	cpi	r24, 0x08	; 8
    11c6:	b9 f0       	breq	.+46     	; 0x11f6 <turnOffPWM+0x46>
    11c8:	84 30       	cpi	r24, 0x04	; 4
    11ca:	d1 f4       	brne	.+52     	; 0x1200 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    11cc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    11d0:	8f 7d       	andi	r24, 0xDF	; 223
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    11d4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    11d8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    11da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    11de:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    11e0:	84 b5       	in	r24, 0x24	; 36
    11e2:	8f 77       	andi	r24, 0x7F	; 127
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    11e6:	84 b5       	in	r24, 0x24	; 36
    11e8:	8f 7d       	andi	r24, 0xDF	; 223
    11ea:	84 bd       	out	0x24, r24	; 36
    11ec:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    11ee:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    11f2:	8f 77       	andi	r24, 0x7F	; 127
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    11f6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    11fa:	8f 7d       	andi	r24, 0xDF	; 223
    11fc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1200:	08 95       	ret

00001202 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	fc 01       	movw	r30, r24
    120a:	e4 58       	subi	r30, 0x84	; 132
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1210:	fc 01       	movw	r30, r24
    1212:	e0 57       	subi	r30, 0x70	; 112
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1218:	88 23       	and	r24, r24
    121a:	61 f1       	breq	.+88     	; 0x1274 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	fc 01       	movw	r30, r24
    1224:	e2 55       	subi	r30, 0x52	; 82
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	c5 91       	lpm	r28, Z+
    122a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    122c:	fc 01       	movw	r30, r24
    122e:	ec 55       	subi	r30, 0x5C	; 92
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	a5 91       	lpm	r26, Z+
    1234:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1236:	61 11       	cpse	r22, r1
    1238:	09 c0       	rjmp	.+18     	; 0x124c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    123a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    123c:	f8 94       	cli
		*reg &= ~bit;
    123e:	88 81       	ld	r24, Y
    1240:	20 95       	com	r18
    1242:	82 23       	and	r24, r18
    1244:	88 83       	st	Y, r24
		*out &= ~bit;
    1246:	ec 91       	ld	r30, X
    1248:	2e 23       	and	r18, r30
    124a:	0b c0       	rjmp	.+22     	; 0x1262 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    124c:	62 30       	cpi	r22, 0x02	; 2
    124e:	61 f4       	brne	.+24     	; 0x1268 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1250:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1252:	f8 94       	cli
		*reg &= ~bit;
    1254:	38 81       	ld	r19, Y
    1256:	82 2f       	mov	r24, r18
    1258:	80 95       	com	r24
    125a:	83 23       	and	r24, r19
    125c:	88 83       	st	Y, r24
		*out |= bit;
    125e:	ec 91       	ld	r30, X
    1260:	2e 2b       	or	r18, r30
    1262:	2c 93       	st	X, r18
		SREG = oldSREG;
    1264:	9f bf       	out	0x3f, r25	; 63
    1266:	06 c0       	rjmp	.+12     	; 0x1274 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1268:	8f b7       	in	r24, 0x3f	; 63
                cli();
    126a:	f8 94       	cli
		*reg |= bit;
    126c:	e8 81       	ld	r30, Y
    126e:	2e 2b       	or	r18, r30
    1270:	28 83       	st	Y, r18
		SREG = oldSREG;
    1272:	8f bf       	out	0x3f, r24	; 63
	}
}
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	08 95       	ret

0000127a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	f9 01       	movw	r30, r18
    1286:	e8 59       	subi	r30, 0x98	; 152
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    128c:	f9 01       	movw	r30, r18
    128e:	e4 58       	subi	r30, 0x84	; 132
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1294:	f9 01       	movw	r30, r18
    1296:	e0 57       	subi	r30, 0x70	; 112
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    129c:	cc 23       	and	r28, r28
    129e:	c9 f0       	breq	.+50     	; 0x12d2 <digitalWrite+0x58>
    12a0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    12a2:	81 11       	cpse	r24, r1
    12a4:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <turnOffPWM>

	out = portOutputRegister(port);
    12a8:	ec 2f       	mov	r30, r28
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	ee 0f       	add	r30, r30
    12ae:	ff 1f       	adc	r31, r31
    12b0:	ec 55       	subi	r30, 0x5C	; 92
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	a5 91       	lpm	r26, Z+
    12b6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    12b8:	8f b7       	in	r24, 0x3f	; 63
	cli();
    12ba:	f8 94       	cli

	if (val == LOW) {
    12bc:	11 11       	cpse	r17, r1
    12be:	05 c0       	rjmp	.+10     	; 0x12ca <digitalWrite+0x50>
		*out &= ~bit;
    12c0:	9c 91       	ld	r25, X
    12c2:	ed 2f       	mov	r30, r29
    12c4:	e0 95       	com	r30
    12c6:	e9 23       	and	r30, r25
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <digitalWrite+0x54>
	} else {
		*out |= bit;
    12ca:	ec 91       	ld	r30, X
    12cc:	ed 2b       	or	r30, r29
    12ce:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    12d0:	8f bf       	out	0x3f, r24	; 63
}
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	08 95       	ret

000012da <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    12da:	4f 92       	push	r4
    12dc:	5f 92       	push	r5
    12de:	6f 92       	push	r6
    12e0:	7f 92       	push	r7
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	29 01       	movw	r4, r18
    12fc:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    12fe:	9b 01       	movw	r18, r22
    1300:	ac 01       	movw	r20, r24
    1302:	24 19       	sub	r18, r4
    1304:	35 09       	sbc	r19, r5
    1306:	46 09       	sbc	r20, r6
    1308:	57 09       	sbc	r21, r7
    130a:	89 89       	ldd	r24, Y+17	; 0x11
    130c:	9a 89       	ldd	r25, Y+18	; 0x12
    130e:	ab 89       	ldd	r26, Y+19	; 0x13
    1310:	bc 89       	ldd	r27, Y+20	; 0x14
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	6a 19       	sub	r22, r10
    1318:	7b 09       	sbc	r23, r11
    131a:	8c 09       	sbc	r24, r12
    131c:	9d 09       	sbc	r25, r13
    131e:	0e 94 ae 09 	call	0x135c	; 0x135c <__mulsi3>
    1322:	a8 01       	movw	r20, r16
    1324:	97 01       	movw	r18, r14
    1326:	24 19       	sub	r18, r4
    1328:	35 09       	sbc	r19, r5
    132a:	46 09       	sbc	r20, r6
    132c:	57 09       	sbc	r21, r7
    132e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__divmodsi4>
    1332:	ca 01       	movw	r24, r20
    1334:	b9 01       	movw	r22, r18
    1336:	6a 0d       	add	r22, r10
    1338:	7b 1d       	adc	r23, r11
    133a:	8c 1d       	adc	r24, r12
    133c:	9d 1d       	adc	r25, r13
}
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	df 90       	pop	r13
    134c:	cf 90       	pop	r12
    134e:	bf 90       	pop	r11
    1350:	af 90       	pop	r10
    1352:	7f 90       	pop	r7
    1354:	6f 90       	pop	r6
    1356:	5f 90       	pop	r5
    1358:	4f 90       	pop	r4
    135a:	08 95       	ret

0000135c <__mulsi3>:
    135c:	db 01       	movw	r26, r22
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__muluhisi3>
    1366:	bf 91       	pop	r27
    1368:	af 91       	pop	r26
    136a:	a2 9f       	mul	r26, r18
    136c:	80 0d       	add	r24, r0
    136e:	91 1d       	adc	r25, r1
    1370:	a3 9f       	mul	r26, r19
    1372:	90 0d       	add	r25, r0
    1374:	b2 9f       	mul	r27, r18
    1376:	90 0d       	add	r25, r0
    1378:	11 24       	eor	r1, r1
    137a:	08 95       	ret

0000137c <__udivmodqi4>:
    137c:	99 1b       	sub	r25, r25
    137e:	79 e0       	ldi	r23, 0x09	; 9
    1380:	04 c0       	rjmp	.+8      	; 0x138a <__udivmodqi4_ep>

00001382 <__udivmodqi4_loop>:
    1382:	99 1f       	adc	r25, r25
    1384:	96 17       	cp	r25, r22
    1386:	08 f0       	brcs	.+2      	; 0x138a <__udivmodqi4_ep>
    1388:	96 1b       	sub	r25, r22

0000138a <__udivmodqi4_ep>:
    138a:	88 1f       	adc	r24, r24
    138c:	7a 95       	dec	r23
    138e:	c9 f7       	brne	.-14     	; 0x1382 <__udivmodqi4_loop>
    1390:	80 95       	com	r24
    1392:	08 95       	ret

00001394 <__udivmodsi4>:
    1394:	a1 e2       	ldi	r26, 0x21	; 33
    1396:	1a 2e       	mov	r1, r26
    1398:	aa 1b       	sub	r26, r26
    139a:	bb 1b       	sub	r27, r27
    139c:	fd 01       	movw	r30, r26
    139e:	0d c0       	rjmp	.+26     	; 0x13ba <__udivmodsi4_ep>

000013a0 <__udivmodsi4_loop>:
    13a0:	aa 1f       	adc	r26, r26
    13a2:	bb 1f       	adc	r27, r27
    13a4:	ee 1f       	adc	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	a2 17       	cp	r26, r18
    13aa:	b3 07       	cpc	r27, r19
    13ac:	e4 07       	cpc	r30, r20
    13ae:	f5 07       	cpc	r31, r21
    13b0:	20 f0       	brcs	.+8      	; 0x13ba <__udivmodsi4_ep>
    13b2:	a2 1b       	sub	r26, r18
    13b4:	b3 0b       	sbc	r27, r19
    13b6:	e4 0b       	sbc	r30, r20
    13b8:	f5 0b       	sbc	r31, r21

000013ba <__udivmodsi4_ep>:
    13ba:	66 1f       	adc	r22, r22
    13bc:	77 1f       	adc	r23, r23
    13be:	88 1f       	adc	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	1a 94       	dec	r1
    13c4:	69 f7       	brne	.-38     	; 0x13a0 <__udivmodsi4_loop>
    13c6:	60 95       	com	r22
    13c8:	70 95       	com	r23
    13ca:	80 95       	com	r24
    13cc:	90 95       	com	r25
    13ce:	9b 01       	movw	r18, r22
    13d0:	ac 01       	movw	r20, r24
    13d2:	bd 01       	movw	r22, r26
    13d4:	cf 01       	movw	r24, r30
    13d6:	08 95       	ret

000013d8 <__divmodsi4>:
    13d8:	05 2e       	mov	r0, r21
    13da:	97 fb       	bst	r25, 7
    13dc:	1e f4       	brtc	.+6      	; 0x13e4 <__divmodsi4+0xc>
    13de:	00 94       	com	r0
    13e0:	0e 94 03 0a 	call	0x1406	; 0x1406 <__negsi2>
    13e4:	57 fd       	sbrc	r21, 7
    13e6:	07 d0       	rcall	.+14     	; 0x13f6 <__divmodsi4_neg2>
    13e8:	0e 94 ca 09 	call	0x1394	; 0x1394 <__udivmodsi4>
    13ec:	07 fc       	sbrc	r0, 7
    13ee:	03 d0       	rcall	.+6      	; 0x13f6 <__divmodsi4_neg2>
    13f0:	4e f4       	brtc	.+18     	; 0x1404 <__divmodsi4_exit>
    13f2:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__negsi2>

000013f6 <__divmodsi4_neg2>:
    13f6:	50 95       	com	r21
    13f8:	40 95       	com	r20
    13fa:	30 95       	com	r19
    13fc:	21 95       	neg	r18
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	4f 4f       	sbci	r20, 0xFF	; 255
    1402:	5f 4f       	sbci	r21, 0xFF	; 255

00001404 <__divmodsi4_exit>:
    1404:	08 95       	ret

00001406 <__negsi2>:
    1406:	90 95       	com	r25
    1408:	80 95       	com	r24
    140a:	70 95       	com	r23
    140c:	61 95       	neg	r22
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	8f 4f       	sbci	r24, 0xFF	; 255
    1412:	9f 4f       	sbci	r25, 0xFF	; 255
    1414:	08 95       	ret

00001416 <__muluhisi3>:
    1416:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__umulhisi3>
    141a:	a5 9f       	mul	r26, r21
    141c:	90 0d       	add	r25, r0
    141e:	b4 9f       	mul	r27, r20
    1420:	90 0d       	add	r25, r0
    1422:	a4 9f       	mul	r26, r20
    1424:	80 0d       	add	r24, r0
    1426:	91 1d       	adc	r25, r1
    1428:	11 24       	eor	r1, r1
    142a:	08 95       	ret

0000142c <__tablejump2__>:
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	05 90       	lpm	r0, Z+
    1432:	f4 91       	lpm	r31, Z
    1434:	e0 2d       	mov	r30, r0
    1436:	09 94       	ijmp

00001438 <__umulhisi3>:
    1438:	a2 9f       	mul	r26, r18
    143a:	b0 01       	movw	r22, r0
    143c:	b3 9f       	mul	r27, r19
    143e:	c0 01       	movw	r24, r0
    1440:	a3 9f       	mul	r26, r19
    1442:	70 0d       	add	r23, r0
    1444:	81 1d       	adc	r24, r1
    1446:	11 24       	eor	r1, r1
    1448:	91 1d       	adc	r25, r1
    144a:	b2 9f       	mul	r27, r18
    144c:	70 0d       	add	r23, r0
    144e:	81 1d       	adc	r24, r1
    1450:	11 24       	eor	r1, r1
    1452:	91 1d       	adc	r25, r1
    1454:	08 95       	ret

00001456 <atoi>:
    1456:	fc 01       	movw	r30, r24
    1458:	88 27       	eor	r24, r24
    145a:	99 27       	eor	r25, r25
    145c:	e8 94       	clt
    145e:	21 91       	ld	r18, Z+
    1460:	20 32       	cpi	r18, 0x20	; 32
    1462:	e9 f3       	breq	.-6      	; 0x145e <atoi+0x8>
    1464:	29 30       	cpi	r18, 0x09	; 9
    1466:	10 f0       	brcs	.+4      	; 0x146c <atoi+0x16>
    1468:	2e 30       	cpi	r18, 0x0E	; 14
    146a:	c8 f3       	brcs	.-14     	; 0x145e <atoi+0x8>
    146c:	2b 32       	cpi	r18, 0x2B	; 43
    146e:	41 f0       	breq	.+16     	; 0x1480 <atoi+0x2a>
    1470:	2d 32       	cpi	r18, 0x2D	; 45
    1472:	39 f4       	brne	.+14     	; 0x1482 <atoi+0x2c>
    1474:	68 94       	set
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <atoi+0x2a>
    1478:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__mulhi_const_10>
    147c:	82 0f       	add	r24, r18
    147e:	91 1d       	adc	r25, r1
    1480:	21 91       	ld	r18, Z+
    1482:	20 53       	subi	r18, 0x30	; 48
    1484:	2a 30       	cpi	r18, 0x0A	; 10
    1486:	c0 f3       	brcs	.-16     	; 0x1478 <atoi+0x22>
    1488:	1e f4       	brtc	.+6      	; 0x1490 <atoi+0x3a>
    148a:	90 95       	com	r25
    148c:	81 95       	neg	r24
    148e:	9f 4f       	sbci	r25, 0xFF	; 255
    1490:	08 95       	ret

00001492 <strtok>:
    1492:	40 e7       	ldi	r20, 0x70	; 112
    1494:	51 e0       	ldi	r21, 0x01	; 1
    1496:	0e 94 57 0a 	call	0x14ae	; 0x14ae <strtok_r>
    149a:	08 95       	ret

0000149c <strcmp>:
    149c:	fb 01       	movw	r30, r22
    149e:	dc 01       	movw	r26, r24
    14a0:	8d 91       	ld	r24, X+
    14a2:	01 90       	ld	r0, Z+
    14a4:	80 19       	sub	r24, r0
    14a6:	01 10       	cpse	r0, r1
    14a8:	d9 f3       	breq	.-10     	; 0x14a0 <strcmp+0x4>
    14aa:	99 0b       	sbc	r25, r25
    14ac:	08 95       	ret

000014ae <strtok_r>:
    14ae:	fa 01       	movw	r30, r20
    14b0:	a1 91       	ld	r26, Z+
    14b2:	b0 81       	ld	r27, Z
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	19 f4       	brne	.+6      	; 0x14be <strtok_r+0x10>
    14b8:	10 97       	sbiw	r26, 0x00	; 0
    14ba:	e1 f0       	breq	.+56     	; 0x14f4 <strtok_r+0x46>
    14bc:	cd 01       	movw	r24, r26
    14be:	dc 01       	movw	r26, r24
    14c0:	cd 01       	movw	r24, r26
    14c2:	0d 90       	ld	r0, X+
    14c4:	00 20       	and	r0, r0
    14c6:	11 f4       	brne	.+4      	; 0x14cc <strtok_r+0x1e>
    14c8:	c0 01       	movw	r24, r0
    14ca:	13 c0       	rjmp	.+38     	; 0x14f2 <strtok_r+0x44>
    14cc:	fb 01       	movw	r30, r22
    14ce:	21 91       	ld	r18, Z+
    14d0:	22 23       	and	r18, r18
    14d2:	19 f0       	breq	.+6      	; 0x14da <strtok_r+0x2c>
    14d4:	20 15       	cp	r18, r0
    14d6:	d9 f7       	brne	.-10     	; 0x14ce <strtok_r+0x20>
    14d8:	f3 cf       	rjmp	.-26     	; 0x14c0 <strtok_r+0x12>
    14da:	fb 01       	movw	r30, r22
    14dc:	21 91       	ld	r18, Z+
    14de:	20 15       	cp	r18, r0
    14e0:	19 f4       	brne	.+6      	; 0x14e8 <strtok_r+0x3a>
    14e2:	1e 92       	st	-X, r1
    14e4:	11 96       	adiw	r26, 0x01	; 1
    14e6:	06 c0       	rjmp	.+12     	; 0x14f4 <strtok_r+0x46>
    14e8:	22 23       	and	r18, r18
    14ea:	c1 f7       	brne	.-16     	; 0x14dc <strtok_r+0x2e>
    14ec:	0d 90       	ld	r0, X+
    14ee:	00 20       	and	r0, r0
    14f0:	a1 f7       	brne	.-24     	; 0x14da <strtok_r+0x2c>
    14f2:	d0 01       	movw	r26, r0
    14f4:	fa 01       	movw	r30, r20
    14f6:	a1 93       	st	Z+, r26
    14f8:	b0 83       	st	Z, r27
    14fa:	08 95       	ret

000014fc <__mulhi_const_10>:
    14fc:	7a e0       	ldi	r23, 0x0A	; 10
    14fe:	97 9f       	mul	r25, r23
    1500:	90 2d       	mov	r25, r0
    1502:	87 9f       	mul	r24, r23
    1504:	80 2d       	mov	r24, r0
    1506:	91 0d       	add	r25, r1
    1508:	11 24       	eor	r1, r1
    150a:	08 95       	ret

0000150c <_exit>:
    150c:	f8 94       	cli

0000150e <__stop_program>:
    150e:	ff cf       	rjmp	.-2      	; 0x150e <__stop_program>
